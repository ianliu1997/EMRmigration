//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace PalashDynamics.Service.EmailServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConcurrencyException", Namespace="http://schemas.datacontract.org/2004/07/WcfExceptionExample.Web.DataContracts")]
    public partial class ConcurrencyException : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DetailsField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="EmailServiceReference.EmailService")]
    public interface EmailService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmailService/SendEmail", ReplyAction="urn:EmailService/SendEmailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PalashDynamics.Service.EmailServiceReference.ConcurrencyException), Action="urn:EmailService/SendEmailConcurrencyExceptionFault", Name="ConcurrencyException", Namespace="http://schemas.datacontract.org/2004/07/WcfExceptionExample.Web.DataContracts")]
        System.IAsyncResult BeginSendEmail(string fromEmail, string toEmail, string subject, string body, System.AsyncCallback callback, object asyncState);
        
        bool EndSendEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmailService/SendEmailwithAttachment", ReplyAction="urn:EmailService/SendEmailwithAttachmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PalashDynamics.Service.EmailServiceReference.ConcurrencyException), Action="urn:EmailService/SendEmailwithAttachmentConcurrencyExceptionFault", Name="ConcurrencyException", Namespace="http://schemas.datacontract.org/2004/07/WcfExceptionExample.Web.DataContracts")]
        System.IAsyncResult BeginSendEmailwithAttachment(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, System.AsyncCallback callback, object asyncState);
        
        bool EndSendEmailwithAttachment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:EmailService/SendEmailwithAttachmentForPathology", ReplyAction="urn:EmailService/SendEmailwithAttachmentForPathologyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PalashDynamics.Service.EmailServiceReference.ConcurrencyException), Action="urn:EmailService/SendEmailwithAttachmentForPathologyConcurrencyExceptionFault", Name="ConcurrencyException", Namespace="http://schemas.datacontract.org/2004/07/WcfExceptionExample.Web.DataContracts")]
        System.IAsyncResult BeginSendEmailwithAttachmentForPathology(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, long UnitId, System.AsyncCallback callback, object asyncState);
        
        bool EndSendEmailwithAttachmentForPathology(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EmailServiceChannel : PalashDynamics.Service.EmailServiceReference.EmailService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailwithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailwithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailwithAttachmentForPathologyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailwithAttachmentForPathologyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailServiceClient : System.ServiceModel.ClientBase<PalashDynamics.Service.EmailServiceReference.EmailService>, PalashDynamics.Service.EmailServiceReference.EmailService {
        
        private BeginOperationDelegate onBeginSendEmailDelegate;
        
        private EndOperationDelegate onEndSendEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailwithAttachmentDelegate;
        
        private EndOperationDelegate onEndSendEmailwithAttachmentDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailwithAttachmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailwithAttachmentForPathologyDelegate;
        
        private EndOperationDelegate onEndSendEmailwithAttachmentForPathologyDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailwithAttachmentForPathologyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public EmailServiceClient() {
        }
        
        public EmailServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SendEmailCompletedEventArgs> SendEmailCompleted;
        
        public event System.EventHandler<SendEmailwithAttachmentCompletedEventArgs> SendEmailwithAttachmentCompleted;
        
        public event System.EventHandler<SendEmailwithAttachmentForPathologyCompletedEventArgs> SendEmailwithAttachmentForPathologyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PalashDynamics.Service.EmailServiceReference.EmailService.BeginSendEmail(string fromEmail, string toEmail, string subject, string body, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmail(fromEmail, toEmail, subject, body, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PalashDynamics.Service.EmailServiceReference.EmailService.EndSendEmail(System.IAsyncResult result) {
            return base.Channel.EndSendEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fromEmail = ((string)(inValues[0]));
            string toEmail = ((string)(inValues[1]));
            string subject = ((string)(inValues[2]));
            string body = ((string)(inValues[3]));
            return ((PalashDynamics.Service.EmailServiceReference.EmailService)(this)).BeginSendEmail(fromEmail, toEmail, subject, body, callback, asyncState);
        }
        
        private object[] OnEndSendEmail(System.IAsyncResult result) {
            bool retVal = ((PalashDynamics.Service.EmailServiceReference.EmailService)(this)).EndSendEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailCompleted(object state) {
            if ((this.SendEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailAsync(string fromEmail, string toEmail, string subject, string body) {
            this.SendEmailAsync(fromEmail, toEmail, subject, body, null);
        }
        
        public void SendEmailAsync(string fromEmail, string toEmail, string subject, string body, object userState) {
            if ((this.onBeginSendEmailDelegate == null)) {
                this.onBeginSendEmailDelegate = new BeginOperationDelegate(this.OnBeginSendEmail);
            }
            if ((this.onEndSendEmailDelegate == null)) {
                this.onEndSendEmailDelegate = new EndOperationDelegate(this.OnEndSendEmail);
            }
            if ((this.onSendEmailCompletedDelegate == null)) {
                this.onSendEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailDelegate, new object[] {
                        fromEmail,
                        toEmail,
                        subject,
                        body}, this.onEndSendEmailDelegate, this.onSendEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PalashDynamics.Service.EmailServiceReference.EmailService.BeginSendEmailwithAttachment(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmailwithAttachment(fromEmail, toEmail, subject, body, NoofAttachments, AttachedFile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PalashDynamics.Service.EmailServiceReference.EmailService.EndSendEmailwithAttachment(System.IAsyncResult result) {
            return base.Channel.EndSendEmailwithAttachment(result);
        }
        
        private System.IAsyncResult OnBeginSendEmailwithAttachment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fromEmail = ((string)(inValues[0]));
            string toEmail = ((string)(inValues[1]));
            string subject = ((string)(inValues[2]));
            string body = ((string)(inValues[3]));
            long NoofAttachments = ((long)(inValues[4]));
            System.Collections.ObjectModel.ObservableCollection<string> AttachedFile = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[5]));
            return ((PalashDynamics.Service.EmailServiceReference.EmailService)(this)).BeginSendEmailwithAttachment(fromEmail, toEmail, subject, body, NoofAttachments, AttachedFile, callback, asyncState);
        }
        
        private object[] OnEndSendEmailwithAttachment(System.IAsyncResult result) {
            bool retVal = ((PalashDynamics.Service.EmailServiceReference.EmailService)(this)).EndSendEmailwithAttachment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailwithAttachmentCompleted(object state) {
            if ((this.SendEmailwithAttachmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailwithAttachmentCompleted(this, new SendEmailwithAttachmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailwithAttachmentAsync(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile) {
            this.SendEmailwithAttachmentAsync(fromEmail, toEmail, subject, body, NoofAttachments, AttachedFile, null);
        }
        
        public void SendEmailwithAttachmentAsync(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, object userState) {
            if ((this.onBeginSendEmailwithAttachmentDelegate == null)) {
                this.onBeginSendEmailwithAttachmentDelegate = new BeginOperationDelegate(this.OnBeginSendEmailwithAttachment);
            }
            if ((this.onEndSendEmailwithAttachmentDelegate == null)) {
                this.onEndSendEmailwithAttachmentDelegate = new EndOperationDelegate(this.OnEndSendEmailwithAttachment);
            }
            if ((this.onSendEmailwithAttachmentCompletedDelegate == null)) {
                this.onSendEmailwithAttachmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailwithAttachmentCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailwithAttachmentDelegate, new object[] {
                        fromEmail,
                        toEmail,
                        subject,
                        body,
                        NoofAttachments,
                        AttachedFile}, this.onEndSendEmailwithAttachmentDelegate, this.onSendEmailwithAttachmentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PalashDynamics.Service.EmailServiceReference.EmailService.BeginSendEmailwithAttachmentForPathology(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, long UnitId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmailwithAttachmentForPathology(fromEmail, toEmail, subject, body, NoofAttachments, AttachedFile, UnitId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PalashDynamics.Service.EmailServiceReference.EmailService.EndSendEmailwithAttachmentForPathology(System.IAsyncResult result) {
            return base.Channel.EndSendEmailwithAttachmentForPathology(result);
        }
        
        private System.IAsyncResult OnBeginSendEmailwithAttachmentForPathology(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fromEmail = ((string)(inValues[0]));
            string toEmail = ((string)(inValues[1]));
            string subject = ((string)(inValues[2]));
            string body = ((string)(inValues[3]));
            long NoofAttachments = ((long)(inValues[4]));
            System.Collections.ObjectModel.ObservableCollection<string> AttachedFile = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[5]));
            long UnitId = ((long)(inValues[6]));
            return ((PalashDynamics.Service.EmailServiceReference.EmailService)(this)).BeginSendEmailwithAttachmentForPathology(fromEmail, toEmail, subject, body, NoofAttachments, AttachedFile, UnitId, callback, asyncState);
        }
        
        private object[] OnEndSendEmailwithAttachmentForPathology(System.IAsyncResult result) {
            bool retVal = ((PalashDynamics.Service.EmailServiceReference.EmailService)(this)).EndSendEmailwithAttachmentForPathology(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailwithAttachmentForPathologyCompleted(object state) {
            if ((this.SendEmailwithAttachmentForPathologyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailwithAttachmentForPathologyCompleted(this, new SendEmailwithAttachmentForPathologyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailwithAttachmentForPathologyAsync(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, long UnitId) {
            this.SendEmailwithAttachmentForPathologyAsync(fromEmail, toEmail, subject, body, NoofAttachments, AttachedFile, UnitId, null);
        }
        
        public void SendEmailwithAttachmentForPathologyAsync(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, long UnitId, object userState) {
            if ((this.onBeginSendEmailwithAttachmentForPathologyDelegate == null)) {
                this.onBeginSendEmailwithAttachmentForPathologyDelegate = new BeginOperationDelegate(this.OnBeginSendEmailwithAttachmentForPathology);
            }
            if ((this.onEndSendEmailwithAttachmentForPathologyDelegate == null)) {
                this.onEndSendEmailwithAttachmentForPathologyDelegate = new EndOperationDelegate(this.OnEndSendEmailwithAttachmentForPathology);
            }
            if ((this.onSendEmailwithAttachmentForPathologyCompletedDelegate == null)) {
                this.onSendEmailwithAttachmentForPathologyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailwithAttachmentForPathologyCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailwithAttachmentForPathologyDelegate, new object[] {
                        fromEmail,
                        toEmail,
                        subject,
                        body,
                        NoofAttachments,
                        AttachedFile,
                        UnitId}, this.onEndSendEmailwithAttachmentForPathologyDelegate, this.onSendEmailwithAttachmentForPathologyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PalashDynamics.Service.EmailServiceReference.EmailService CreateChannel() {
            return new EmailServiceClientChannel(this);
        }
        
        private class EmailServiceClientChannel : ChannelBase<PalashDynamics.Service.EmailServiceReference.EmailService>, PalashDynamics.Service.EmailServiceReference.EmailService {
            
            public EmailServiceClientChannel(System.ServiceModel.ClientBase<PalashDynamics.Service.EmailServiceReference.EmailService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendEmail(string fromEmail, string toEmail, string subject, string body, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = fromEmail;
                _args[1] = toEmail;
                _args[2] = subject;
                _args[3] = body;
                System.IAsyncResult _result = base.BeginInvoke("SendEmail", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSendEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SendEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendEmailwithAttachment(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = fromEmail;
                _args[1] = toEmail;
                _args[2] = subject;
                _args[3] = body;
                _args[4] = NoofAttachments;
                _args[5] = AttachedFile;
                System.IAsyncResult _result = base.BeginInvoke("SendEmailwithAttachment", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSendEmailwithAttachment(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SendEmailwithAttachment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendEmailwithAttachmentForPathology(string fromEmail, string toEmail, string subject, string body, long NoofAttachments, System.Collections.ObjectModel.ObservableCollection<string> AttachedFile, long UnitId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = fromEmail;
                _args[1] = toEmail;
                _args[2] = subject;
                _args[3] = body;
                _args[4] = NoofAttachments;
                _args[5] = AttachedFile;
                _args[6] = UnitId;
                System.IAsyncResult _result = base.BeginInvoke("SendEmailwithAttachmentForPathology", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSendEmailwithAttachmentForPathology(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SendEmailwithAttachmentForPathology", _args, result)));
                return _result;
            }
        }
    }
}
