using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Windows.Browser;
using System.Windows.Controls.Primitives;
using System.Threading;
using DataDrivenApplication;
using System.Reflection;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using PalashDynamics.Service.DataTemplateHttpsServiceRef;
using PalashDynamics.Service.DataTemplateServiceRef1;
using System.Windows.Data;
using System.Windows.Printing;
using CIMS;
using PalashDynamics.ValueObjects;
using PalashDynamics.ValueObjects.Master;
using PalashDynamics.ValueObjects.Patient;
using PalashDynamics.ValueObjects.Administration;
using PalashDynamics.ValueObjects.OutPatientDepartment;
using PalashDynamics.ValueObjects.Inventory;
using PalashDynamics.UserControls;
using PalashDynamics.Controls;
using PalashDynamics.Service.PalashTestServiceReference;
using PalashDynamics.ValueObjects.OutPatientDepartment.Registration.OPDPatientMaster;
using PalashDynamics.ValueObjects.EMR;
using MessageBoxControl;
using System.IO;
using PalashDynamics.ValueObjects;

namespace DataDrivenApplication
{
    public partial class TemplateAssignment : UserControl, IInitiateCIMS
    {
        #region IInitiateCIMS Members

        public void Initiate(string Mode)
        {
            //throw new NotImplementedException();

        }

        #endregion

        string Context = "";

        System.Windows.Controls.Primitives.Popup p = null;
        System.Windows.Controls.Primitives.Popup pf = null;
        public FormDetail SelectedFormStructure { get; set; }
        public FormDetail SelectedHistoryStructure { get; set; }
        public Patient SelectedPatient { get; set; }
        public bool IsPatientSaved = false;
        public bool IsFirstTime = true;
        public bool flagForTabs = false;
        public bool IsTemplateByDoctor = false;
        public string TemplateByNurse;
        public string SelectedUser { get; set; }
        public clsVarianceVO variance { get; set; }
        private bool IsSavedBeforePrint = false;
        public bool IsConsultationVisit = false;
        public int VisitTypeID { get; set; }
        public clsVisitVO CurrentVisit { get; set; }
        bool IsSaved = false;
        long GlobalTemplateID = 0;
        public clsPCRVO objPCR { get; set; }
        public clsCaseReferralVO objCaseReferral { get; set; }
        public List<clsPatientPrescriptionDetailVO> PrescriptionList { get; set; }
        public List<clsDoctorSuggestedServiceDetailVO> ServiceList { get; set; }

        public List<clsPatientEMRDetailsVO> listPatientEMRDetails { get; set; }
        public List<clsPatientEMRUploadedFilesVO> listPatientEMRUploadedFiles { get; set; }

        private System.Collections.ObjectModel.ObservableCollection<string> listOfReports = new System.Collections.ObjectModel.ObservableCollection<string>();

        bool IsPageLoded = false;
        WaitIndicator Indicatior = null;
        bool IsIVFTemp = false;
        long IVFPatientID;
        long SelectedTemplateID;
        public long PatientEMRDataId;

        public TemplateAssignment()
        {
            InitializeComponent();
            variance = new clsVarianceVO();
            if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
            {
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId
                  && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.AllowClinicalTransaction == true)
                {
                    //do  nothing
                }
                else
                {
                    SaveItemButton.IsEnabled = false;
                    PrintItemButton.IsEnabled = false;
                }
            }
            this.Loaded += new RoutedEventHandler(TemplateAssignment_Loaded);
            this.Unloaded += new RoutedEventHandler(TemplateAssignment_Unloaded);
        }

        public TemplateAssignment(long TemplateID)
        {
            InitializeComponent();
            variance = new clsVarianceVO();
            if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
            {
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId
                  && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.AllowClinicalTransaction == true)
                {
                    //do  nothing
                }
                else
                {
                    SaveItemButton.IsEnabled = false;
                    PrintItemButton.IsEnabled = false;
                }
            }
            GlobalTemplateID = TemplateID;
            Context = "TEMPLATE_MENU";
            //FormTitle.Text = "Patient Feedback";
            FormTab.Visibility = Visibility.Collapsed;
            UpperGrid.Visibility = Visibility.Collapsed;
            FormTab.SelectedIndex = 1;
            this.Loaded += new RoutedEventHandler(TemplateAssignment_Loaded);
            this.Unloaded += new RoutedEventHandler(TemplateAssignment_Unloaded);
        }

        public TemplateAssignment(string Form)
        {
            InitializeComponent();
            if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
            {
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId
                  && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.AllowClinicalTransaction == true)
                {
                    //do  nothing
                }
                else
                {
                    SaveItemButton.IsEnabled = false;
                    PrintItemButton.IsEnabled = false;
                }
            }
            Context = "FEEDBACK";
            FormTitle.Text = "Patient Feedback";
            FormTab.Visibility = Visibility.Collapsed;
            UpperGrid.Visibility = Visibility.Collapsed;
            // PrintItemButton.Visibility = Visibility.Collapsed;
            FormTab.SelectedIndex = 1;
            this.Loaded += new RoutedEventHandler(PatientFeedBack_Loaded);
            this.Unloaded += new RoutedEventHandler(PatientFeedBack_Unloaded);
        }

        public TemplateAssignment(long SelectedRecord, bool IsIVF, long PatientID, long TemplateDataId,Boolean BtnFlag=false)
        {
            InitializeComponent();
            variance = new clsVarianceVO();
            if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
            {
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId
                  && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.AllowClinicalTransaction == true)
                {
                    //do  nothing
                }
                else
                {
                    SaveItemButton.IsEnabled = false;
                    PrintItemButton.IsEnabled = false;
                }
            }
            GlobalTemplateID = TemplateDataId;
            Context = "TEMPLATE_MENU";
            //FormTitle.Text = "Patient Feedback";
            FormTab.Visibility = Visibility.Collapsed;
            UpperGrid.Visibility = Visibility.Collapsed;

            SaveItemButton.IsEnabled = BtnFlag;
           
            // PrintItemButton.Visibility = Visibility.Collapsed;
            FormTab.SelectedIndex = 1;
            IsIVFTemp = IsIVF;
            IVFPatientID = PatientID;
            SelectedTemplateID = SelectedRecord;
            this.Loaded += new RoutedEventHandler(TemplateAssignment_Loaded);
            this.Unloaded += new RoutedEventHandler(TemplateAssignment_Unloaded);
        }

        void PatientFeedBack_Unloaded(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();
            p.IsOpen = false;
            pf.IsOpen = false;
            p = null;
            pf = null;
        }

        void PatientFeedBack_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                clsGetVisitBizActionVO BizActionVisit = new clsGetVisitBizActionVO();
                BizActionVisit.Details = new clsVisitVO();
                BizActionVisit.GetLatestVisit = true;
                BizActionVisit.Details.PatientId = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                BizActionVisit.Details.PatientUnitId = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                BizActionVisit.Details.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                {
                    BizActionVisit.ForHO = true;
                    BizActionVisit.Details.UnitId = 0L;
                }

                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                PalashServiceClient clientVisit = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                clientVisit.ProcessCompleted += (sVisit, argVisit) =>
                {
                    if (argVisit.Error == null)
                    {
                        if (argVisit.Result != null)
                        {
                            //if (((clsGetVisitBizActionVO)argVisit.Result).Details != null && ((clsGetVisitBizActionVO)argVisit.Result).Details.ID > 0 && ((clsGetVisitBizActionVO)argVisit.Result).Details.VisitStatus == true)
                            //{
                            //    BizActionVisit = (clsGetVisitBizActionVO)argVisit.Result;
                            //    CurrentVisit = ((clsGetVisitBizActionVO)argVisit.Result).Details;
                            //    LoadFeedbackForm();
                            //}
                            //else
                            //{
                            //    Indicatior.Close();
                            //    MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Active Visit is not found. \n Please create a visit first.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                            //    msgbx.Show();
                            //}
                            if (((clsGetVisitBizActionVO)argVisit.Result).Details != null && ((clsGetVisitBizActionVO)argVisit.Result).Details.ID > 0)
                            {
                                BizActionVisit = (clsGetVisitBizActionVO)argVisit.Result;
                                CurrentVisit = ((clsGetVisitBizActionVO)argVisit.Result).Details;
                                LoadFeedbackForm();
                            }
                            else
                            {
                                Indicatior.Close();
                                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Visit is not found. \n Please create a visit first.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                msgbx.Show();
                            }
                        }
                    }
                };
                clientVisit.ProcessAsync(BizActionVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
                clientVisit.CloseAsync();

            }
            catch (Exception ex)
            {
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while getting visit information.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                msgbx.Show();
            }

            objPCR = new clsPCRVO();
            p = new System.Windows.Controls.Primitives.Popup();
            pf = new System.Windows.Controls.Primitives.Popup();

            Border b = null;
            b = new Border();
            b.Child = null;
            b.Background = (Brush)this.Resources["BackgroundDefault"];
            b.BorderBrush = (Brush)this.Resources["BorderDefault"];
            b.BorderThickness = new Thickness(1);
            b.CornerRadius = new CornerRadius(5);
            b.MouseLeftButtonDown += new MouseButtonEventHandler(b_MouseLeftButtonDown);
            ScrollViewer sv = null;
            sv = new ScrollViewer();
            sv.Background = new SolidColorBrush(Colors.Gray);
            sv.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
            sv.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
            sv.Content = b;
            p.Child = sv;

            Border b1 = null;
            b1 = new Border();
            b1.Child = null;
            b1.Background = (Brush)this.Resources["BackgroundDefault"];
            b1.BorderBrush = (Brush)this.Resources["BorderDefault"];
            b1.BorderThickness = new Thickness(1);
            b1.CornerRadius = new CornerRadius(5);
            b1.MouseLeftButtonDown += new MouseButtonEventHandler(b1_MouseLeftButtonDown);
            ScrollViewer sv1 = null;
            sv1 = new ScrollViewer();
            sv1.Background = new SolidColorBrush(Colors.Gray);
            sv1.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
            sv1.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
            sv1.Content = b1;
            pf.Child = sv1;

            long RoleID = ((clsUserRoleVO)((clsUserGeneralDetailVO)((clsUserVO)((IApplicationConfiguration)App.Current).CurrentUser).UserGeneralDetailVO).RoleDetails).ID;
            long AdminRoleID = ((clsAppConfigVO)((IApplicationConfiguration)App.Current).ApplicationConfigurations).AdminRoleID;
            long NurseRoleID = ((clsAppConfigVO)((IApplicationConfiguration)App.Current).ApplicationConfigurations).NurseRoleID;
            long DoctorRoleID = ((clsAppConfigVO)((IApplicationConfiguration)App.Current).ApplicationConfigurations).DoctorRoleID;

            if (RoleID == NurseRoleID)
                SelectedUser = "Nurse";

            if (RoleID == DoctorRoleID)
                SelectedUser = "Doctor";

            if (RoleID == AdminRoleID)
                SelectedUser = "Admin";

            if (!(((IApplicationConfiguration)App.Current).SelectedPatient == null || ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID == 0))
            {
                if (!IsPageLoded)
                {
                    Indicatior = new WaitIndicator();
                    Indicatior.Show();

                    Patient pat = new Patient();
                    clsGetPatientBizActionVO BizAction = new PalashDynamics.ValueObjects.Patient.clsGetPatientBizActionVO();
                    BizAction.PatientDetails = new PalashDynamics.ValueObjects.Patient.clsPatientVO();
                    BizAction.PatientDetails.GeneralDetails = (clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient;

                    Uri address = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                    PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address.AbsoluteUri);

                    client.ProcessCompleted += (s, args) =>
                    {
                        if (args.Error == null && args.Result != null)
                        {
                            pat.PatientId = BizAction.PatientDetails.GeneralDetails.PatientID;
                            pat.patientUnitID = BizAction.PatientDetails.GeneralDetails.UnitId;
                            pat.Name = BizAction.PatientDetails.GeneralDetails.FirstName + " " + BizAction.PatientDetails.GeneralDetails.MiddleName + " " + BizAction.PatientDetails.GeneralDetails.LastName;
                            pat.Address = BizAction.PatientDetails.AddressLine1 + ", " + BizAction.PatientDetails.City + ", " + BizAction.PatientDetails.Country;
                            pat.Age = DateTime.Now.Year - ((DateTime)BizAction.PatientDetails.GeneralDetails.DateOfBirth).Year;
                            pat.ClinicRegNo = BizAction.PatientDetails.GeneralDetails.MRNo;
                            pat.Gender = Convert.ToString(BizAction.PatientDetails.GeneralDetails.Gender);
                            //pat.Gender = BizAction.PatientDetails.GenderID == 1 ? true : false;
                            pat.Occupation = "";
                            pat.Phone = BizAction.PatientDetails.ContactNo1;

                            this.SelectedPatient = pat;
                            FormTitle.Text = "Patient Feedback : " + pat.Name;
                        }
                    };
                    client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);

                    Indicatior.Close();
                }
                IsPageLoded = true;
            }
        }

        public void LoadFeedbackForm()
        {
            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy             
            Indicatior = new WaitIndicator();
            try
            {
                // ========================================= Consultation Visit ============================================
                #region Consultation
                // code if Visit Type = First Visit                            
                Indicatior.Show();
                clsGetPatientFeedbackBizActionVO BizActionObjPatientFeedback = new clsGetPatientFeedbackBizActionVO();
                BizActionObjPatientFeedback.PatientID = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                BizActionObjPatientFeedback.PatientUnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                BizActionObjPatientFeedback.VisitID = CurrentVisit.ID;
                BizActionObjPatientFeedback.UnitID = CurrentVisit.UnitId;

                PalashServiceClient clientObjPatientFeedback = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                clientObjPatientFeedback.ProcessCompleted += (sObjPatientFeedback, argsObjPatientFeedback) =>
                {
                    if (argsObjPatientFeedback.Result != null && ((clsGetPatientFeedbackBizActionVO)argsObjPatientFeedback.Result).objPatientFeedback != null)
                    {
                        Indicatior.Show();
                        IsFirstTime = true;
                        IsSaved = true;
                        this.SelectedFormStructure = ((clsGetPatientFeedbackBizActionVO)argsObjPatientFeedback.Result).objPatientFeedback.Feedback.XmlDeserialize<FormDetail>();
                        GenratePreview();
                        MapRelations();
                        IsFirstTime = false;
                        Indicatior.Close();
                    }
                    else
                    {
                        clsGetEMRTemplateBizActionVO BizActionObjEMRTemplateNewConsultation = new clsGetEMRTemplateBizActionVO();
                        BizActionObjEMRTemplateNewConsultation.objEMRTemplate.TemplateID = 12; // 12 is used for PatientFeedback Form
                        Indicatior.Show();
                        PalashServiceClient clientObjEMRTemplateNewConsultation = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                        clientObjEMRTemplateNewConsultation.ProcessCompleted += (sObjEMRTemplateNewConsultation, argsObjEMRTemplateNewConsultation) =>
                        {
                            if ((clsGetEMRTemplateBizActionVO)argsObjEMRTemplateNewConsultation.Result != null)
                            {
                                Indicatior.Show();
                                this.SelectedFormStructure = ((clsGetEMRTemplateBizActionVO)argsObjEMRTemplateNewConsultation.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
                                IsFirstTime = true;
                                IsSaved = false;
                                GenratePreview();
                                MapRelations();
                                IsFirstTime = false;
                                //string es = this.SelectedFormStructure.XmlSerilze();
                                Indicatior.Close();
                            }
                            else
                            {
                                // Not Found
                                Indicatior.Close();
                                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Patient Feedback Template Not Found.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                msgbx.Show();
                            }
                        };
                        clientObjEMRTemplateNewConsultation.ProcessAsync(BizActionObjEMRTemplateNewConsultation, ((IApplicationConfiguration)App.Current).CurrentUser);
                        clientObjEMRTemplateNewConsultation.CloseAsync();
                    }
                };
                clientObjPatientFeedback.ProcessAsync(BizActionObjPatientFeedback, ((IApplicationConfiguration)App.Current).CurrentUser);
                clientObjPatientFeedback.CloseAsync();
                #endregion
                // ====================================== END Consultation =====================================================================                
            }
            catch (Exception ex)
            {
                Indicatior.Close();
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error Occured while loading Feedback form.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                msgbx.Show();
                //HtmlPage.Window.Alert("Error Occured. \rComplaint List is not Populated.");
            }
        }

        public void SaveFeedback()
        {
            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy 
            try
            {
                Indicatior = new WaitIndicator();
                Indicatior.Show();

                string test = this.SelectedFormStructure.XmlSerilze();
                if (!IsSaved)
                {
                    #region Add Patient EMR Template
                    //Uri address1 = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
                    //DataTemplateServiceClient client2 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
                    clsAddPatientFeedbackBizActionVO BizActionObjPatientFeedback = new clsAddPatientFeedbackBizActionVO();
                    clsPatientFeedbackVO data = new clsPatientFeedbackVO();

                    data.PatientID = SelectedPatient.PatientId;
                    data.PatientUnitID = SelectedPatient.patientUnitID;

                    data.Feedback = test;

                    data.VisitID = CurrentVisit.ID;
                    data.UnitId = CurrentVisit.UnitId;
                    data.Status = true;
                    BizActionObjPatientFeedback.PatientFeedbackDetails = data;

                    PalashServiceClient clientObjPatientFeedback = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                    clientObjPatientFeedback.ProcessCompleted += (sObjPatientEMRData, argsObjPatientEMRData) =>
                    {
                        Indicatior.Close();
                        MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Patient Feedback Saved Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                        msgForTemplateSave.Show();
                    };
                    clientObjPatientFeedback.ProcessAsync(BizActionObjPatientFeedback, ((IApplicationConfiguration)App.Current).CurrentUser);
                    clientObjPatientFeedback.CloseAsync();
                    IsSaved = true;
                    #endregion
                }
                else
                {
                    #region Update Patient EMR Template

                    clsUpdatePatientFeedbackBizActionVO BizActionObjPatientFeedback = new clsUpdatePatientFeedbackBizActionVO();
                    clsPatientFeedbackVO data = new clsPatientFeedbackVO();

                    data.PatientID = SelectedPatient.PatientId;
                    data.PatientUnitID = SelectedPatient.patientUnitID;
                    data.Feedback = test;

                    data.VisitID = CurrentVisit.ID;
                    data.UnitId = CurrentVisit.UnitId;
                    data.Status = true;

                    BizActionObjPatientFeedback.PatientFeedbackDetails = data;

                    PalashServiceClient clientObjPatientFeedback = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                    clientObjPatientFeedback.ProcessCompleted += (sObjPatientFeedback, argsObjPatientFeedback) =>
                    {
                        Indicatior.Close();
                        MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Patient Feedback updated Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                        msgForTemplateSave.Show();
                    };
                    clientObjPatientFeedback.ProcessAsync(BizActionObjPatientFeedback, ((IApplicationConfiguration)App.Current).CurrentUser);
                    clientObjPatientFeedback.CloseAsync();
                    //IsSaved = true;
                    #endregion
                }
                IsPatientSaved = true;
            }
            catch (Exception ex)
            {
                Indicatior.Close();
                //HtmlPage.Window.Alert("Error Occured. \rPatient EMR not Saved.");
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while trying to save Patient Feedback. \nPatient Feedback not saved.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                msgbx.Show();
            }
        }

        void TemplateAssignment_Unloaded(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();
            if (p != null) p.IsOpen = false;
            if (p != null) pf.IsOpen = false;
            p = null;
            pf = null;

            //if (GlobalTemplateID == 0)
            //{
                Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
                DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
                client.GlobalDeleteFileCompleted += (s1, args1) =>
                {
                    if (args1.Error == null)
                    {
                        if (SaveItemButton.IsEnabled == false)
                            SaveItemButton.IsEnabled = true;
                    }
                };
                client.GlobalDeleteFileAsync("../UserUploadedFilesByTemplateTool", listOfReports);
            //}
        }

        void TemplateAssignment_Loaded(object sender, RoutedEventArgs e)
        {
            if (IsIVFTemp == true)
            {
                GetPatientVisit();
                GetTemplateOnSummary();
               // IsIVFTemp = false;
            }
            else if (GlobalTemplateID == 0)
            {
                #region "Without Template"

                try
                {


                    clsGetVisitBizActionVO BizActionVisit = new clsGetVisitBizActionVO();
                    BizActionVisit.Details = new clsVisitVO();
                    BizActionVisit.GetLatestVisit = true;
                    BizActionVisit.Details.PatientId = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                    BizActionVisit.Details.PatientUnitId = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                    BizActionVisit.Details.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;

                    if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                    {
                        BizActionVisit.ForHO = true;
                        BizActionVisit.Details.UnitId = 0L;
                    }


                    Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                    PalashServiceClient clientVisit = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                    clientVisit.ProcessCompleted += (sVisit, argVisit) =>
                    {
                        if (argVisit.Error == null)
                        {
                            if (argVisit.Result != null)
                            {
                                if (((clsGetVisitBizActionVO)argVisit.Result).Details != null && ((clsGetVisitBizActionVO)argVisit.Result).Details.ID > 0 && ((clsGetVisitBizActionVO)argVisit.Result).Details.VisitStatus == true)
                                {

                                    clsUpdateCurrentVisitStatusBizActionVO updateVisit = new clsUpdateCurrentVisitStatusBizActionVO();

                                    updateVisit.VisitID = ((IApplicationConfiguration)App.Current).SelectedPatient.VisitID;
                                    updateVisit.CurrentVisitStatus = PalashDynamics.ValueObjects.VisitCurrentStatus.Consulation;

                                    PalashServiceClient Client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    Client1.ProcessCompleted += (s1, arg1) =>
                                    {
                                        if (arg1.Error == null && arg1.Result != null)
                                        {

                                        }

                                    };

                                    Client1.ProcessAsync(updateVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    Client1.CloseAsync();

                                    BizActionVisit = (clsGetVisitBizActionVO)argVisit.Result;
                                    CurrentVisit = ((clsGetVisitBizActionVO)argVisit.Result).Details;

                                }
                            }
                        }
                    };
                    clientVisit.ProcessAsync(BizActionVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
                    clientVisit.CloseAsync();

                }
                catch (Exception ex)
                {
                    MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while getting visit information.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                    msgbx.Show();
                }

                objPCR = new clsPCRVO();
                p = new System.Windows.Controls.Primitives.Popup();
                pf = new System.Windows.Controls.Primitives.Popup();

                Border b = null;
                b = new Border();
                b.Child = null;
                b.Background = (Brush)this.Resources["BackgroundDefault"];
                b.BorderBrush = (Brush)this.Resources["BorderDefault"];
                b.BorderThickness = new Thickness(1);
                b.CornerRadius = new CornerRadius(5);
                b.MouseLeftButtonDown += new MouseButtonEventHandler(b_MouseLeftButtonDown);
                ScrollViewer sv = null;
                sv = new ScrollViewer();
                sv.Background = new SolidColorBrush(Colors.Gray);
                sv.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
                sv.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
                sv.Content = b;
                p.Child = sv;

                Border b1 = null;
                b1 = new Border();
                b1.Child = null;
                b1.Background = (Brush)this.Resources["BackgroundDefault"];
                b1.BorderBrush = (Brush)this.Resources["BorderDefault"];
                b1.BorderThickness = new Thickness(1);
                b1.CornerRadius = new CornerRadius(5);
                b1.MouseLeftButtonDown += new MouseButtonEventHandler(b1_MouseLeftButtonDown);
                ScrollViewer sv1 = null;
                sv1 = new ScrollViewer();
                sv1.Background = new SolidColorBrush(Colors.Gray);
                sv1.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
                sv1.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
                sv1.Content = b1;
                pf.Child = sv1;

                long RoleID = ((clsUserRoleVO)((clsUserGeneralDetailVO)((clsUserVO)((IApplicationConfiguration)App.Current).CurrentUser).UserGeneralDetailVO).RoleDetails).ID;
                long AdminRoleID = ((clsAppConfigVO)((IApplicationConfiguration)App.Current).ApplicationConfigurations).AdminRoleID;
                long NurseRoleID = ((clsAppConfigVO)((IApplicationConfiguration)App.Current).ApplicationConfigurations).NurseRoleID;
                long DoctorRoleID = ((clsAppConfigVO)((IApplicationConfiguration)App.Current).ApplicationConfigurations).DoctorRoleID;

                if (RoleID == NurseRoleID)
                    SelectedUser = "Nurse";

                if (RoleID == DoctorRoleID)
                    SelectedUser = "Doctor";

                if (RoleID == AdminRoleID)
                    SelectedUser = "Admin";

                if (!(((IApplicationConfiguration)App.Current).SelectedPatient == null || ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID == 0))
                {
                    if (!IsPageLoded)
                    {
                        Indicatior = new WaitIndicator();
                        Indicatior.Show();

                        #region User Detail

                        //cmbUser.Items.Add("Admin");
                        //cmbUser.Items.Add("Nurse");
                        //cmbUser.Items.Add("Doctoer");
                        //cmbUser.Items.Add("Front office");

                        #endregion
                        //PatientSelector win = new PatientSelector();
                        //win.OnOkButtonClick += new RoutedEventHandler(win_OnOkButtonClick);
                        //win.Show();

                        Patient pat = new Patient();
                        clsGetPatientBizActionVO BizAction = new PalashDynamics.ValueObjects.Patient.clsGetPatientBizActionVO();
                        BizAction.PatientDetails = new PalashDynamics.ValueObjects.Patient.clsPatientVO();
                        BizAction.PatientDetails.GeneralDetails = (clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient;

                        Uri address = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                        PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address.AbsoluteUri);

                        client.ProcessCompleted += (s, args) =>
                        {
                            if (args.Error == null && args.Result != null)
                            {
                                pat.PatientId = BizAction.PatientDetails.GeneralDetails.PatientID;
                                pat.patientUnitID = BizAction.PatientDetails.GeneralDetails.UnitId;
                                pat.Name = BizAction.PatientDetails.GeneralDetails.FirstName + " " + BizAction.PatientDetails.GeneralDetails.MiddleName + " " + BizAction.PatientDetails.GeneralDetails.LastName;
                                pat.Address = BizAction.PatientDetails.AddressLine1 + ", " + BizAction.PatientDetails.City + ", " + BizAction.PatientDetails.Country;
                                pat.Age = DateTime.Now.Year - ((DateTime)BizAction.PatientDetails.GeneralDetails.DateOfBirth).Year;
                                pat.ClinicRegNo = BizAction.PatientDetails.GeneralDetails.MRNo;
                                pat.Gender = Convert.ToString(BizAction.PatientDetails.GeneralDetails.Gender);
                                //pat.Gender = BizAction.PatientDetails.GenderID == 1 ? true : false;
                                pat.Occupation = "";
                                pat.Phone = BizAction.PatientDetails.ContactNo1;

                                fillComplaintList(pat);
                            }
                        };
                        client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);


                        //pat.PatientId = ((clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient).PatientID;
                        //pat.Name = ((clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient).FirstName + " " + ((clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient).LastName;
                        //pat.Address = "";
                        //pat.Age = 8;
                        //pat.ClinicRegNo = 1;
                        //pat.Gender = true;
                        //pat.Occupation = "";
                        //pat.Phone = 7348758933;



                        Indicatior.Close();
                    }
                    IsPageLoded = true;
                }
                #endregion
            }
            else
            {
                #region "Load Form from EMRTemplates"
                //this.SelectedPatient = new Patient();
                //this.SelectedPatient.PatientId = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                //this.SelectedPatient.patientUnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                //this.SelectedPatient.
                GetPatient();
                if (GlobalTemplateID == 60)
                {
                    GetPatientCurrentVisit();
                }
                else
                {
                    GetPatientVisit();
                }


                #endregion
            }
        }

        private void GetTemplateOnSummary()
        {
            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy 
            string mTemplate="";
            //IsConsultationVisit = true;
            //VisitTypeID = 1;
            // code if Visit Type = First Visit
            //tabFUConsultation.Visibility = Visibility.Collapsed;
            Indicatior = new WaitIndicator();
            Indicatior.Show();
            //clsGetPatientEMRSummaryDataBizActionVO

            clsGetPatientEMRSummaryDataBizActionVO BizActionObjPatientDataConsultation = new clsGetPatientEMRSummaryDataBizActionVO();
            BizActionObjPatientDataConsultation.PatientID = IVFPatientID;
            BizActionObjPatientDataConsultation.PatientUnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
            BizActionObjPatientDataConsultation.TemplateID = GlobalTemplateID;
            //BizActionObjPatientDataConsultation.VisitID = CurrentVisit.ID;
            BizActionObjPatientDataConsultation.UnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
            //BizActionObjPatientDataConsultation.IsPrevious = false;
            BizActionObjPatientDataConsultation.IsIVF = true;
            PalashServiceClient clientObjPatientDataConsultation = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
            clientObjPatientDataConsultation.ProcessCompleted += (sObjPatientDataConsultation, argsObjPatientDataConsultation) =>
            {
                if (argsObjPatientDataConsultation.Result != null && ((clsGetPatientEMRSummaryDataBizActionVO)argsObjPatientDataConsultation.Result).SummaryList != null)
                {
                    //Indicatior.Show();
                    if (argsObjPatientDataConsultation.Error == null && argsObjPatientDataConsultation.Result != null)
                    {
                        //dgComplaintSummary.ItemsSource = ((clsGetPatientEMRSummaryDataBizActionVO)argsObjPatientDataConsultation.Result).SummaryList;
                        if (((clsGetPatientEMRSummaryDataBizActionVO)argsObjPatientDataConsultation.Result).SummaryList != null)
                        {
                            foreach (var item in ((clsGetPatientEMRSummaryDataBizActionVO)argsObjPatientDataConsultation.Result).SummaryList)
                            {
                                if (item.ID == SelectedTemplateID)
                                {
                                    if (item.TemplateByDoctor != null)
                                        mTemplate = item.TemplateByDoctor; //((clsGetPatientEMRSummaryDataBizActionVO)argsObjPatientDataConsultation.Result).objEMRTemplate.Template;
                                    else if (item.TemplateByNurse != null)
                                        mTemplate = item.TemplateByNurse;
                                }
                            }
                            
                            if (mTemplate != null)
                            {
                                Indicatior.Show();
                                Context = "TEMPLATE";
                                this.SelectedFormStructure = mTemplate.XmlDeserialize<FormDetail>();
                                GenratePreview();
                                MapRelations();
                                // Container.Visibility = System.Windows.Visibility.Collapsed;
                                FormTitle.Visibility = System.Windows.Visibility.Collapsed;
                                // BorderForm.Visibility = System.Windows.Visibility.Collapsed;
                                ContainerTitle.Visibility = System.Windows.Visibility.Collapsed;
                                FormTab.Visibility = Visibility.Collapsed;
                                UpperGrid.Visibility = Visibility.Collapsed;
                                //  PrintItemButton.Visibility = Visibility.Collapsed;
                                FormTab.SelectedIndex = 1;
                                //IsFirstTime = false;
                                Indicatior.Close();
                            }
                            else
                            {
                            }
                        }
                    }                   
                }
            };
            clientObjPatientDataConsultation.ProcessAsync(BizActionObjPatientDataConsultation, ((IApplicationConfiguration)App.Current).CurrentUser);
            clientObjPatientDataConsultation.CloseAsync();
            Indicatior.Close();
        }
        
        void GetPatient()
        {
            if (!(((IApplicationConfiguration)App.Current).SelectedPatient == null || ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID == 0))
            {
                if (!IsPageLoded)
                {
                    Indicatior = new WaitIndicator();
                    Indicatior.Show();

                    Patient pat = new Patient();
                    clsGetPatientBizActionVO BizAction = new PalashDynamics.ValueObjects.Patient.clsGetPatientBizActionVO();
                    BizAction.PatientDetails = new PalashDynamics.ValueObjects.Patient.clsPatientVO();
                    BizAction.PatientDetails.GeneralDetails = (clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient;

                    Uri address = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                    PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address.AbsoluteUri);

                    client.ProcessCompleted += (s, args) =>
                    {
                        if (args.Error == null && args.Result != null)
                        {
                            pat.PatientId = BizAction.PatientDetails.GeneralDetails.PatientID;
                            pat.patientUnitID = BizAction.PatientDetails.GeneralDetails.UnitId;
                            pat.Name = BizAction.PatientDetails.GeneralDetails.FirstName + " " + BizAction.PatientDetails.GeneralDetails.MiddleName + " " + BizAction.PatientDetails.GeneralDetails.LastName;
                            pat.Address = BizAction.PatientDetails.AddressLine1 + ", " + BizAction.PatientDetails.City + ", " + BizAction.PatientDetails.Country;
                            pat.Age = DateTime.Now.Year - ((DateTime)BizAction.PatientDetails.GeneralDetails.DateOfBirth).Year;
                            pat.ClinicRegNo = BizAction.PatientDetails.GeneralDetails.MRNo;
                            pat.Gender = Convert.ToString(BizAction.PatientDetails.GeneralDetails.Gender);
                            //pat.Gender = BizAction.PatientDetails.GenderID == 1 ? true : false;
                            pat.Occupation = "";
                            pat.Phone = BizAction.PatientDetails.ContactNo1;

                            this.SelectedPatient = pat;
                            // FormTitle.Text = "Patient Feedback : " + pat.Name;
                        }
                    };
                    client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);

                    Indicatior.Close();
                }
                IsPageLoded = true;
            }
        }

        void GetPatientVisit()
        {
            try
            {
                clsGetVisitBizActionVO BizActionVisit = new clsGetVisitBizActionVO();
                BizActionVisit.Details = new clsVisitVO();
                BizActionVisit.GetLatestVisit = true;
                BizActionVisit.Details.PatientId = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                BizActionVisit.Details.PatientUnitId = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                BizActionVisit.Details.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                {
                    BizActionVisit.ForHO = true;
                    BizActionVisit.Details.UnitId = 0L;
                }
                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                PalashServiceClient clientVisit = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                clientVisit.ProcessCompleted += (sVisit, argVisit) =>
                {
                    if (argVisit.Error == null)
                    {
                        if (argVisit.Result != null)
                        {
                            //if (((clsGetVisitBizActionVO)argVisit.Result).Details != null && ((clsGetVisitBizActionVO)argVisit.Result).Details.ID > 0 && ((clsGetVisitBizActionVO)argVisit.Result).Details.VisitStatus == true)
                            //{
                            //    BizActionVisit = (clsGetVisitBizActionVO)argVisit.Result;
                            //    CurrentVisit = ((clsGetVisitBizActionVO)argVisit.Result).Details;
                            //    LoadFeedbackForm();
                            //}
                            //else
                            //{
                            //    Indicatior.Close();
                            //    MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Active Visit is not found. \n Please create a visit first.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                            //    msgbx.Show();
                            //}
                            if (((clsGetVisitBizActionVO)argVisit.Result).Details != null && ((clsGetVisitBizActionVO)argVisit.Result).Details.ID > 0)
                            {
                                BizActionVisit = (clsGetVisitBizActionVO)argVisit.Result;
                                CurrentVisit = ((clsGetVisitBizActionVO)argVisit.Result).Details;
                                //LoadFeedbackForm();
                                if (IsIVFTemp != true)
                                {
                                    LoadTemplate(GlobalTemplateID);
                                }
                                else 
                                {
                                    IsIVFTemp = false;
                                }
                            }
                            else
                            {
                                Indicatior.Close();
                                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Visit is not found. \n Please create a visit first.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                msgbx.Show();
                            }
                        }
                    }
                };
                clientVisit.ProcessAsync(BizActionVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
                clientVisit.CloseAsync();
            }
            catch (Exception ex)
            {
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while getting visit information.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                msgbx.Show();
            }
        }

        private void LoadTemplate(long pTemplateID)
        {
            clsGetEMRTemplateBizActionVO BizAction = new clsGetEMRTemplateBizActionVO();
            BizAction.objEMRTemplate = new clsEMRTemplateVO();

            BizAction.objEMRTemplate.TemplateID = pTemplateID;
            BizAction.objEMRTemplate.UnitId = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;

            Uri address = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy
            PalashServiceClient Client = new PalashServiceClient("BasicHttpBinding_IPalashService", address.AbsoluteUri);

            Client.ProcessCompleted += (s, e) =>
            {
                if (e.Error == null && e.Result != null)
                {
                    if (((clsGetEMRTemplateBizActionVO)e.Result).objEMRTemplate != null)
                    {

                        string mTemplate = ((clsGetEMRTemplateBizActionVO)e.Result).objEMRTemplate.Template;

                        if (mTemplate != null)
                        {
                            Indicatior.Show();
                            // IsFirstTime = true;
                            // IsSaved = true;

                            Context = "TEMPLATE";

                            this.SelectedFormStructure = mTemplate.XmlDeserialize<FormDetail>();
                            
                            GenratePreview();
                            MapRelations();
                            // Container.Visibility = System.Windows.Visibility.Collapsed;
                            FormTitle.Visibility = System.Windows.Visibility.Collapsed;
                            // BorderForm.Visibility = System.Windows.Visibility.Collapsed;
                            ContainerTitle.Visibility = System.Windows.Visibility.Collapsed;
                            FormTab.Visibility = Visibility.Collapsed;
                            UpperGrid.Visibility = Visibility.Collapsed;
                            //  PrintItemButton.Visibility = Visibility.Collapsed;
                            FormTab.SelectedIndex = 1;
                            //IsFirstTime = false;
                            Indicatior.Close();
                        }
                        else
                        {

                        }

                    }
                }

            };

            Client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
            Client.CloseAsync();

        }

        private void SaveTemplateData(long pTemplateID)
        {
            // 



        }

        void b_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //throw new NotImplementedException();

            p.IsOpen = false;
        }

        void b1_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //throw new NotImplementedException();

            pf.IsOpen = false;
        }

        void fillComplaintList(Patient pat)
        {
            this.SelectedPatient = pat;
            FormTitle.Text = "Patient EMR : " + pat.Name;

            //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
            //DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
            //DataTemplateServiceClient client = new DataTemplateServiceClient();

            clsGetEMRTemplateListBizActionVO BizAction = new clsGetEMRTemplateListBizActionVO();

            Uri address = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
            PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address.AbsoluteUri);

            client.ProcessCompleted += (s, args) =>
            {
                if (args.Error == null && args.Result != null)
                {
                    cmbComplaint.ItemsSource = ((clsGetEMRTemplateListBizActionVO)args.Result).objEMRTemplateList;
                    this.SelectedFormStructure = null;
                    this.SelectedHistoryStructure = null;
                    if (GlobalTemplateID > 0)
                    {
                        cmbComplaint.SelectedValue = GlobalTemplateID;
                    }
                    GenratePreview();
                    MapRelations();
                }
            };
            client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
        }

        void win_OnOkButtonClick(object sender, RoutedEventArgs e)
        {
            //if (sender is Patient)
            //{
            //    this.SelectedPatient = ((Patient)sender);
            //    FormTitle.Text = "Patient EMR : " + ((Patient)sender).Name;

            //    Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
            //    DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
            //    client.GetTemplatesListCompleted += (s, args) =>
            //    {
            //        if (args.Error == null && args.Result != null)
            //        {
            //            cmbComplaint.ItemsSource = args.Result;
            //            this.SelectedFormStructure = null;
            //            GenratePreview();
            //            MapRelations();
            //        }
            //    };
            //    client.GetTemplatesListAsync();
            //}
        }

        private void SelectPatientButton_Click(object sender, RoutedEventArgs e)
        {
            //PatientSelector win = new PatientSelector();
            //win.OnOkButtonClick += new RoutedEventHandler(win_OnOkButtonClick);
            //win.Show();
        }

        //private void cmbComplaint_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    if (cmbComplaint.SelectedItem != null)
        //    {
        //        Indicatior = new WaitIndicator();


        //        try
        //        {
        //            Int64 VisitId;
        //            clsGetVisitBizActionVO BizAction = new clsGetVisitBizActionVO();
        //            BizAction.Details = new clsVisitVO();
        //            BizAction.GetLatestVisit = true;
        //            BizAction.Details.PatientId = this.SelectedPatient.PatientId;

        //            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
        //            PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //            client.ProcessCompleted += (s, arg) =>
        //            {
        //                if (arg.Error == null)
        //                {
        //                    if (arg.Result != null)
        //                    {
        //                        BizAction = (clsGetVisitBizActionVO)arg.Result;
        //                        VisitId = ((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).ID;                                

        //                        if (VisitId != 0)
        //                        {
        //                            if (((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).VisitTypeID == 2)
        //                            {
        //                                tabFUConsultation.Visibility = Visibility.Visible;
        //                            }
        //                            else
        //                            {
        //                                tabFUConsultation.Visibility = Visibility.Collapsed;
        //                            }
        //                            //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
        //                            //DataTemplateServiceClient client1 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
        //                            clsGetPatientEMRDataBizActionVO BizActionObjPatientData = new clsGetPatientEMRDataBizActionVO();

        //                            BizActionObjPatientData.PatientID = this.SelectedPatient.PatientId;
        //                            BizActionObjPatientData.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                            BizActionObjPatientData.VisitID = VisitId;

        //                            PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                            client1.ProcessCompleted += (s1, args1) =>
        //                            {
        //                                if (args1.Result != null && ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData != null)                                        
        //                                {
        //                                    Indicatior.Show();
        //                                    IsFirstTime = true;
        //                                    IsSaved = true;
        //                                    this.TemplateByNurse=((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData.TemplateByNurse;
        //                                    if(((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData.TemplateByDoctor==null || ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData.TemplateByDoctor=="")
        //                                    {
        //                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
        //                                        IsTemplateByDoctor = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
        //                                        IsTemplateByDoctor = true;
        //                                    }
        //                                    //this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData..Template.XmlDeserialize<FormDetail>();
        //                                    GenratePreview();
        //                                    MapRelations();
        //                                    IsFirstTime = false;
        //                                    Indicatior.Close();
        //                                }
        //                                else
        //                                {

        //                                    //client1 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
        //                                    clsGetEMRTemplateBizActionVO BizActionObjEMRTemplate = new clsGetEMRTemplateBizActionVO();
        //                                    BizActionObjEMRTemplate.objEMRTemplate.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;

        //                                    client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                    client1.ProcessCompleted += (s2, args2) =>
        //                                    {
        //                                        Indicatior.Show();
        //                                        this.SelectedFormStructure = ((clsGetEMRTemplateBizActionVO)args2.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
        //                                        IsFirstTime = true;
        //                                        IsSaved = false;
        //                                        GenratePreview();
        //                                        MapRelations();
        //                                        IsFirstTime = false;
        //                                        //string es = this.SelectedFormStructure.XmlSerilze();
        //                                        Indicatior.Close();
        //                                    };
        //                                    client1.ProcessAsync(BizActionObjEMRTemplate, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                }
        //                            };
        //                            client1.ProcessAsync(BizActionObjPatientData, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                        }
        //                    }                           
        //                }
        //            };

        //            client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);

        //        }
        //        catch (Exception ex)
        //        {
        //            Indicatior.Close();
        //            HtmlPage.Window.Alert("Error Occured. \rComplaint List is not Populated.");
        //        }
        //    }
        //    else
        //    {
        //        GenratePreview();
        //        MapRelations();
        //    }            
        //}

        // Commented on 2 May By "Harish"

        //private void cmbComplaint_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    if (cmbComplaint.SelectedItem != null)
        //    {
        //        IsConsultationVisit = false;
        //        VisitTypeID = 0;
        //        Indicatior = new WaitIndicator();


        //        try
        //        {
        //            Int64 VisitId;
        //            clsGetVisitBizActionVO BizAction = new clsGetVisitBizActionVO();
        //            BizAction.Details = new clsVisitVO();
        //            BizAction.GetLatestVisit = true;
        //            BizAction.Details.PatientId = this.SelectedPatient.PatientId;
        //            BizAction.Details.PatientUnitId = this.SelectedPatient.patientUnitID;


        //            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
        //            PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //            client.ProcessCompleted += (s, arg) =>
        //            {
        //                if (arg.Error == null)
        //                {
        //                    if (arg.Result != null)
        //                    {
        //                        if (((clsGetVisitBizActionVO)arg.Result).Details != null && ((clsGetVisitBizActionVO)arg.Result).Details.ID > 0 && ((clsGetVisitBizActionVO)arg.Result).Details.VisitStatus == true)
        //                        {

        //                            clsUpdateCurrentVisitStatusBizActionVO updateVisit = new clsUpdateCurrentVisitStatusBizActionVO();

        //                            updateVisit.VisitID = ((IApplicationConfiguration)App.Current).SelectedPatient.VisitID;
        //                            updateVisit.CurrentVisitStatus = PalashDynamics.ValueObjects.VisitCurrentStatus.Consulation;

        //                            PalashServiceClient Client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                            Client1.ProcessCompleted += (s1, arg1) =>
        //                            {
        //                                if (arg1.Error == null && arg1.Result != null)
        //                                {

        //                                }

        //                            };

        //                            Client1.ProcessAsync(updateVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                            Client1.CloseAsync();

        //                        BizAction = (clsGetVisitBizActionVO)arg.Result;
        //                        VisitId = ((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).ID;


        //                        if (VisitId != 0 && ((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).VisitTypeID != 1)
        //                        {
        //                            IsConsultationVisit = false;
        //                            if (((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).VisitTypeID == 2)
        //                                VisitTypeID = 2;
        //                            else if (((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).VisitTypeID == 3)
        //                                VisitTypeID = 3;
        //                            // Code For -- If Visit Type = Follow up

        //                            tabFUConsultation.Visibility = Visibility.Visible;

        //                            if (((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).PatientCaseRecord == null || ((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).PatientCaseRecord == "")
        //                            {
        //                                // if Patient EMr is still not saved for Follow up visit

        //                                clsGetSecondLastVisitBizActionVO BizActionSecondLastVisit = new clsGetSecondLastVisitBizActionVO();
        //                                BizActionSecondLastVisit.Details = BizAction.Details;

        //                                client = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                client.ProcessCompleted += (s1, arg1) =>
        //                                {
        //                                    if (arg1.Error == null)
        //                                    {
        //                                        if (arg1.Result != null)
        //                                        {
        //                                            long VisitIDForPreviousPatientEMR = ((clsVisitVO)((clsGetSecondLastVisitBizActionVO)arg1.Result).Details).ID;

        //                                            clsGetPatientEMRDataBizActionVO BizActionObjPatientData = new clsGetPatientEMRDataBizActionVO();

        //                                            BizActionObjPatientData.PatientID = this.SelectedPatient.PatientId;
        //                                            BizActionObjPatientData.PatientUnitID = this.SelectedPatient.patientUnitID;
        //                                            BizActionObjPatientData.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                                            BizActionObjPatientData.VisitID = VisitIDForPreviousPatientEMR;

        //                                            PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                            client1.ProcessCompleted += (s3, args3) =>
        //                                            {
        //                                                if (args3.Result != null && ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData != null)
        //                                                {
        //                                                    // If First Visit PatientEMR Data Is Available

        //                                                    Indicatior.Show();
        //                                                    IsFirstTime = true;
        //                                                    //IsSaved = true;
        //                                                    this.SelectedHistoryStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.HistoryTemplate.XmlDeserialize<FormDetail>();
        //                                                    this.TemplateByNurse = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByNurse;
        //                                                    if (((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor == null || ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor == "")
        //                                                    {
        //                                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
        //                                                        IsTemplateByDoctor = false;
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
        //                                                        IsTemplateByDoctor = true;
        //                                                    }
        //                                                    //this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData..Template.XmlDeserialize<FormDetail>();
        //                                                    GenratePreview();
        //                                                    MapRelations();
        //                                                    IsFirstTime = false;
        //                                                    Indicatior.Close();
        //                                                }
        //                                                else
        //                                                {
        //                                                    // if First Visit PatientEMR data is not Available

        //                                                    clsGetEMRTemplateBizActionVO BizActionObjEMRTemplate = new clsGetEMRTemplateBizActionVO();
        //                                                    BizActionObjEMRTemplate.objEMRTemplate.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                                                    // Commented By Harish ON 14 April 2011 12:45 PM
        //                                                    //BizActionObjEMRTemplate.objEMRTemplate.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;
        //                                                    client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                                    client1.ProcessCompleted += (s2, args2) =>
        //                                                    {
        //                                                        Indicatior.Show();
        //                                                        this.SelectedFormStructure = ((clsGetEMRTemplateBizActionVO)args2.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
        //                                                        IsFirstTime = true;
        //                                                        IsSaved = false;
        //                                                        GenratePreview();
        //                                                        MapRelations();
        //                                                        IsFirstTime = false;
        //                                                        //string es = this.SelectedFormStructure.XmlSerilze();
        //                                                        Indicatior.Close();
        //                                                    };
        //                                                    client1.ProcessAsync(BizActionObjEMRTemplate, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                                }
        //                                            };
        //                                            client1.ProcessAsync(BizActionObjPatientData, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                        }
        //                                        else
        //                                        {
        //                                            MessageBoxControl.MessageBoxChildWindow msg = new MessageBoxChildWindow("Palash", "Wrong Visit Type. Plz Select First Visit.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
        //                                            msg.Show();
        //                                        }
        //                                    }
        //                                };

        //                                client.ProcessAsync(BizActionSecondLastVisit, ((IApplicationConfiguration)App.Current).CurrentUser);

        //                            }
        //                            else
        //                            {
        //                                // If Follow Visit Details are already Saved..
        //                                clsGetPatientEMRDataBizActionVO BizActionObjPatientData = new clsGetPatientEMRDataBizActionVO();

        //                                BizActionObjPatientData.PatientID = this.SelectedPatient.PatientId;
        //                                BizActionObjPatientData.PatientUnitID = this.SelectedPatient.patientUnitID;//added by pallavi
        //                                BizActionObjPatientData.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                                BizActionObjPatientData.VisitID = VisitId;

        //                                PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                client1.ProcessCompleted += (s3, args3) =>
        //                                {
        //                                    if (args3.Result != null && ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData != null)
        //                                    {
        //                                        // If First Visit PatientEMR Data Is Available

        //                                        Indicatior.Show();
        //                                        IsFirstTime = true;
        //                                        IsSaved = true;
        //                                        this.SelectedHistoryStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.HistoryTemplate.XmlDeserialize<FormDetail>(); ;
        //                                        this.TemplateByNurse = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByNurse;
        //                                        if (((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor == null || ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor == "")
        //                                        {
        //                                            this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
        //                                            IsTemplateByDoctor = false;
        //                                        }
        //                                        else
        //                                        {
        //                                            this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
        //                                            IsTemplateByDoctor = true;
        //                                        }
        //                                        //this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData..Template.XmlDeserialize<FormDetail>();
        //                                        GenratePreview();
        //                                        MapRelations();
        //                                        IsFirstTime = false;
        //                                        Indicatior.Close();
        //                                    }
        //                                };
        //                                client1.ProcessAsync(BizActionObjPatientData, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                            }
        //                        }
        //                        else if (VisitId != 0 && ((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).VisitTypeID == 1)
        //                        {
        //                            IsConsultationVisit = true;
        //                            VisitTypeID = 1;
        //                            // code if Visit Type = First Visit
        //                            tabFUConsultation.Visibility = Visibility.Collapsed;

        //                            clsGetPatientEMRDataBizActionVO BizActionObjPatientData = new clsGetPatientEMRDataBizActionVO();

        //                            BizActionObjPatientData.PatientID = this.SelectedPatient.PatientId;
        //                            BizActionObjPatientData.PatientUnitID = this.SelectedPatient.patientUnitID;
        //                            BizActionObjPatientData.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                            BizActionObjPatientData.VisitID = VisitId;

        //                            PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                            client1.ProcessCompleted += (s3, args3) =>
        //                            {
        //                                if (args3.Result != null && ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData != null)
        //                                {
        //                                    Indicatior.Show();
        //                                    IsFirstTime = true;
        //                                    IsSaved = true;
        //                                    this.SelectedHistoryStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.HistoryTemplate.XmlDeserialize<FormDetail>();
        //                                    this.TemplateByNurse = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByNurse;
        //                                    if (((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor == null || ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor == "")
        //                                    {
        //                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
        //                                        IsTemplateByDoctor = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args3.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
        //                                        IsTemplateByDoctor = true;
        //                                    }
        //                                    //this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData..Template.XmlDeserialize<FormDetail>();
        //                                    GenratePreview();
        //                                    MapRelations();
        //                                    IsFirstTime = false;
        //                                    Indicatior.Close();
        //                                }
        //                                else
        //                                {
        //                                    // if First Visit PatientEMR data is not Available

        //                                    clsGetSecondLastVisitBizActionVO BizActionSecondLastVisit = new clsGetSecondLastVisitBizActionVO();
        //                                    BizActionSecondLastVisit.Details = BizAction.Details;

        //                                    client = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                    client.ProcessCompleted += (s1, arg1) =>
        //                                    {
        //                                        if (arg1.Error == null)
        //                                        {
        //                                            if (arg1.Result != null)
        //                                            {
        //                                                long VisitIDForPreviousPatientEMR = ((clsVisitVO)((clsGetSecondLastVisitBizActionVO)arg1.Result).Details).ID;

        //                                                clsGetPatientEMRDataBizActionVO BizActionObjPatientData1 = new clsGetPatientEMRDataBizActionVO();

        //                                                BizActionObjPatientData1.PatientID = this.SelectedPatient.PatientId;
        //                                                BizActionObjPatientData1.PatientUnitID = this.SelectedPatient.patientUnitID;
        //                                                BizActionObjPatientData1.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                                                BizActionObjPatientData1.VisitID = VisitIDForPreviousPatientEMR;

        //                                                PalashServiceClient client4 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                                client4.ProcessCompleted += (s4, args4) =>
        //                                                {
        //                                                    if (args4.Result != null && ((clsGetPatientEMRDataBizActionVO)args4.Result).objPatientEMRData != null)
        //                                                    {
        //                                                        // If First Visit PatientEMR Data Is Available
        //                                                        Indicatior.Show();
        //                                                        this.SelectedHistoryStructure = ((clsGetPatientEMRDataBizActionVO)args4.Result).objPatientEMRData.HistoryTemplate.XmlDeserialize<FormDetail>();
        //                                                        IsFirstTime = true;
        //                                                        IsSaved = false;
        //                                                        GenratePreview();
        //                                                        MapRelations();
        //                                                        IsFirstTime = false;
        //                                                        //string es = this.SelectedFormStructure.XmlSerilze();
        //                                                        Indicatior.Close();

        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        // Default Blank History
        //                                                        clsGetEMRTemplateBizActionVO BizActionObjEMRTemplate1 = new clsGetEMRTemplateBizActionVO();
        //                                                        BizActionObjEMRTemplate1.objEMRTemplate.TemplateID = 3;

        //                                                        client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                                        client1.ProcessCompleted += (s2, args2) =>
        //                                                        {
        //                                                            Indicatior.Show();
        //                                                            this.SelectedHistoryStructure = ((clsGetEMRTemplateBizActionVO)args2.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
        //                                                            IsFirstTime = true;
        //                                                            IsSaved = false;
        //                                                            GenratePreview();
        //                                                            MapRelations();
        //                                                            IsFirstTime = false;
        //                                                            //string es = this.SelectedFormStructure.XmlSerilze();
        //                                                            Indicatior.Close();

        //                                                        };
        //                                                        client1.ProcessAsync(BizActionObjEMRTemplate1, ((IApplicationConfiguration)App.Current).CurrentUser);                                       
        //                                                    }
        //                                                };
        //                                                client4.ProcessAsync(BizActionObjPatientData1, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                            }
        //                                            else
        //                                            {
        //                                                clsGetEMRTemplateBizActionVO BizActionObjEMRTemplate1 = new clsGetEMRTemplateBizActionVO();
        //                                                BizActionObjEMRTemplate1.objEMRTemplate.TemplateID = 3;

        //                                                client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                                client1.ProcessCompleted += (s2, args2) =>
        //                                                {
        //                                                    Indicatior.Show();
        //                                                    this.SelectedHistoryStructure = ((clsGetEMRTemplateBizActionVO)args2.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();                                                            
        //                                                    IsFirstTime = true;
        //                                                    IsSaved = false;
        //                                                    GenratePreview();
        //                                                    MapRelations();
        //                                                    IsFirstTime = false;
        //                                                    //string es = this.SelectedFormStructure.XmlSerilze();
        //                                                    Indicatior.Close();

        //                                                };
        //                                                client1.ProcessAsync(BizActionObjEMRTemplate1, ((IApplicationConfiguration)App.Current).CurrentUser);                                       
        //                                            }
        //                                        }
        //                                    };

        //                                    client.ProcessAsync(BizActionSecondLastVisit, ((IApplicationConfiguration)App.Current).CurrentUser);

        //                                    clsGetEMRTemplateBizActionVO BizActionObjEMRTemplate = new clsGetEMRTemplateBizActionVO();
        //                                    BizActionObjEMRTemplate.objEMRTemplate.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;

        //                                    client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                    client1.ProcessCompleted += (s6, args6) =>
        //                                    {
        //                                        Indicatior.Show();
        //                                        this.SelectedFormStructure = ((clsGetEMRTemplateBizActionVO)args6.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
        //                                        IsFirstTime = true;
        //                                        IsSaved = false;
        //                                        GenratePreview();
        //                                        MapRelations();
        //                                        IsFirstTime = false;
        //                                        //string es = this.SelectedFormStructure.XmlSerilze();
        //                                        Indicatior.Close();
        //                                    };
        //                                    client1.ProcessAsync(BizActionObjEMRTemplate, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                }
        //                            };
        //                            client1.ProcessAsync(BizActionObjPatientData, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                        }
        //                    }
        //                    }
        //                    else
        //                    {
        //                        MessageBoxControl.MessageBoxChildWindow msg = new MessageBoxChildWindow("Palash", "No Active Visit is Available. Plz start a Visit.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
        //                        msg.Show();
        //                    }
        //                }
        //            };

        //            client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);

        //        }
        //        catch (Exception ex)
        //        {
        //            Indicatior.Close();
        //            HtmlPage.Window.Alert("Error Occured. \rComplaint List is not Populated.");
        //        }
        //    }
        //    else
        //    {
        //        GenratePreview();
        //        MapRelations();
        //    }            
        //}


        // To be work

        private void cmbComplaint_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            this.SelectedHistoryStructure = null;
            this.SelectedFormStructure = null;
            ComplaintSelection();
        }
        
        public void ComplaintSelection()
        {
            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy 

            if (cmbComplaint.SelectedItem != null)
            {
                IsConsultationVisit = false;
                VisitTypeID = 0;
                Indicatior = new WaitIndicator();
                try
                {
                    if (CurrentVisit != null && CurrentVisit.ID > 0 && CurrentVisit.VisitStatus == true)
                    {
                        // ============================== Code for get Patient History ============================
                        #region History
                        clsGetPatientEMRDataBizActionVO BizActionObjPatientHistoryData = new clsGetPatientEMRDataBizActionVO();
                        BizActionObjPatientHistoryData.PatientID = this.SelectedPatient.PatientId;
                        BizActionObjPatientHistoryData.PatientUnitID = this.SelectedPatient.patientUnitID;//added by pallavi                        
                        BizActionObjPatientHistoryData.IsPrevious = false;
                        BizActionObjPatientHistoryData.IsHistory = true;
                        Indicatior.Show();
                        PalashServiceClient clientBizActionObjPatientHistoryData = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                        clientBizActionObjPatientHistoryData.ProcessCompleted += (sBizActionObjPatientHistoryData, argsBizActionObjPatientHistoryData) =>
                        {
                            if (argsBizActionObjPatientHistoryData.Result != null && ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientHistoryData.Result).objPatientEMRData != null)
                            {
                                Indicatior.Show();
                                this.SelectedHistoryStructure = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientHistoryData.Result).objPatientEMRData.HistoryTemplate.XmlDeserialize<FormDetail>();
                                IsFirstTime = true;
                                GenratePreview();
                                MapRelations();
                                IsFirstTime = false;
                                //string es = this.SelectedFormStructure.XmlSerilze();
                                Indicatior.Close();
                            }
                            else
                            {
                                // New Blank template for History
                                clsGetEMRTemplateBizActionVO BizActionObjHistoryEMRTemplate = new clsGetEMRTemplateBizActionVO();
                                BizActionObjHistoryEMRTemplate.objEMRTemplate.TemplateID = 3;

                                PalashServiceClient clientObjHistoryEMRTemplate = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                clientObjHistoryEMRTemplate.ProcessCompleted += (sObjHistoryEMRTemplate, argsObjHistoryEMRTemplate) =>
                                {
                                    if (argsObjHistoryEMRTemplate.Result != null && ((clsGetEMRTemplateBizActionVO)argsObjHistoryEMRTemplate.Result).objEMRTemplate != null)
                                    {
                                        Indicatior.Show();
                                        this.SelectedHistoryStructure = ((clsGetEMRTemplateBizActionVO)argsObjHistoryEMRTemplate.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
                                        IsFirstTime = true;
                                        GenratePreview();
                                        MapRelations();
                                        IsFirstTime = false;
                                        //string es = this.SelectedFormStructure.XmlSerilze();
                                        Indicatior.Close();
                                    }
                                    else
                                    {
                                        // Not Found
                                        MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "History Template Not Found.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                        msgbx.Show();
                                    }
                                };
                                clientObjHistoryEMRTemplate.ProcessAsync(BizActionObjHistoryEMRTemplate, ((IApplicationConfiguration)App.Current).CurrentUser);
                                clientObjHistoryEMRTemplate.CloseAsync();

                            }
                        };
                        clientBizActionObjPatientHistoryData.ProcessAsync(BizActionObjPatientHistoryData, ((IApplicationConfiguration)App.Current).CurrentUser);
                        clientBizActionObjPatientHistoryData.CloseAsync();

                        #endregion
                        // ========================================= END History =========================================================

                        if (CurrentVisit.VisitTypeID != 1)
                        {
                            // ============================================ Followup Visit ===============================================
                            #region Followup
                            IsConsultationVisit = false;
                            if (CurrentVisit.VisitTypeID == 2)
                                VisitTypeID = 2;
                            else if (CurrentVisit.VisitTypeID == 3)
                                VisitTypeID = 3;
                            // Code For -- If Visit Type = Follow up
                            tabFUConsultation.Visibility = Visibility.Visible;

                            // Get Patient EMR data for seleted Template for current active visit                                                       
                            clsGetPatientEMRDataBizActionVO BizActionObjPatientData = new clsGetPatientEMRDataBizActionVO();
                            BizActionObjPatientData.PatientID = this.SelectedPatient.PatientId;
                            BizActionObjPatientData.PatientUnitID = this.SelectedPatient.patientUnitID;//added by pallavi
                            BizActionObjPatientData.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                            BizActionObjPatientData.VisitID = CurrentVisit.ID;
                            BizActionObjPatientData.UnitID = CurrentVisit.UnitId;

                            //if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                            //{
                            //    BizActionObjPatientData.UnitID = 0;
                            //}
                            Indicatior.Show();
                            PalashServiceClient clientBizActionObjPatientData = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                            clientBizActionObjPatientData.ProcessCompleted += (sBizActionObjPatientData, argsBizActionObjPatientData) =>
                            {
                                if (argsBizActionObjPatientData.Result != null && ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientData.Result).objPatientEMRData != null)
                                {
                                    // If First Visit PatientEMR Data Is Available
                                    //===================== Assign current visit Data ========================

                                    Indicatior.Show();
                                    IsFirstTime = true;
                                    IsSaved = true;
                                    this.TemplateByNurse = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientData.Result).objPatientEMRData.TemplateByNurse;
                                    if (((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientData.Result).objPatientEMRData.TemplateByDoctor == null || ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientData.Result).objPatientEMRData.TemplateByDoctor == "")
                                    {
                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientData.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
                                        IsTemplateByDoctor = false;
                                    }
                                    else
                                    {
                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientData.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
                                        IsTemplateByDoctor = true;
                                    }

                                    GenratePreview();
                                    MapRelations();
                                    IsFirstTime = false;
                                    Indicatior.Close();
                                }
                                else
                                {
                                    //====================== Get Previously saved EMR data ===========================
                                    clsGetPatientEMRDataBizActionVO BizActionObjPatientDataOld = new clsGetPatientEMRDataBizActionVO();
                                    BizActionObjPatientDataOld.PatientID = this.SelectedPatient.PatientId;
                                    BizActionObjPatientDataOld.PatientUnitID = this.SelectedPatient.patientUnitID;//added by pallavi
                                    BizActionObjPatientDataOld.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                    BizActionObjPatientDataOld.VisitID = CurrentVisit.ID;
                                    BizActionObjPatientDataOld.UnitID = CurrentVisit.UnitId;
                                    BizActionObjPatientDataOld.IsPrevious = true;

                                    //if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                                    //{
                                    //    BizActionObjPatientDataOld.UnitID = 0;
                                    //}
                                    Indicatior.Show();
                                    PalashServiceClient clientBizActionObjPatientDataOld = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientBizActionObjPatientDataOld.ProcessCompleted += (sBizActionObjPatientDataOld, argsBizActionObjPatientDataOld) =>
                                    {
                                        if (argsBizActionObjPatientDataOld.Result != null && ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).objPatientEMRData != null && ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).SuccessStatus == 0)
                                        {
                                            // Assign Old visit Data
                                            Indicatior.Show();
                                            IsFirstTime = true;
                                            //IsSaved = true;                                            
                                            this.TemplateByNurse = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).objPatientEMRData.TemplateByNurse;
                                            if (((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).objPatientEMRData.TemplateByDoctor == null || ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).objPatientEMRData.TemplateByDoctor == "")
                                            {
                                                this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
                                                IsTemplateByDoctor = false;
                                            }
                                            else
                                            {
                                                this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)argsBizActionObjPatientDataOld.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
                                                IsTemplateByDoctor = true;
                                            }
                                            //this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData..Template.XmlDeserialize<FormDetail>();
                                            GenratePreview();
                                            MapRelations();
                                            IsFirstTime = false;
                                            Indicatior.Close();
                                        }
                                        else
                                        {
                                            // Previous Visit Data is unavailable
                                            // load New Blank Template
                                            clsGetEMRTemplateBizActionVO BizActionObjEMRTemplate = new clsGetEMRTemplateBizActionVO();
                                            BizActionObjEMRTemplate.objEMRTemplate.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                            Indicatior.Show();
                                            // Commented By Harish ON 14 April 2011 12:45 PM
                                            //BizActionObjEMRTemplate.objEMRTemplate.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;
                                            PalashServiceClient clientObjEMRTemplate = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                            clientObjEMRTemplate.ProcessCompleted += (sObjEMRTemplate, argsObjEMRTemplate) =>
                                            {
                                                if ((clsGetEMRTemplateBizActionVO)argsObjEMRTemplate.Result != null)
                                                {
                                                    Indicatior.Show();
                                                    this.SelectedFormStructure = ((clsGetEMRTemplateBizActionVO)argsObjEMRTemplate.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
                                                    IsFirstTime = true;
                                                    IsSaved = false;
                                                    GenratePreview();
                                                    MapRelations();
                                                    IsFirstTime = false;
                                                    //string es = this.SelectedFormStructure.XmlSerilze();
                                                    Indicatior.Close();
                                                }
                                                else
                                                {
                                                    // Not Found
                                                    Indicatior.Close();
                                                    MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Template Not Found.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                                    msgbx.Show();
                                                }
                                            };
                                            clientObjEMRTemplate.ProcessAsync(BizActionObjEMRTemplate, ((IApplicationConfiguration)App.Current).CurrentUser);
                                            clientObjEMRTemplate.CloseAsync();
                                        }
                                    };
                                    clientBizActionObjPatientDataOld.ProcessAsync(BizActionObjPatientDataOld, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientBizActionObjPatientDataOld.CloseAsync();
                                }
                            };
                            clientBizActionObjPatientData.ProcessAsync(BizActionObjPatientData, ((IApplicationConfiguration)App.Current).CurrentUser);
                            clientBizActionObjPatientData.CloseAsync();
                            #endregion
                            // ======================================== END Followup ==================================================
                        }
                        else if (CurrentVisit.VisitTypeID == 1)
                        {
                            // ========================================= Consultation Visit ============================================
                            #region Consultation
                            IsConsultationVisit = true;
                            VisitTypeID = 1;
                            // code if Visit Type = First Visit
                            tabFUConsultation.Visibility = Visibility.Collapsed;
                            Indicatior.Show();
                            clsGetPatientEMRDataBizActionVO BizActionObjPatientDataConsultation = new clsGetPatientEMRDataBizActionVO();
                            BizActionObjPatientDataConsultation.PatientID = this.SelectedPatient.PatientId;
                            BizActionObjPatientDataConsultation.PatientUnitID = this.SelectedPatient.patientUnitID;
                            BizActionObjPatientDataConsultation.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                            BizActionObjPatientDataConsultation.VisitID = CurrentVisit.ID;
                            BizActionObjPatientDataConsultation.UnitID = CurrentVisit.UnitId;
                            BizActionObjPatientDataConsultation.IsPrevious = false;

                            //if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                            //{
                            //    BizActionObjPatientDataConsultation.UnitID = 0;
                            //}

                            PalashServiceClient clientObjPatientDataConsultation = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                            clientObjPatientDataConsultation.ProcessCompleted += (sObjPatientDataConsultation, argsObjPatientDataConsultation) =>
                            {
                                if (argsObjPatientDataConsultation.Result != null && ((clsGetPatientEMRDataBizActionVO)argsObjPatientDataConsultation.Result).objPatientEMRData != null)
                                {
                                    Indicatior.Show();
                                    IsFirstTime = true;
                                    IsSaved = true;
                                    this.TemplateByNurse = ((clsGetPatientEMRDataBizActionVO)argsObjPatientDataConsultation.Result).objPatientEMRData.TemplateByNurse;
                                    if (((clsGetPatientEMRDataBizActionVO)argsObjPatientDataConsultation.Result).objPatientEMRData.TemplateByDoctor == null || ((clsGetPatientEMRDataBizActionVO)argsObjPatientDataConsultation.Result).objPatientEMRData.TemplateByDoctor == "")
                                    {
                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)argsObjPatientDataConsultation.Result).objPatientEMRData.TemplateByNurse.XmlDeserialize<FormDetail>();
                                        IsTemplateByDoctor = false;
                                    }
                                    else
                                    {
                                        this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)argsObjPatientDataConsultation.Result).objPatientEMRData.TemplateByDoctor.XmlDeserialize<FormDetail>();
                                        IsTemplateByDoctor = true;
                                    }
                                    //this.SelectedFormStructure = ((clsGetPatientEMRDataBizActionVO)args1.Result).objPatientEMRData..Template.XmlDeserialize<FormDetail>();
                                    GenratePreview();
                                    MapRelations();
                                    IsFirstTime = false;
                                    Indicatior.Close();
                                }
                                else
                                {
                                    clsGetEMRTemplateBizActionVO BizActionObjEMRTemplateNewConsultation = new clsGetEMRTemplateBizActionVO();
                                    BizActionObjEMRTemplateNewConsultation.objEMRTemplate.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                    Indicatior.Show();
                                    PalashServiceClient clientObjEMRTemplateNewConsultation = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientObjEMRTemplateNewConsultation.ProcessCompleted += (sObjEMRTemplateNewConsultation, argsObjEMRTemplateNewConsultation) =>
                                    {
                                        if ((clsGetEMRTemplateBizActionVO)argsObjEMRTemplateNewConsultation.Result != null)
                                        {
                                            Indicatior.Show();
                                            this.SelectedFormStructure = ((clsGetEMRTemplateBizActionVO)argsObjEMRTemplateNewConsultation.Result).objEMRTemplate.Template.XmlDeserialize<FormDetail>();
                                            IsFirstTime = true;
                                            IsSaved = false;
                                            GenratePreview();
                                            MapRelations();
                                            IsFirstTime = false;
                                            //string es = this.SelectedFormStructure.XmlSerilze();
                                            Indicatior.Close();
                                        }
                                        else
                                        {
                                            // Not Found
                                            Indicatior.Close();
                                            MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Template Not Found.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                            msgbx.Show();
                                        }
                                    };
                                    clientObjEMRTemplateNewConsultation.ProcessAsync(BizActionObjEMRTemplateNewConsultation, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientObjEMRTemplateNewConsultation.CloseAsync();
                                }
                            };
                            clientObjPatientDataConsultation.ProcessAsync(BizActionObjPatientDataConsultation, ((IApplicationConfiguration)App.Current).CurrentUser);
                            clientObjPatientDataConsultation.CloseAsync();
                            #endregion
                            // ====================================== END Consultation =====================================================================
                        }
                    }
                    else
                    {
                        Indicatior.Close();
                        MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Active Visit is not found. \n Please create a visit first.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                        msgbx.Show();
                    }
                }
                catch (Exception ex)
                {
                    Indicatior.Close();
                    MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error Occured. \nComplaint List is not Populated", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                    msgbx.Show();
                    //HtmlPage.Window.Alert("Error Occured. \rComplaint List is not Populated.");
                }
            }
            else
            {
                Indicatior.Close();
                GenratePreview();
                MapRelations();
            }
        }

        private void DeleteItemButton_Click(object sender, RoutedEventArgs e)
        {
            //App.MainWindow.MainRegion.Content = new TemplateList();
            ((IApplicationConfiguration)App.Current).SelectedPatient = new clsPatientGeneralVO();
            ((IApplicationConfiguration)App.Current).OpenMainContent("CIMS.Forms.PatientList");
            //((IApplicationConfiguration)App.Current).FillMenu("Find Patient");
            //((IApplicationConfiguration)App.Current).SelectedPatient = new clsPatientGeneralVO();
            //((IApplicationConfiguration)App.Current).OpenMainContent("CIMS.Forms.QueueManagement");
            //((IApplicationConfiguration)App.Current).FillMenu("Queue Management");
        }

        bool SaveClicked = false;

        private void SaveTemplateItemButton_Click(object sender, RoutedEventArgs e)
        {
            // To save Template Data FieldWise in Table-T_PatientEMRDetails
            // Author- Harish Kirnani , Date:13July2011
            listPatientEMRDetails = new List<clsPatientEMRDetailsVO>();
            listPatientEMRUploadedFiles = new List<clsPatientEMRUploadedFilesVO>();
            SaveFieldwiseData();
            if (Context == "FEEDBACK")
            {
                SaveFeedback();
            }
            else if (Context == "TEMPLATE")
            {
                SaveTemplate();
                //SaveFeedback();
            }
            else
            {
                if (SaveClicked == false)
                {
                    SaveClicked = true;
                    SavePatientEMR();
                    SaveClicked = false;
                }
            }
        }

        public void SaveTemplate()
        {
            //for saving patient template details
            try
            {
                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy 

                bool flag = true;
                string list = IsMandatorySet();
                if (list != null && list != "")
                {
                    variance.Variance7 = "Mandatory prompt ignored";
                    variance.ListVariance7 = list;
                    if (MessageBox.Show("Some Mandatory Fiels are not filled. \r Mandotory Fields List:\r" + list + "\rDo you want to Continue to Save without filling Mandatory Fields?", "Mandatory fields are not Filled", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
                        flag = true;
                    else
                        flag = false;
                }
                else
                {
                    variance.Variance7 = null;
                    variance.ListVariance7 = "";
                }
                if (flag)
                {
                    Indicatior.Show();
                    //   GetVariance();
                    clsAddVarianceBizActionVO BizActionObjVariance = new clsAddVarianceBizActionVO();
                    variance.PatientID = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                    if (Context != "TEMPLATE")
                        variance.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                    else
                        variance.TemplateID = GlobalTemplateID;
                    variance.DoctorID = CurrentVisit.DoctorID;
                    variance.Date = DateTime.Now;
                    variance.UnitId = CurrentVisit.UnitId;
                    variance.VisitID = CurrentVisit.ID;
                    variance.PatientUnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                    variance.Status = true;
                    BizActionObjVariance.VarianceDetails = variance;
                    PalashServiceClient clientObjVariance = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                    clientObjVariance.ProcessCompleted += (sObjVariance, argsObjVariance) =>
                    {
                        MapPCR();
                        MapCaseReferral();

                        string test = this.SelectedFormStructure.XmlSerilze();
                        string testHistory = "";

                        clsAddPatientEMRDataBizActionVO BizActionObjPatientEMRData = new clsAddPatientEMRDataBizActionVO();
                                clsPatientEMRDataVO data = new clsPatientEMRDataVO();

                                data.TemplateID = GlobalTemplateID;// ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                        
                                data.PatientID = SelectedPatient.PatientId;
                                data.PatientUnitID = SelectedPatient.patientUnitID;
                                data.HistoryTemplate = testHistory;
                                if (SelectedUser == "Doctor")
                                    data.TemplateByDoctor = test;
                                else
                                {
                                    this.TemplateByNurse = test;
                                    data.TemplateByNurse = test;
                                }
                                data.SavedBy = SelectedUser;
                                data.VisitID = CurrentVisit.ID;
                                data.UnitId = CurrentVisit.UnitId;
                                data.Status = true;
                                BizActionObjPatientEMRData.PatientEMRDataDetails = data;

                                PalashServiceClient clientObjPatientEMRData = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                clientObjPatientEMRData.ProcessCompleted += (sObjPatientEMRData, argsObjPatientEMRData) =>
                                {

                                    clsAddPatientEMRDataBizActionVO BizEMRData = new clsAddPatientEMRDataBizActionVO();
                                    BizEMRData.PatientEMRDataDetails = new clsPatientEMRDataVO();
                                    BizEMRData = ((clsAddPatientEMRDataBizActionVO)argsObjPatientEMRData.Result);
                                    PatientEMRDataId = BizEMRData.PatientEMRDataDetails.ID;
                                    //

                                    //GetPrescription();
                                    GetHistoryMedication();
                                    clsAddPatientPrescriptionBizActionVO BizActionPatPres = new clsAddPatientPrescriptionBizActionVO();
                                    BizActionPatPres.PatientPrescriptionSummary = new clsPatientPrescriptionVO();
                                    BizActionPatPres.PatientPrescriptionSummary.PatientID = this.SelectedPatient.PatientId;
                                    BizActionPatPres.PatientPrescriptionSummary.VisitID = CurrentVisit.ID;
                                    BizActionPatPres.PatientPrescriptionSummary.TemplateID = GlobalTemplateID;// ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                    BizActionPatPres.PatientPrescriptionSummary.DoctorID = CurrentVisit.DoctorID;
                                    BizActionPatPres.PatientPrescriptionSummary.UnitID = CurrentVisit.UnitId;
                                    BizActionPatPres.PatientPrescriptionSummary.PatientUnitID = this.SelectedPatient.patientUnitID;
                                    BizActionPatPres.PatientPrescriptionSummary.Status = true;
                                    if (GlobalTemplateID == 60)
                                        BizActionPatPres.PatientPrescriptionSummary.IsFrom = (int)PrescriptionFrom.Consultation;
                                    else
                                        BizActionPatPres.PatientPrescriptionSummary.IsFrom = (int)PrescriptionFrom.Unknown;

                                    BizActionPatPres.PatientPrescriptionDetail = PrescriptionList;

                                    PalashServiceClient clientPatPres = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientPatPres.ProcessCompleted += (sPatPres, argPatPres) =>
                                    {
                                        if (argPatPres.Result != null && ((clsAddPatientPrescriptionBizActionVO)argPatPres.Result).PatientPrescriptionSummary.ID != null && ((clsAddPatientPrescriptionBizActionVO)argPatPres.Result).PatientPrescriptionSummary.ID != 0)
                                        {
                                            clsAddDoctorSuggestedServiceDetailBizActionVO BizActionServ = new clsAddDoctorSuggestedServiceDetailBizActionVO();
                                            BizActionServ.PatientPrescriptionID = ((clsAddPatientPrescriptionBizActionVO)argPatPres.Result).PatientPrescriptionSummary.ID;
                                            BizActionServ.UnitID = CurrentVisit.UnitId;
                                            BizActionServ.DoctorSuggestedServiceDetail = ServiceList;
                                            PalashServiceClient client7 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                            client7.ProcessCompleted += (s7, arg7) =>
                                            {

                                            };
                                            client7.ProcessAsync(BizActionServ, ((IApplicationConfiguration)App.Current).CurrentUser);
                                            client7.CloseAsync();
                                        }
                                        //
                                        clsAddPCRBizActionVO BizActionPCR = new clsAddPCRBizActionVO();
                                        if (objPCR == null)
                                            BizActionPCR.PCRDetails = new clsPCRVO();
                                        else
                                            BizActionPCR.PCRDetails = objPCR;
                                        BizActionPCR.PCRDetails.TemplateID = GlobalTemplateID; //((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                        BizActionPCR.PCRDetails.PatientID = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;// this.SelectedPatient.PatientId;
                                        BizActionPCR.PCRDetails.PatientUnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId; //this.SelectedPatient.patientUnitID;
                                        BizActionPCR.PCRDetails.UnitID = CurrentVisit.UnitId;
                                        BizActionPCR.PCRDetails.VisitID = CurrentVisit.ID;

                                        BizActionPCR.PCRDetails.Status = true;
                                        PalashServiceClient client5 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client5.ProcessCompleted += (s5, arg5) =>
                                        {
                                            Indicatior.Close();
                                            MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Record Saved Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                            msgForTemplateSave.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);
                                            msgForTemplateSave.Show();
                                            if (IsSavedBeforePrint == true)
                                                PrintPCR();

                                        };
                                        client5.ProcessAsync(BizActionPCR, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client5.CloseAsync();
                                        clsAddCaseReferralBizActionVO BizActionReferral = new clsAddCaseReferralBizActionVO();
                                        if (objCaseReferral == null)
                                            BizActionReferral.CaseReferralDetails = new clsCaseReferralVO();
                                        else
                                            BizActionReferral.CaseReferralDetails = objCaseReferral;

                                        BizActionReferral.CaseReferralDetails.TemplateID = GlobalTemplateID; //((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                        BizActionReferral.CaseReferralDetails.PatientID = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;//this.SelectedPatient.PatientId;
                                        BizActionReferral.CaseReferralDetails.PatientUnitID = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;// this.SelectedPatient.patientUnitID;
                                        BizActionReferral.CaseReferralDetails.UnitID = CurrentVisit.UnitId;
                                        BizActionReferral.CaseReferralDetails.VisitID = CurrentVisit.ID;

                                        BizActionReferral.CaseReferralDetails.Status = true;
                                        PalashServiceClient client6 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client6.ProcessCompleted += (s6, arg6) =>
                                        {
                                        };
                                        client6.ProcessAsync(BizActionReferral, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client6.CloseAsync();
                                    };
                                    clientPatPres.ProcessAsync(BizActionPatPres, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientPatPres.CloseAsync();

                        //
                                    clsAddUpdatePatientEMRDetailBizActionVO BizActionEMRDetail = new clsAddUpdatePatientEMRDetailBizActionVO();
                                    BizActionEMRDetail.TempVariance = variance;
                                    BizActionEMRDetail.TemplateDataId = PatientEMRDataId;
                                    BizActionEMRDetail.PatientEMRDataDetails = listPatientEMRDetails;
                                    BizActionEMRDetail.FalgForAddUpdate = 0;
                                    if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails != null)
                                    {
                                        if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails.CoupleId != 0)
                                        {
                                            BizActionEMRDetail.IsDonor = false;
                                           
                                        }
                                        else if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails.CoupleId == 0)
                                        {
                                            BizActionEMRDetail.IsDonor = true;
                                        }
                                    }
                                    PalashServiceClient clientBizActionEMRDetail = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientBizActionEMRDetail.ProcessCompleted += (sBizActionEMRDetail, argsBizActionEMRDetail) =>
                                    {
                                        SaveItemButton.IsEnabled = false;
                                        //if(IsIVFTemp==false)
                                        //    this.Unloaded += new RoutedEventHandler(TemplateAssignment_Unloaded);
                                    };
                                    clientBizActionEMRDetail.ProcessAsync(BizActionEMRDetail, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientBizActionEMRDetail.CloseAsync();

                                    //By Anjali.................
                                    clsAddUpdatePatientEMRUploadedFilesBizActionVO BizActionEMRFU = new clsAddUpdatePatientEMRUploadedFilesBizActionVO();
                                    BizActionEMRFU.TempVariance = variance;
                                    BizActionEMRFU.PatientEMRUploadedFiles = listPatientEMRUploadedFiles;
                                    BizActionEMRFU.FalgForAddUpdate = 0;
                                    PalashServiceClient clientBizActionEMRFU = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientBizActionEMRFU.ProcessCompleted += (sBizActionEMRFU, argsBizActionEMRFU) =>
                                    {
                                    };
                                    clientBizActionEMRFU.ProcessAsync(BizActionEMRFU, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientBizActionEMRFU.CloseAsync();
                                    //.........................
                                };
                                clientObjPatientEMRData.ProcessAsync(BizActionObjPatientEMRData, ((IApplicationConfiguration)App.Current).CurrentUser);
                                clientObjPatientEMRData.CloseAsync();
                                IsSaved = true;
                    };
                    clientObjVariance.ProcessAsync(BizActionObjVariance, ((IApplicationConfiguration)App.Current).CurrentUser);
                    clientObjVariance.CloseAsync();
                    

                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void SavePatientEMR()
        {
            Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy 
            try
            {
                Indicatior = new WaitIndicator();

                bool flag = true;
                string list = IsMandatorySet();
                if (list != null && list != "")
                {
                    variance.Variance7 = "Mandatory prompt ignored";
                    variance.ListVariance7 = list;
                    if (MessageBox.Show("Some Mandatory Fiels are not filled. \r Mandotory Fields List:\r" + list + "\rDo you want to Continue to Save without filling Mandatory Fields?", "Mandatory fields are not Filled", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
                        flag = true;
                    else
                        flag = false;
                }
                else
                {
                    variance.Variance7 = null;
                    variance.ListVariance7 = "";
                }
                if (flag)
                {
                    Indicatior.Show();
                    GetVariance();
                    //SaveVariance();

                    //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
                    //DataTemplateServiceClient client1 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
                    clsAddVarianceBizActionVO BizActionObjVariance = new clsAddVarianceBizActionVO();
                    variance.PatientID = this.SelectedPatient.PatientId;
                    if (Context != "TEMPLATE")
                        variance.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                    else
                        variance.TemplateID = GlobalTemplateID;

                    variance.DoctorID = CurrentVisit.DoctorID;
                    variance.Date = DateTime.Now;
                    variance.UnitId = CurrentVisit.UnitId;
                    variance.VisitID = CurrentVisit.ID;
                    variance.PatientUnitID = this.SelectedPatient.patientUnitID;
                    variance.Status = true;
                    BizActionObjVariance.VarianceDetails = variance;

                    PalashServiceClient clientObjVariance = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                    clientObjVariance.ProcessCompleted += (sObjVariance, argsObjVariance) =>
                    {
                        //GetPCR("SavePCR");
                        // Map PCR values from Template Fields
                        MapPCR();
                        MapCaseReferral();

                        string test = this.SelectedFormStructure.XmlSerilze();
                        string testHistory = "";
                        if (Context != "TEMPLATE")
                        {
                            testHistory = this.SelectedHistoryStructure.XmlSerilze();

                        }

                        if (!IsSaved)
                        {
                            if (Context != "TEMPLATE")
                            {
                                #region Add Patient EMR Template
                                //Uri address1 = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
                                //DataTemplateServiceClient client2 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
                                clsAddPatientEMRDataBizActionVO BizActionObjPatientEMRData = new clsAddPatientEMRDataBizActionVO();
                                clsPatientEMRDataVO data = new clsPatientEMRDataVO();

                                data.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                     
                                data.PatientID = SelectedPatient.PatientId;
                                data.PatientUnitID = SelectedPatient.patientUnitID;
                                data.HistoryTemplate = testHistory;
                                if (SelectedUser == "Doctor")
                                    data.TemplateByDoctor = test;
                                else
                                {
                                    this.TemplateByNurse = test;
                                    data.TemplateByNurse = test;
                                }
                                data.SavedBy = SelectedUser;
                                data.VisitID = CurrentVisit.ID;
                                data.UnitId = CurrentVisit.UnitId;
                                data.Status = true;
                                BizActionObjPatientEMRData.PatientEMRDataDetails = data;

                                PalashServiceClient clientObjPatientEMRData = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                clientObjPatientEMRData.ProcessCompleted += (sObjPatientEMRData, argsObjPatientEMRData) =>
                                {
                                    

                                    clsAddPatientPrescriptionBizActionVO BizActionPatPres = new clsAddPatientPrescriptionBizActionVO();
                                    BizActionPatPres.PatientPrescriptionSummary = new clsPatientPrescriptionVO();
                                    BizActionPatPres.PatientPrescriptionSummary.PatientID = this.SelectedPatient.PatientId;
                                    BizActionPatPres.PatientPrescriptionSummary.VisitID = CurrentVisit.ID;
                                    BizActionPatPres.PatientPrescriptionSummary.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                    BizActionPatPres.PatientPrescriptionSummary.DoctorID = CurrentVisit.DoctorID;
                                    BizActionPatPres.PatientPrescriptionSummary.UnitID = CurrentVisit.UnitId;
                                    BizActionPatPres.PatientPrescriptionSummary.PatientUnitID = this.SelectedPatient.patientUnitID;
                                    BizActionPatPres.PatientPrescriptionSummary.Status = true;


                                    BizActionPatPres.PatientPrescriptionDetail = PrescriptionList;

                                    PalashServiceClient clientPatPres = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientPatPres.ProcessCompleted += (sPatPres, argPatPres) =>
                                    {
                                        if (argPatPres.Result != null && ((clsAddPatientPrescriptionBizActionVO)argPatPres.Result).PatientPrescriptionSummary.ID != null && ((clsAddPatientPrescriptionBizActionVO)argPatPres.Result).PatientPrescriptionSummary.ID != 0)
                                        {
                                            clsAddDoctorSuggestedServiceDetailBizActionVO BizActionServ = new clsAddDoctorSuggestedServiceDetailBizActionVO();
                                            BizActionServ.PatientPrescriptionID = ((clsAddPatientPrescriptionBizActionVO)argPatPres.Result).PatientPrescriptionSummary.ID;
                                            BizActionServ.UnitID = CurrentVisit.UnitId;
                                            BizActionServ.DoctorSuggestedServiceDetail = ServiceList;
                                            PalashServiceClient client7 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                            client7.ProcessCompleted += (s7, arg7) =>
                                            {

                                            };
                                            client7.ProcessAsync(BizActionServ, ((IApplicationConfiguration)App.Current).CurrentUser);
                                            client7.CloseAsync();
                                        }

                                        // ==================== Save Patient Case Record ==================

                                        clsAddPCRBizActionVO BizActionPCR = new clsAddPCRBizActionVO();
                                        BizActionPCR.PCRDetails = objPCR;
                                        BizActionPCR.PCRDetails.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                        BizActionPCR.PCRDetails.PatientID = this.SelectedPatient.PatientId;
                                        BizActionPCR.PCRDetails.PatientUnitID = this.SelectedPatient.patientUnitID;
                                        BizActionPCR.PCRDetails.UnitID = CurrentVisit.UnitId;
                                        BizActionPCR.PCRDetails.VisitID = CurrentVisit.ID;

                                        BizActionPCR.PCRDetails.Status = true;
                                        PalashServiceClient client5 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client5.ProcessCompleted += (s5, arg5) =>
                                        {
                                            Indicatior.Close();

                                            MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Patient EMR Saved Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);

                                            msgForTemplateSave.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

                                            msgForTemplateSave.Show();
                                            if (IsSavedBeforePrint == true)
                                                PrintPCR();
                                        };
                                        client5.ProcessAsync(BizActionPCR, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client5.CloseAsync();

                                        //MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Patient EMR Saved Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);

                                        //msgForTemplateSave.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

                                        //msgForTemplateSave.Show();
                                        clsAddCaseReferralBizActionVO BizActionReferral = new clsAddCaseReferralBizActionVO();
                                        BizActionReferral.CaseReferralDetails = objCaseReferral;
                                        BizActionReferral.CaseReferralDetails.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                        BizActionReferral.CaseReferralDetails.PatientID = this.SelectedPatient.PatientId;
                                        BizActionReferral.CaseReferralDetails.PatientUnitID = this.SelectedPatient.patientUnitID;
                                        BizActionReferral.CaseReferralDetails.UnitID = CurrentVisit.UnitId;
                                        BizActionReferral.CaseReferralDetails.VisitID = CurrentVisit.ID;

                                        BizActionReferral.CaseReferralDetails.Status = true;
                                        PalashServiceClient client6 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client6.ProcessCompleted += (s6, arg6) =>
                                        {

                                        };
                                        client6.ProcessAsync(BizActionReferral, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client6.CloseAsync();
                                    };
                                    clientPatPres.ProcessAsync(BizActionPatPres, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientPatPres.CloseAsync();

                                    clsAddUpdatePatientEMRDetailBizActionVO BizActionEMRDetail = new clsAddUpdatePatientEMRDetailBizActionVO();
                                    BizActionEMRDetail.TempVariance = variance;
                                    BizActionEMRDetail.PatientEMRDataDetails = listPatientEMRDetails;
                                    BizActionEMRDetail.FalgForAddUpdate = 0;
                                    if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails != null)
                                    {
                                        if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails.CoupleId != 0)
                                        {
                                            BizActionEMRDetail.IsDonor = false;

                                        }
                                        else if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails.CoupleId == 0)
                                        {
                                            BizActionEMRDetail.IsDonor = true;
                                        }
                                    }
                                    PalashServiceClient clientBizActionEMRDetail = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientBizActionEMRDetail.ProcessCompleted += (sBizActionEMRDetail, argsBizActionEMRDetail) =>
                                    {
                                    };
                                    clientBizActionEMRDetail.ProcessAsync(BizActionEMRDetail, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientBizActionEMRDetail.CloseAsync();

                                    clsAddUpdatePatientEMRUploadedFilesBizActionVO BizActionEMRFU = new clsAddUpdatePatientEMRUploadedFilesBizActionVO();
                                    BizActionEMRFU.TempVariance = variance;
                                    BizActionEMRFU.PatientEMRUploadedFiles = listPatientEMRUploadedFiles;
                                    BizActionEMRFU.FalgForAddUpdate = 0;
                                    PalashServiceClient clientBizActionEMRFU = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientBizActionEMRFU.ProcessCompleted += (sBizActionEMRFU, argsBizActionEMRFU) =>
                                    {
                                    };
                                    clientBizActionEMRFU.ProcessAsync(BizActionEMRFU, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientBizActionEMRFU.CloseAsync();
                                };
                                clientObjPatientEMRData.ProcessAsync(BizActionObjPatientEMRData, ((IApplicationConfiguration)App.Current).CurrentUser);
                                clientObjPatientEMRData.CloseAsync();
                                IsSaved = true;
                                #endregion

                            }
                            else
                                Indicatior.Close();
                        }
                        else
                        {
                            #region Update Patient EMR Template
                            //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy

                            //DataTemplateServiceClient client2 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
                            clsUpdatePatientEMRDataBizActionVO BizActionObjPatientEMRData = new clsUpdatePatientEMRDataBizActionVO();
                            clsPatientEMRDataVO data = new clsPatientEMRDataVO();

                            data.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                            data.PatientID = SelectedPatient.PatientId;
                            data.PatientUnitID = SelectedPatient.patientUnitID;
                            data.HistoryTemplate = testHistory;
                            if (SelectedUser == "Doctor")
                            {
                                data.TemplateByNurse = this.TemplateByNurse;
                                data.TemplateByDoctor = test;
                            }
                            else if (SelectedUser == "Nurse" && IsTemplateByDoctor == false)
                            {
                                data.TemplateByNurse = test;
                            }
                            else
                            {
                                data.TemplateByNurse = this.TemplateByNurse;
                                data.TemplateByDoctor = test;
                            }
                            data.SavedBy = SelectedUser;
                            data.VisitID = CurrentVisit.ID;
                            data.UnitId = CurrentVisit.UnitId;
                            data.Status = true;

                            BizActionObjPatientEMRData.PatientEMRDataDetails = data;

                            PalashServiceClient clientObjPatientEMRData = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                            clientObjPatientEMRData.ProcessCompleted += (sObjPatientEMRData, argsObjPatientEMRData) =>
                            {
                                clsGetPatientPrescriptionBizActionVO BizActionGetPatPres = new clsGetPatientPrescriptionBizActionVO();
                                BizActionGetPatPres.PatientPrescriptionSummary = new clsPatientPrescriptionVO();
                                BizActionGetPatPres.PatientPrescriptionSummary.PatientID = this.SelectedPatient.PatientId;
                                BizActionGetPatPres.PatientPrescriptionSummary.PatientUnitID = this.SelectedPatient.patientUnitID;
                                BizActionGetPatPres.PatientPrescriptionSummary.VisitID = CurrentVisit.ID;
                                BizActionGetPatPres.PatientPrescriptionSummary.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                BizActionGetPatPres.PatientPrescriptionSummary.DoctorID = CurrentVisit.DoctorID;
                                BizActionGetPatPres.PatientPrescriptionSummary.UnitID = CurrentVisit.UnitId;

                                PalashServiceClient clientGetPatPres = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                clientGetPatPres.ProcessCompleted += (sGetPatPres, argGetPatPres) =>
                                {
                                    BizActionGetPatPres.PatientPrescriptionSummary.ID = ((clsGetPatientPrescriptionBizActionVO)argGetPatPres.Result).PatientPrescriptionSummary.ID;

                                    clsUpdatePatientPrescriptionBizActionVO BizActionUpdatePatPres = new clsUpdatePatientPrescriptionBizActionVO();
                                    BizActionUpdatePatPres.PrescriptionID = BizActionGetPatPres.PatientPrescriptionSummary.ID;
                                    BizActionUpdatePatPres.UnitID = CurrentVisit.UnitId;
                                    BizActionUpdatePatPres.PatientPrescriptionDetail = PrescriptionList;

                                    PalashServiceClient clientUpdatePatPres = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                    clientUpdatePatPres.ProcessCompleted += (sUpdatePatPres, argUpdatePatPres) =>
                                    {
                                        if (argUpdatePatPres.Result != null && ((clsUpdatePatientPrescriptionBizActionVO)argUpdatePatPres.Result).PrescriptionID != null && ((clsUpdatePatientPrescriptionBizActionVO)argUpdatePatPres.Result).PrescriptionID != 0)
                                        {
                                            clsUpdateDoctorSuggestedServiceBizActionVO BizActionServ = new clsUpdateDoctorSuggestedServiceBizActionVO();
                                            BizActionServ.PrescriptionID = ((clsUpdatePatientPrescriptionBizActionVO)argUpdatePatPres.Result).PrescriptionID;
                                            BizActionServ.UnitID = CurrentVisit.UnitId;
                                            BizActionServ.DoctorSuggestedServiceDetail = ServiceList;
                                            PalashServiceClient client8 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                            client8.ProcessCompleted += (s8, arg8) =>
                                            {

                                            };
                                            client8.ProcessAsync(BizActionServ, ((IApplicationConfiguration)App.Current).CurrentUser);
                                            client8.CloseAsync();
                                        }

                                        clsUpdatePCRBizActionVO BizActionPCR = new clsUpdatePCRBizActionVO();
                                        BizActionPCR.PCRDetails = objPCR;
                                        BizActionPCR.PCRDetails.PatientID = this.SelectedPatient.PatientId;
                                        BizActionPCR.PCRDetails.PatientUnitID = this.SelectedPatient.patientUnitID;
                                        BizActionPCR.PCRDetails.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                        BizActionPCR.PCRDetails.UnitID = CurrentVisit.UnitId;
                                        BizActionPCR.PCRDetails.VisitID = CurrentVisit.ID;

                                        BizActionPCR.PCRDetails.Status = true;
                                        PalashServiceClient client6 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client6.ProcessCompleted += (s6, arg6) =>
                                        {
                                            Indicatior.Close();

                                            MessageBoxControl.MessageBoxChildWindow msgForTemplateUpdate = new MessageBoxControl.MessageBoxChildWindow("Palash", "Patient EMR Updated Successfully.", MessageBoxControl.MessageBoxButtons.Ok, MessageBoxControl.MessageBoxIcon.Information);

                                            msgForTemplateUpdate.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

                                            msgForTemplateUpdate.Show();
                                        };
                                        client6.ProcessAsync(BizActionPCR, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client6.CloseAsync();

                                        //Indicatior.Close();

                                        //MessageBoxControl.MessageBoxChildWindow msgForTemplateUpdate = new MessageBoxControl.MessageBoxChildWindow("Palash", "Patient EMR Updated Successfully.", MessageBoxControl.MessageBoxButtons.Ok, MessageBoxControl.MessageBoxIcon.Information);

                                        //msgForTemplateUpdate.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

                                        //msgForTemplateUpdate.Show();
                                        clsUpdateCaseReferralBizActionVO BizActionReferral = new clsUpdateCaseReferralBizActionVO();
                                        BizActionReferral.CaseReferralDetails = objCaseReferral;
                                        BizActionReferral.CaseReferralDetails.PatientID = this.SelectedPatient.PatientId;
                                        BizActionReferral.CaseReferralDetails.PatientUnitID = this.SelectedPatient.patientUnitID;
                                        BizActionReferral.CaseReferralDetails.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                                        BizActionReferral.CaseReferralDetails.UnitID = CurrentVisit.UnitId;
                                        BizActionReferral.CaseReferralDetails.VisitID = CurrentVisit.ID;
                                        BizActionReferral.CaseReferralDetails.Status = true;
                                        PalashServiceClient client7 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client7.ProcessCompleted += (s7, arg7) =>
                                        {

                                        };
                                        client7.ProcessAsync(BizActionReferral, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client7.CloseAsync();
                                    };
                                    clientUpdatePatPres.ProcessAsync(BizActionUpdatePatPres, ((IApplicationConfiguration)App.Current).CurrentUser);
                                    clientUpdatePatPres.CloseAsync();

                                };
                                clientGetPatPres.ProcessAsync(BizActionGetPatPres, ((IApplicationConfiguration)App.Current).CurrentUser);
                                clientGetPatPres.CloseAsync();

                                clsAddUpdatePatientEMRDetailBizActionVO BizActionEMRDetail = new clsAddUpdatePatientEMRDetailBizActionVO();
                                BizActionEMRDetail.TempVariance = variance;
                                BizActionEMRDetail.PatientEMRDataDetails = listPatientEMRDetails;
                                BizActionEMRDetail.FalgForAddUpdate = 1;
                                if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails != null)
                                {
                                    if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails.CoupleId != 0)
                                    {
                                        BizActionEMRDetail.IsDonor = false;

                                    }
                                    else if (((IApplicationConfiguration)App.Current).SelectedCoupleDetails.CoupleId == 0)
                                    {
                                        BizActionEMRDetail.IsDonor = true;
                                    }
                                }
                                PalashServiceClient clientBizActionEMRDetail = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                clientBizActionEMRDetail.ProcessCompleted += (sBizActionEMRDetail, argsBizActionEMRDetail) =>
                                {
                                };
                                clientBizActionEMRDetail.ProcessAsync(BizActionEMRDetail, ((IApplicationConfiguration)App.Current).CurrentUser);
                                clientBizActionEMRDetail.CloseAsync();


                                clsAddUpdatePatientEMRUploadedFilesBizActionVO BizActionEMRFU = new clsAddUpdatePatientEMRUploadedFilesBizActionVO();
                                BizActionEMRFU.TempVariance = variance;
                                BizActionEMRFU.PatientEMRUploadedFiles = listPatientEMRUploadedFiles;
                                BizActionEMRFU.FalgForAddUpdate = 1;
                                PalashServiceClient clientBizActionEMRFU = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                clientBizActionEMRFU.ProcessCompleted += (sBizActionEMRFU, argsBizActionEMRFU) =>
                                {
                                };
                                clientBizActionEMRFU.ProcessAsync(BizActionEMRFU, ((IApplicationConfiguration)App.Current).CurrentUser);
                                clientBizActionEMRFU.CloseAsync();
                            };
                            clientObjPatientEMRData.ProcessAsync(BizActionObjPatientEMRData, ((IApplicationConfiguration)App.Current).CurrentUser);
                            clientObjPatientEMRData.CloseAsync();
                            //IsSaved = true;
                            #endregion
                        }
                        IsPatientSaved = true;
                        
                    };
                    clientObjVariance.ProcessAsync(BizActionObjVariance, ((IApplicationConfiguration)App.Current).CurrentUser);
                    clientObjVariance.CloseAsync();



                }
            }
            catch (Exception ex)
            {
                Indicatior.Close();
                //HtmlPage.Window.Alert("Error Occured. \rPatient EMR not Saved.");
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while trying to save Patient EMR. \nPatient EMR not saved.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                msgbx.Show();
            }
        }

        private void SaveFieldwiseData()
        {
            if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null)
            {
                FieldDetail target = null;
                foreach (var section in SelectedFormStructure.SectionList)
                {
                    foreach (var field in section.FieldList)
                    {
                        target = field;
                        target.Parent = section;
                        if (target != null)
                        {
                            string tempControlName = "";
                            string tempControlCaption = "";
                            string tempControlValue = null;
                            string tempControlType = null;
                            string tempControlUnit = "";
                            DateTime? tempDt = null;
                            //Consultation
                            //Follow Up Consultation
                            //    Medication
                            //if ((CurrentVisit.VisitTypeID == 1 && ((SectionDetail)target.Parent).Tab == "Consultation") || (CurrentVisit.VisitTypeID != 1 && ((SectionDetail)target.Parent).Tab == "Follow Up Consultation") || (((SectionDetail)target.Parent).Tab == "Medication"))
                            //{
                                tempControlName = target.Name;
                                tempControlCaption = target.Title;
                                switch (target.DataType.Id)
                                {
                                    case 1:
                                        tempControlType = "Text";
                                        tempControlValue = ((TextFieldSetting)target.Settings).Value;
                                        break;
                                    case 2:
                                        tempControlType = "Boolean";
                                        if (((BooleanFieldSetting)target.Settings).Value && ((FrameworkElement)target.Control).Visibility == Visibility.Visible)
                                        {
                                            tempControlValue = "Yes";
                                        }
                                        else
                                        {
                                            tempControlValue = "No";
                                        }
                                        break;
                                    case 3:
                                      //  tempControlType = "DateTime";
                                      ////  tempControlValue = ((DateFieldSetting)target.Settings).Date.ToString();
                                      //  if(((DateFieldSetting)target.Settings).Date != null)
                                      //      tempControlValue = ((DateFieldSetting)target.Settings).Date.Value.Day + "/" + ((DateFieldSetting)target.Settings).Date.Value.Month + "/" + ((DateFieldSetting)target.Settings).Date.Value.Year;
                                      //  break;
                                        //change for date format priti
                                        tempControlType = "DateTime";
                                        tempControlValue = ((DateFieldSetting)target.Settings).Date.ToString();
                                        break;
                                    case 5:
                                        tempControlType = "Numeric";
                                        if (((DecimalFieldSetting)target.Settings).Value != null)
                                        {
                                            tempControlValue = ((DecimalFieldSetting)target.Settings).Value.ToString();
                                            tempControlUnit = ((DecimalFieldSetting)target.Settings).Unit.ToString();
                                        }
                                        break;
                                    case 6:
                                        tempControlType = "Hyperlink";
                                        tempControlValue = ((HyperlinkFieldSetting)target.Settings).Url;
                                        break;
                                    case 8:
                                        tempControlType = "LookUp";
                                        LookUpFieldSetting LookUpSetting = ((LookUpFieldSetting)target.Settings);
                                        switch (LookUpSetting.ChoiceMode)
                                        {
                                            case SelectionMode.Single:

                                                if (LookUpSetting.SelectedItem != null)
                                                {
                                                    tempControlValue = ((DynamicListItem)LookUpSetting.SelectedItem).Title;
                                                }
                                                if (LookUpSetting.IsAlternateText == true && LookUpSetting.AlternateText != null && LookUpSetting.AlternateText != "")
                                                    tempControlValue = (tempControlValue == "" ? "" : (tempControlValue + " OR ")) + LookUpSetting.AlternateText;
                                                break;
                                        }
                                        break;
                                    case 16:
                                        tempControlType = "TimePicker";
                                        tempControlValue = (((TimeFieldSetting)target.Settings).Time).Value.TimeOfDay.ToString();
                                        break;
                                   
                                }

                                if (tempControlType != null)
                                {
                                    clsPatientEMRDetailsVO objPatEMRDetail = new clsPatientEMRDetailsVO();
                                    objPatEMRDetail.ControlCaption = tempControlCaption;
                                    objPatEMRDetail.ControlName = tempControlName;
                                    objPatEMRDetail.ControlType = tempControlType;
                                    objPatEMRDetail.Value = tempControlValue;
                                    objPatEMRDetail.ControlUnit = tempControlUnit;
                                    listPatientEMRDetails.Add(objPatEMRDetail);
                                }
                                else
                                {
                                    clsPatientEMRDetailsVO objPatEMRDetail = null;
                                    switch (target.DataType.Id)
                                    {
                                        case 4:
                                            ListFieldSetting listSetting = (ListFieldSetting)target.Settings;
                                            switch (listSetting.ChoiceMode)
                                            {
                                                case SelectionMode.Single:
                                                    switch (listSetting.ControlType)
                                                    {
                                                        case ListControlType.ComboBox:
                                                            objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                            objPatEMRDetail.ControlCaption = target.Title;
                                                            objPatEMRDetail.ControlName = target.Name;
                                                            objPatEMRDetail.ControlType = "Combo Box";
                                                            if (listSetting.SelectedItem != null)
                                                                objPatEMRDetail.Value = ((DynamicListItem)listSetting.SelectedItem).Title;
                                                            else
                                                                objPatEMRDetail.Value = null;
                                                            listPatientEMRDetails.Add(objPatEMRDetail);
                                                            break;

                                                    }
                                                    break;
                                                case SelectionMode.Multiples:
                                                    if (listSetting.SelectedItems != null && listSetting.SelectedItems.Count > 0)
                                                    {
                                                        foreach (var ob in listSetting.SelectedItems)
                                                        {
                                                            if (ob != null)
                                                            {
                                                                objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                                objPatEMRDetail.ControlCaption = target.Title;
                                                                objPatEMRDetail.ControlName = target.Name;
                                                                objPatEMRDetail.ControlType = "List Box - MultiSelect";
                                                                objPatEMRDetail.Value = ((DynamicListItem)listSetting.SelectedItem).Title;
                                                                listPatientEMRDetails.Add(objPatEMRDetail);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                        objPatEMRDetail.ControlCaption = target.Title;
                                                        objPatEMRDetail.ControlName = target.Name;
                                                        objPatEMRDetail.ControlType = "List Box - MultiSelect";
                                                        objPatEMRDetail.Value = null;
                                                        listPatientEMRDetails.Add(objPatEMRDetail);
                                                    }
                                                    break;
                                            }
                                            break;
                                        case 12:
                                            ListOfCheckBoxesFieldSetting listSetting1 = (ListOfCheckBoxesFieldSetting)target.Settings;
                                            for (int i = 0; listSetting1.ItemsSource != null && i < listSetting1.ItemsSource.Count; i++)
                                            {
                                                if (listSetting1.SelectedItems[i])
                                                {
                                                    objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                    objPatEMRDetail.ControlCaption = target.Title;
                                                    objPatEMRDetail.ControlName = target.Name;
                                                    objPatEMRDetail.ControlType = "List Of Check Box";
                                                    objPatEMRDetail.Value = (listSetting1.ItemsSource[i]).ToString();
                                                    listPatientEMRDetails.Add(objPatEMRDetail);
                                                }
                                            }
                                            if (listSetting1.ItemsSource.Count == 0)
                                            {
                                                objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                objPatEMRDetail.ControlCaption = target.Title;
                                                objPatEMRDetail.ControlName = target.Name;
                                                objPatEMRDetail.ControlType = "List Of Check Box";
                                                objPatEMRDetail.Value = null;
                                                listPatientEMRDetails.Add(objPatEMRDetail);
                                            }
                                            break;
                                        case 13:
                                            AutomatedListFieldSetting AutolistSetting = ((AutomatedListFieldSetting)target.Settings);
                                            switch (AutolistSetting.ControlType)
                                            {
                                                case AutoListControlType.ComboBox:
                                                    objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                    objPatEMRDetail.ControlCaption = target.Title;
                                                    objPatEMRDetail.ControlName = target.Name;
                                                    objPatEMRDetail.ControlType = "AutomatedList - Combo Box";
                                                    if (AutolistSetting.SelectedItem != null)
                                                    {
                                                        objPatEMRDetail.Value = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                    }
                                                    listPatientEMRDetails.Add(objPatEMRDetail);
                                                    break;
                                                case AutoListControlType.ListBox:
                                                    switch (AutolistSetting.ChoiceMode)
                                                    {
                                                        case SelectionMode.Single:
                                                            objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                            objPatEMRDetail.ControlCaption = target.Title;
                                                            objPatEMRDetail.ControlName = target.Name;
                                                            objPatEMRDetail.ControlType = "AutomatedList - List Box - SigleSelect";
                                                            if (AutolistSetting.SelectedItem != null)
                                                            {
                                                                objPatEMRDetail.Value = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                            }
                                                            listPatientEMRDetails.Add(objPatEMRDetail);
                                                            break;
                                                        case SelectionMode.Multiples:
                                                            if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                                            {
                                                                foreach (var obList in AutolistSetting.SelectedItems)
                                                                {
                                                                    objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                                    objPatEMRDetail.ControlCaption = target.Title;
                                                                    objPatEMRDetail.ControlName = target.Name;
                                                                    objPatEMRDetail.ControlType = "AutomatedList - List Box - MultiSelect";
                                                                    objPatEMRDetail.Value = obList.Description.ToString();
                                                                    listPatientEMRDetails.Add(objPatEMRDetail);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                                objPatEMRDetail.ControlCaption = target.Title;
                                                                objPatEMRDetail.ControlName = target.Name;
                                                                objPatEMRDetail.ControlType = "AutomatedList - List Box - MultiSelect";
                                                                objPatEMRDetail.Value = null;
                                                                listPatientEMRDetails.Add(objPatEMRDetail);
                                                            }
                                                            break;
                                                    }
                                                    break;
                                                case AutoListControlType.CheckListBox:
                                                    for (int k = 0; AutolistSetting.ItemSource != null && k < AutolistSetting.ItemSource.Count; k++)
                                                    {
                                                        if (((MasterListItem)AutolistSetting.ItemSource[k]).Status)
                                                        {
                                                            objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                            objPatEMRDetail.ControlCaption = target.Title;
                                                            objPatEMRDetail.ControlName = target.Name;
                                                            objPatEMRDetail.ControlType = "AutomatedList - CheckList Box";
                                                            objPatEMRDetail.Value = ((MasterListItem)AutolistSetting.ItemSource[k]).Description.ToString();
                                                            listPatientEMRDetails.Add(objPatEMRDetail);
                                                        }
                                                    }
                                                    if (AutolistSetting.ItemSource.Count == 0)
                                                    {
                                                        objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                        objPatEMRDetail.ControlCaption = target.Title;
                                                        objPatEMRDetail.ControlName = target.Name;
                                                        objPatEMRDetail.ControlType = "AutomatedList - CheckList Box";
                                                        objPatEMRDetail.Value = null;
                                                        listPatientEMRDetails.Add(objPatEMRDetail);
                                                    }
                                                    break;
                                            }
                                            break;
                                        case 17:
                                            FileUploadFieldSetting medSetting = ((FileUploadFieldSetting)target.Settings);
                                            for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                            {
                                                if (((FileUpload)medSetting.ItemsSource[i]).FileName != null && ((FileUpload)medSetting.ItemsSource[i]).FileName != "")
                                                {
                                                    listPatientEMRUploadedFiles.Add(new clsPatientEMRUploadedFilesVO()
                                                    {
                                                        ControlCaption = target.Title,
                                                        ControlName = target.Name,
                                                        ControlType = "FileUpload",
                                                        Value = ((FileUpload)medSetting.ItemsSource[i]).Data,
                                                        ControlIndex = i
                                                    });
                                                }
                                            }
                                            break;
                                    }
                                }
                            //}
                        }
                    }
                }
            }

            if (SelectedHistoryStructure != null && SelectedHistoryStructure.SectionList != null)
            {
                FieldDetail target = null;
                foreach (var section in SelectedHistoryStructure.SectionList)
                {
                    foreach (var field in section.FieldList)
                    {
                        target = field;
                        target.Parent = section;
                        if (target != null)
                        {
                            string tempControlName = "";
                            string tempControlCaption = "";
                            string tempControlValue = null;
                            string tempControlType = null;
                            string tempControlUnit = "";
                            tempControlName = target.Name;
                            tempControlCaption = target.Title;
                            switch (target.DataType.Id)
                            {
                                case 1:
                                    tempControlType = "Text";
                                    tempControlValue = ((TextFieldSetting)target.Settings).Value;
                                    break;
                                case 2:
                                    tempControlType = "Boolean";
                                    if (((BooleanFieldSetting)target.Settings).Value && ((FrameworkElement)target.Control).Visibility == Visibility.Visible)
                                    {
                                        tempControlValue = "True";
                                    }
                                    else
                                    {
                                        tempControlValue = "False";
                                    }
                                    break;
                                case 3:
                                    tempControlType = "DateTime";
                                    tempControlValue = ((DateFieldSetting)target.Settings).Date.ToString();
                                    break;
                                case 5:
                                    tempControlType = "Numeric";
                                    if (((DecimalFieldSetting)target.Settings).Value != null)
                                    {
                                        tempControlValue = ((DecimalFieldSetting)target.Settings).Value.ToString();
                                        tempControlUnit = ((DecimalFieldSetting)target.Settings).Unit.ToString();
                                    }
                                    break;
                                case 6:
                                    tempControlType = "Hyperlink";
                                    tempControlValue = ((HyperlinkFieldSetting)target.Settings).Url;
                                    break;
                                case 8:
                                    tempControlType = "LookUp";
                                    LookUpFieldSetting LookUpSetting = ((LookUpFieldSetting)target.Settings);
                                    switch (LookUpSetting.ChoiceMode)
                                    {
                                        case SelectionMode.Single:

                                            if (LookUpSetting.SelectedItem != null)
                                            {
                                                tempControlValue = ((DynamicListItem)LookUpSetting.SelectedItem).Title;
                                            }
                                            if (LookUpSetting.IsAlternateText == true && LookUpSetting.AlternateText != null && LookUpSetting.AlternateText != "")
                                                tempControlValue = (tempControlValue == "" ? "" : (tempControlValue + " OR ")) + LookUpSetting.AlternateText;
                                            break;
                                    }
                                    break;

                            }

                            if (tempControlType != null)
                            {
                                clsPatientEMRDetailsVO objPatEMRDetail = new clsPatientEMRDetailsVO();
                                objPatEMRDetail.ControlCaption = tempControlCaption;
                                objPatEMRDetail.ControlName = tempControlName;
                                objPatEMRDetail.ControlType = tempControlType;
                                objPatEMRDetail.Value = tempControlValue;
                                objPatEMRDetail.ControlUnit = tempControlUnit;
                                listPatientEMRDetails.Add(objPatEMRDetail);
                            }
                            else
                            {
                                clsPatientEMRDetailsVO objPatEMRDetail = null;
                                switch (target.DataType.Id)
                                {
                                    case 4:
                                        ListFieldSetting listSetting = (ListFieldSetting)target.Settings;
                                        switch (listSetting.ChoiceMode)
                                        {
                                            case SelectionMode.Single:
                                                switch (listSetting.ControlType)
                                                {
                                                    case ListControlType.ComboBox:
                                                        objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                        objPatEMRDetail.ControlCaption = target.Title;
                                                        objPatEMRDetail.ControlName = target.Name;
                                                        objPatEMRDetail.ControlType = "Combo Box";
                                                        if (listSetting.SelectedItem != null)
                                                            objPatEMRDetail.Value = ((DynamicListItem)listSetting.SelectedItem).Title;
                                                        else
                                                            objPatEMRDetail.Value = null;
                                                        listPatientEMRDetails.Add(objPatEMRDetail);
                                                        break;

                                                }
                                                break;
                                            case SelectionMode.Multiples:
                                                if (listSetting.SelectedItems != null && listSetting.SelectedItems.Count > 0)
                                                {
                                                    foreach (var ob in listSetting.SelectedItems)
                                                    {
                                                        if (ob != null)
                                                        {
                                                            objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                            objPatEMRDetail.ControlCaption = target.Title;
                                                            objPatEMRDetail.ControlName = target.Name;
                                                            objPatEMRDetail.ControlType = "List Box - MultiSelect";
                                                            objPatEMRDetail.Value = ((DynamicListItem)listSetting.SelectedItem).Title;
                                                            listPatientEMRDetails.Add(objPatEMRDetail);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                    objPatEMRDetail.ControlCaption = target.Title;
                                                    objPatEMRDetail.ControlName = target.Name;
                                                    objPatEMRDetail.ControlType = "List Box - MultiSelect";
                                                    objPatEMRDetail.Value = null;
                                                    listPatientEMRDetails.Add(objPatEMRDetail);
                                                }
                                                break;
                                        }
                                        break;
                                    case 12:
                                        ListOfCheckBoxesFieldSetting listSetting1 = (ListOfCheckBoxesFieldSetting)target.Settings;
                                        for (int i = 0; listSetting1.ItemsSource != null && i < listSetting1.ItemsSource.Count; i++)
                                        {
                                            if (listSetting1.SelectedItems[i])
                                            {
                                                objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                objPatEMRDetail.ControlCaption = target.Title;
                                                objPatEMRDetail.ControlName = target.Name;
                                                objPatEMRDetail.ControlType = "List Of Check Box";
                                                objPatEMRDetail.Value = (listSetting1.ItemsSource[i]).ToString();
                                                listPatientEMRDetails.Add(objPatEMRDetail);
                                            }
                                        }
                                        if (listSetting1.ItemsSource.Count == 0)
                                        {
                                            objPatEMRDetail = new clsPatientEMRDetailsVO();
                                            objPatEMRDetail.ControlCaption = target.Title;
                                            objPatEMRDetail.ControlName = target.Name;
                                            objPatEMRDetail.ControlType = "List Of Check Box";
                                            objPatEMRDetail.Value = null;
                                            listPatientEMRDetails.Add(objPatEMRDetail);
                                        }
                                        break;
                                    case 13:
                                        AutomatedListFieldSetting AutolistSetting = ((AutomatedListFieldSetting)target.Settings);
                                        switch (AutolistSetting.ControlType)
                                        {
                                            case AutoListControlType.ComboBox:
                                                objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                objPatEMRDetail.ControlCaption = target.Title;
                                                objPatEMRDetail.ControlName = target.Name;
                                                objPatEMRDetail.ControlType = "AutomatedList - Combo Box";
                                                if (AutolistSetting.SelectedItem != null)
                                                {
                                                    objPatEMRDetail.Value = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                }
                                                listPatientEMRDetails.Add(objPatEMRDetail);
                                                break;
                                            case AutoListControlType.ListBox:
                                                switch (AutolistSetting.ChoiceMode)
                                                {
                                                    case SelectionMode.Single:
                                                        objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                        objPatEMRDetail.ControlCaption = target.Title;
                                                        objPatEMRDetail.ControlName = target.Name;
                                                        objPatEMRDetail.ControlType = "AutomatedList - List Box - SigleSelect";
                                                        if (AutolistSetting.SelectedItem != null)
                                                        {
                                                            objPatEMRDetail.Value = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                        }
                                                        listPatientEMRDetails.Add(objPatEMRDetail);
                                                        break;
                                                    case SelectionMode.Multiples:
                                                        if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                                        {
                                                            foreach (var obList in AutolistSetting.SelectedItems)
                                                            {
                                                                objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                                objPatEMRDetail.ControlCaption = target.Title;
                                                                objPatEMRDetail.ControlName = target.Name;
                                                                objPatEMRDetail.ControlType = "AutomatedList - List Box - MultiSelect";
                                                                objPatEMRDetail.Value = obList.Description.ToString();
                                                                listPatientEMRDetails.Add(objPatEMRDetail);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                            objPatEMRDetail.ControlCaption = target.Title;
                                                            objPatEMRDetail.ControlName = target.Name;
                                                            objPatEMRDetail.ControlType = "AutomatedList - List Box - MultiSelect";
                                                            objPatEMRDetail.Value = null;
                                                            listPatientEMRDetails.Add(objPatEMRDetail);
                                                        }
                                                        break;
                                                }
                                                break;
                                            case AutoListControlType.CheckListBox:
                                                for (int k = 0; AutolistSetting.ItemSource != null && k < AutolistSetting.ItemSource.Count; k++)
                                                {
                                                    if (((MasterListItem)AutolistSetting.ItemSource[k]).Status)
                                                    {
                                                        objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                        objPatEMRDetail.ControlCaption = target.Title;
                                                        objPatEMRDetail.ControlName = target.Name;
                                                        objPatEMRDetail.ControlType = "AutomatedList - CheckList Box";
                                                        objPatEMRDetail.Value = ((MasterListItem)AutolistSetting.ItemSource[k]).Description.ToString();
                                                        listPatientEMRDetails.Add(objPatEMRDetail);
                                                    }
                                                }
                                                if (AutolistSetting.ItemSource.Count == 0)
                                                {
                                                    objPatEMRDetail = new clsPatientEMRDetailsVO();
                                                    objPatEMRDetail.ControlCaption = target.Title;
                                                    objPatEMRDetail.ControlName = target.Name;
                                                    objPatEMRDetail.ControlType = "AutomatedList - CheckList Box";
                                                    objPatEMRDetail.Value = null;
                                                    listPatientEMRDetails.Add(objPatEMRDetail);
                                                }
                                                break;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }

        // Commented on 3 May

        //private void SaveTemplateItemButton_Click(object sender, RoutedEventArgs e)
        //{            
        //    try
        //    {
        //        Indicatior = new WaitIndicator();

        //        #region Get Latest Visit Information --> Save Variance --> Save Template --> Save PCR Value --> Populate Visit List
        //        Int64 VisitId;
        //        clsGetVisitBizActionVO BizAction = new clsGetVisitBizActionVO();
        //        BizAction.Details = new clsVisitVO();
        //        BizAction.GetLatestVisit = true;
        //        BizAction.Details.PatientId = this.SelectedPatient.PatientId;
        //        BizAction.Details.PatientUnitId = this.SelectedPatient.patientUnitID;

        //        Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
        //        PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //        client.ProcessCompleted += (s, arg) =>
        //        {
        //            if (arg.Error == null)
        //            {
        //                if (arg.Result != null)
        //                {                                                        
        //                    #region Save Variance --> Save Template --> Save PCR Value --> Populate Visit List
        //                    BizAction = (clsGetVisitBizActionVO)arg.Result;
        //                    VisitId=((clsVisitVO)((clsGetVisitBizActionVO)arg.Result).Details).ID;

        //                    bool flag = true;
        //                    string list = IsMandatorySet();
        //                    if (list != null && list != "")
        //                    {
        //                        variance.Variance7 = "Mandatory prompt ignored";
        //                        variance.ListVariance7 = list;
        //                        if (MessageBox.Show("Some Mandatory Fiels are not filled. \r Mandotory Fields List:\r" + list + "\rDo you want to Continue to Save without filling Mandatory Fields?", "Mandatory fields are not Filled", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
        //                            flag = true;
        //                        else
        //                            flag = false;
        //                    }
        //                    else
        //                    {
        //                        variance.Variance7 = null;
        //                        variance.ListVariance7 = "";
        //                    }
        //                    if (flag)
        //                    {
        //                        Indicatior.Show();
        //                        GetVariance();
        //                        //SaveVariance();

        //                        //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
        //                        //DataTemplateServiceClient client1 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
        //                        clsAddVarianceBizActionVO BizActionObjVariance = new clsAddVarianceBizActionVO();
        //                        PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                        client1.ProcessCompleted += (s1, args1) =>
        //                        {
        //                            GetPCR("SavePCR");
        //                            // Map PCR values from Template Fields
        //                            MapPCR();
        //                            MapCaseReferral();
        //                            PatientCaseReferralSetting CR= GetCaseReferral();
        //                            string test = this.SelectedFormStructure.XmlSerilze();
        //                            // Commented for debugging
        //                            string testHistory ;// = this.SelectedHistoryStructure.XmlSerilze();
        //                            testHistory = "";
        //                            string test1 = this.PCRS.XmlSerilze();
        //                            string test2 = CR.XmlSerilze();

        //                            if (!IsSaved)
        //                            {
        //                                #region Add Patient EMR Template
        //                                //Uri address1 = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
        //                                //DataTemplateServiceClient client2 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
        //                                clsAddPatientEMRDataBizActionVO BizActionObjPatientEMRData = new clsAddPatientEMRDataBizActionVO();
        //                                clsPatientEMRDataVO data = new clsPatientEMRDataVO();

        //                                PalashServiceClient client2 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                client2.ProcessCompleted += (s2, args2) =>
        //                                {
        //                                    #region Set PCR Value in Visit Master
        //                                    BizAction.Details.PatientCaseRecord = test1;
        //                                    BizAction.Details.CaseReferralSheet = test2;
        //                                    clsAddVisitBizActionVO BizActionAdd=new clsAddVisitBizActionVO();
        //                                    BizActionAdd.VisitDetails=BizAction.Details;

        //                                    //User Related Values are added in DAL Layer

        //                                    Uri address3 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
        //                                    PalashServiceClient client3 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                    client3.ProcessCompleted += (s3, arg3) =>
        //                                    {

        //                                        //MessageBox.Show("Patient EMR Saved Successfully.", "EMR Saved", MessageBoxButton.OK);

        //                                        clsAddPatientPrescriptionBizActionVO BizActionPatPres = new clsAddPatientPrescriptionBizActionVO();
        //                                        BizActionPatPres.PatientPrescriptionSummary = new clsPatientPrescriptionVO();
        //                                        BizActionPatPres.PatientPrescriptionSummary.PatientID = data.PatientID;
        //                                        BizActionPatPres.PatientPrescriptionSummary.VisitID = data.VisitID;
        //                                        BizActionPatPres.PatientPrescriptionSummary.TemplateID = data.TemplateID;
        //                                        BizActionPatPres.PatientPrescriptionSummary.DoctorID = BizAction.Details.DoctorID;
        //                                        BizActionPatPres.PatientPrescriptionSummary.UnitID = BizAction.Details.UnitId;
        //                                        BizActionPatPres.PatientPrescriptionSummary.PatientUnitID = BizAction.Details.PatientUnitId;

        //                                        //User Related Values Specified in DAL
        //                                        BizActionPatPres.PatientPrescriptionSummary.Status = true;

        //                                        //BizActionPatPres.PatientPrescriptionDetail = GetPrescription();
        //                                        BizActionPatPres.PatientPrescriptionDetail = PrescriptionList;

        //                                        PalashServiceClient client4 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                        client4.ProcessCompleted += (s4, arg4) =>
        //                                        {
        //                                            if (arg4.Result != null && ((clsAddPatientPrescriptionBizActionVO)arg4.Result).PatientPrescriptionSummary.ID != null && ((clsAddPatientPrescriptionBizActionVO)arg4.Result).PatientPrescriptionSummary.ID != 0)
        //                                            {
        //                                                clsAddDoctorSuggestedServiceDetailBizActionVO BizActionServ = new clsAddDoctorSuggestedServiceDetailBizActionVO();
        //                                                BizActionServ.PatientPrescriptionID = ((clsAddPatientPrescriptionBizActionVO)arg4.Result).PatientPrescriptionSummary.ID;
        //                                                BizActionServ.DoctorSuggestedServiceDetail = ServiceList;
        //                                                PalashServiceClient client7 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                                client7.ProcessCompleted += (s7, arg7) =>
        //                                                {

        //                                                };
        //                                                client7.ProcessAsync(BizActionServ, ((IApplicationConfiguration)App.Current).CurrentUser);               

        //                                            }
        //                                            clsAddPCRBizActionVO BizActionPCR = new clsAddPCRBizActionVO();
        //                                            BizActionPCR.PCRDetails = objPCR;
        //                                            BizActionPCR.PCRDetails.UnitID = BizAction.Details.UnitId;
        //                                            BizActionPCR.PCRDetails.VisitID = data.VisitID;
        //                                            BizActionPCR.PCRDetails.Status = true;
        //                                            PalashServiceClient client5 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                            client5.ProcessCompleted += (s5, arg5) =>
        //                                            {
        //                                                Indicatior.Close();

        //                                                MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Patient EMR Saved Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);

        //                                                msgForTemplateSave.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

        //                                                msgForTemplateSave.Show();
        //                                            };
        //                                            client5.ProcessAsync(BizActionPCR, ((IApplicationConfiguration)App.Current).CurrentUser);                                                                                                
        //                                            //Indicatior.Close();

        //                                            //MessageBoxControl.MessageBoxChildWindow msgForTemplateSave = new MessageBoxChildWindow("Palash", "Patient EMR Saved Successfully.", MessageBoxButtons.Ok, MessageBoxIcon.Information);

        //                                            //msgForTemplateSave.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

        //                                            //msgForTemplateSave.Show();
        //                                            clsAddCaseReferralBizActionVO BizActionReferral = new clsAddCaseReferralBizActionVO();
        //                                            BizActionReferral.CaseReferralDetails = objCaseReferral;
        //                                            BizActionReferral.CaseReferralDetails.UnitID = BizAction.Details.UnitId;
        //                                            BizActionReferral.CaseReferralDetails.VisitID = data.VisitID;
        //                                            BizActionReferral.CaseReferralDetails.Status = true;
        //                                            PalashServiceClient client6 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                            client6.ProcessCompleted += (s6, arg6) =>
        //                                            {

        //                                            };
        //                                            client6.ProcessAsync(BizActionReferral, ((IApplicationConfiguration)App.Current).CurrentUser);                                                                                                

        //                                        };
        //                                        client4.ProcessAsync(BizActionPatPres, ((IApplicationConfiguration)App.Current).CurrentUser);                                                                                                

        //                                    };
        //                                    client3.ProcessAsync(BizActionAdd, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                    #endregion
        //                                };

        //                                data.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                                data.PatientID = SelectedPatient.PatientId;
        //                                data.PatientUnitID = SelectedPatient.patientUnitID;


        //                                data.HistoryTemplate = testHistory;


        //                                if (SelectedUser == "Doctor")
        //                                    data.TemplateByDoctor = test;
        //                                else
        //                                {
        //                                    this.TemplateByNurse = test;
        //                                    data.TemplateByNurse = test;
        //                                }
        //                                //data.PCR = test1;
        //                                data.SavedBy = SelectedUser;
        //                                data.VisitID = VisitId;
        //                                data.UnitId = BizAction.Details.UnitId;                                        

        //                                //User Related Values Specified in DAL
        //                                data.Status = true;

        //                                //data.DoctorName = "Asthana";
        //                                //data.OPD = 1;
        //                                //data.VisitType = ((TabItem)FormTab.SelectedItem).Name;
        //                                //data.CC = ((EMRTemplate)cmbComplaint.SelectedItem).Title;
        //                                //data.VisitDate = DateTime.Now;

        //                                BizActionObjPatientEMRData.PatientEMRDataDetails = data;
        //                                client2.ProcessAsync(BizActionObjPatientEMRData, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                IsSaved = true;
        //                                #endregion
        //                            }
        //                            else
        //                            {
        //                                #region Update Patient EMR Template
        //                                //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy

        //                                //DataTemplateServiceClient client2 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
        //                                clsUpdatePatientEMRDataBizActionVO BizActionObjPatientEMRData = new clsUpdatePatientEMRDataBizActionVO();
        //                                clsPatientEMRDataVO data = new clsPatientEMRDataVO();

        //                                PalashServiceClient client2 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
        //                                client2.ProcessCompleted += (s2, args2) =>
        //                                {
        //                                    #region Update PCR Value in Visit Master
        //                                    BizAction.Details.PatientCaseRecord = test1;
        //                                    BizAction.Details.CaseReferralSheet = test2;
        //                                    clsAddVisitBizActionVO BizActionAdd = new clsAddVisitBizActionVO();
        //                                    BizActionAdd.VisitDetails = BizAction.Details;

        //                                    //User Related Values specified in DAL

        //                                    Uri address3 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
        //                                    PalashServiceClient client3 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                    client3.ProcessCompleted += (s3, arg3) =>
        //                                    {
        //                                        //Indicatior.Close();
        //                                        //MessageBox.Show("Patient EMR Updated Successfully.", "EMR Updated", MessageBoxButton.OK);

        //                                        clsGetPatientPrescriptionBizActionVO BizActionGetPatPres = new clsGetPatientPrescriptionBizActionVO();
        //                                        BizActionGetPatPres.PatientPrescriptionSummary = new clsPatientPrescriptionVO();
        //                                        BizActionGetPatPres.PatientPrescriptionSummary.PatientID = data.PatientID;
        //                                        BizActionGetPatPres.PatientPrescriptionSummary.PatientUnitID = data.PatientUnitID;
        //                                        BizActionGetPatPres.PatientPrescriptionSummary.VisitID = data.VisitID;
        //                                        BizActionGetPatPres.PatientPrescriptionSummary.TemplateID = data.TemplateID;
        //                                        BizActionGetPatPres.PatientPrescriptionSummary.DoctorID = BizAction.Details.DoctorID;

        //                                        PalashServiceClient client4 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                        client4.ProcessCompleted += (s4, arg4) =>
        //                                        {
        //                                            BizActionGetPatPres.PatientPrescriptionSummary.ID = ((clsGetPatientPrescriptionBizActionVO)arg4.Result).PatientPrescriptionSummary.ID;

        //                                            clsUpdatePatientPrescriptionBizActionVO BizActionUpdatePatPres = new clsUpdatePatientPrescriptionBizActionVO();
        //                                            BizActionUpdatePatPres.PrescriptionID = BizActionGetPatPres.PatientPrescriptionSummary.ID;
        //                                            //BizActionUpdatePatPres.PatientPrescriptionDetail = GetPrescription();
        //                                            BizActionUpdatePatPres.PatientPrescriptionDetail = PrescriptionList;
        //                                            PalashServiceClient client5 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                            client5.ProcessCompleted += (s5, arg5) =>
        //                                            {
        //                                                if (arg5.Result != null && ((clsUpdatePatientPrescriptionBizActionVO)arg5.Result).PrescriptionID != null && ((clsUpdatePatientPrescriptionBizActionVO)arg5.Result).PrescriptionID != 0)
        //                                                {
        //                                                    clsUpdateDoctorSuggestedServiceBizActionVO BizActionServ = new clsUpdateDoctorSuggestedServiceBizActionVO();
        //                                                    BizActionServ.PrescriptionID = ((clsUpdatePatientPrescriptionBizActionVO)arg5.Result).PrescriptionID;
        //                                                    BizActionServ.DoctorSuggestedServiceDetail = ServiceList;
        //                                                    PalashServiceClient client8 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                                    client8.ProcessCompleted += (s8, arg8) =>
        //                                                    {

        //                                                    };
        //                                                    client8.ProcessAsync(BizActionServ, ((IApplicationConfiguration)App.Current).CurrentUser);

        //                                                }


        //                                                clsUpdatePCRBizActionVO BizActionPCR = new clsUpdatePCRBizActionVO();
        //                                                BizActionPCR.PCRDetails = objPCR;
        //                                                BizActionPCR.PCRDetails.UnitID = BizAction.Details.UnitId;
        //                                                BizActionPCR.PCRDetails.VisitID = data.VisitID;
        //                                                BizActionPCR.PCRDetails.Status = true;
        //                                                PalashServiceClient client6 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                                client6.ProcessCompleted += (s6, arg6) =>
        //                                                {
        //                                                    Indicatior.Close();

        //                                                    MessageBoxControl.MessageBoxChildWindow msgForTemplateUpdate = new MessageBoxControl.MessageBoxChildWindow("Palash", "Patient EMR Updated Successfully.", MessageBoxControl.MessageBoxButtons.Ok, MessageBoxControl.MessageBoxIcon.Information);

        //                                                    msgForTemplateUpdate.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

        //                                                    msgForTemplateUpdate.Show();
        //                                                };
        //                                                client6.ProcessAsync(BizActionPCR, ((IApplicationConfiguration)App.Current).CurrentUser);                                                                                                

        //                                                //Indicatior.Close();

        //                                                //MessageBoxControl.MessageBoxChildWindow msgForTemplateUpdate = new MessageBoxControl.MessageBoxChildWindow("Palash", "Patient EMR Updated Successfully.", MessageBoxControl.MessageBoxButtons.Ok, MessageBoxControl.MessageBoxIcon.Information);

        //                                                //msgForTemplateUpdate.OnMessageBoxClosed += new MessageBoxChildWindow.MessageBoxClosedDelegate(msgForTemplateUpdate_OnMessageBoxClosed);

        //                                                //msgForTemplateUpdate.Show();
        //                                                clsUpdateCaseReferralBizActionVO BizActionReferral = new clsUpdateCaseReferralBizActionVO();
        //                                                BizActionReferral.CaseReferralDetails = objCaseReferral;
        //                                                BizActionReferral.CaseReferralDetails.UnitID = BizAction.Details.UnitId;
        //                                                BizActionReferral.CaseReferralDetails.VisitID = data.VisitID;
        //                                                BizActionReferral.CaseReferralDetails.Status = true;
        //                                                PalashServiceClient client7 = new PalashServiceClient("BasicHttpBinding_IPalashService", address3.AbsoluteUri);
        //                                                client7.ProcessCompleted += (s7, arg7) =>
        //                                                {

        //                                                };
        //                                                client7.ProcessAsync(BizActionReferral, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                            };
        //                                            client5.ProcessAsync(BizActionUpdatePatPres, ((IApplicationConfiguration)App.Current).CurrentUser);

        //                                        };
        //                                        client4.ProcessAsync(BizActionGetPatPres, ((IApplicationConfiguration)App.Current).CurrentUser);

        //                                    };
        //                                    client3.ProcessAsync(BizActionAdd, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                    #endregion
        //                                };

        //                                data.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
        //                                data.PatientID = SelectedPatient.PatientId;
        //                                data.PatientUnitID = SelectedPatient.patientUnitID;
        //                                data.HistoryTemplate = testHistory;
        //                                if (SelectedUser == "Doctor")
        //                                {
        //                                    data.TemplateByNurse = this.TemplateByNurse;
        //                                    data.TemplateByDoctor = test;
        //                                }
        //                                else if (SelectedUser == "Nurse" && IsTemplateByDoctor == false)
        //                                {
        //                                    data.TemplateByNurse = test;
        //                                }
        //                                else
        //                                {
        //                                    data.TemplateByNurse = this.TemplateByNurse;
        //                                    data.TemplateByDoctor = test;
        //                                }
        //                                //data.Template = test;                                        
        //                                data.SavedBy = SelectedUser;
        //                                data.VisitID = VisitId;
        //                                data.UnitId = BizAction.Details.UnitId;

        //                                //User Related Values specified in DAL
        //                                data.Status = true;                                        

        //                                BizActionObjPatientEMRData.PatientEMRDataDetails = data;
        //                                client2.ProcessAsync(BizActionObjPatientEMRData, ((IApplicationConfiguration)App.Current).CurrentUser);
        //                                //IsSaved = true;
        //                                #endregion
        //                            }
        //                            IsPatientSaved = true;
        //                        };
        //                        variance.PatientID = this.SelectedPatient.PatientId;
        //                        variance.DoctorID = BizAction.Details.DoctorID;
        //                        variance.Date = DateTime.Now;
        //                        variance.UnitId = BizAction.Details.UnitId;
        //                        variance.VisitID = VisitId;
        //                        variance.PatientUnitID = BizAction.Details.PatientUnitId;

        //                        //User Related Values specified in DAL                                                               
        //                        variance.Status = true;                                

        //                        BizActionObjVariance.VarianceDetails = variance;

        //                        client1.ProcessAsync(BizActionObjVariance, ((IApplicationConfiguration)App.Current).CurrentUser);

        //                    }
        //                    #endregion
        //                }
        //            }
        //        };
        //        client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);

        //        #endregion

        //    }
        //    catch (Exception ex)
        //    {                
        //        Indicatior.Close();
        //        HtmlPage.Window.Alert("Error Occured. \rPatient EMR not Saved.");
        //    }
        //}

        void msgForTemplateUpdate_OnMessageBoxClosed(MessageBoxResult result)
        {
            //throw new NotImplementedException();
            //Old
            //if (IsSavedBeforePrint == true)
            //    PrintPCR();

            if (IsSavedBeforePrint == true)
            {
                //HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=1&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + this.SelectedPatient.PatientId + "&PatientUnitID=" + this.SelectedPatient.patientUnitID + "&TemplateID=" + ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID), "_blank");
                //HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=2&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + this.SelectedPatient.PatientId + "&PatientUnitID=" + this.SelectedPatient.patientUnitID + "&TemplateID=" + ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID), "_blank");
                HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=1&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + this.SelectedPatient.PatientId + "&PatientUnitID=" + this.SelectedPatient.patientUnitID + "&TemplateID=" + GlobalTemplateID), "_blank");
            }

            this.Unloaded += new RoutedEventHandler(TemplateAssignment_Unloaded);
        }

        //private void SaveTemplateItemButton_Click(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        bool flag = true;

        //        string list = IsMandatorySet();
        //        if (list != null && list != "")
        //        {
        //            variance.Variance7 = "Mandatory prompt ignored";
        //            variance.ListVariance7 = list;
        //            if (MessageBox.Show("Some Mandatory Fiels are not filled. \r Mandotory Fields List:\r" + list + "\rDo you want to Continue to Save without filling Mandatory Fields?", "Mandatory fields are not Filled", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
        //                flag = true;
        //            else
        //                flag = false;
        //        }
        //        else
        //        {
        //            variance.Variance7 = null;
        //            variance.ListVariance7 = "";
        //        }

        //        if (flag)
        //        {
        //            GetVariance();
        //            //SaveVariance();

        //            Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
        //            DataTemplateServiceClient client1 = new DataTemplateServiceClient("CustomBinding_DataTemplateService", address.AbsoluteUri);
        //            client1.SaveVarianceCompleted += (s, args) =>
        //            {
        //            };
        //            variance.PatientId = this.SelectedPatient.PatientId;
        //            variance.DoctorId = 1;
        //            variance.Date = DateTime.Now;
        //            variance.ClinicId = 1;
        //            client1.SaveVarianceAsync(variance);

        //            GetPCR("SavePCR");
        //            string test = this.SelectedFormStructure.XmlSerilze();
        //            string test1 = this.PCRS.XmlSerilze();
        //            if (!IsSaved)
        //            {

        //                //Uri address1 = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
        //                DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
        //                client.SavePatientEMRCompleted += (s1, args1) =>
        //                {
        //                    MessageBox.Show("Patient EMR Saved Successfully.","EMR Saved",MessageBoxButton.OK);
        //                };
        //                PatientEMRData data = new PatientEMRData();
        //                data.TemplateId = ((EMRTemplate)cmbComplaint.SelectedItem).TemplateId;
        //                data.PatientId = SelectedPatient.PatientId;
        //                data.Template = test;
        //                //data.PCR = test1;
        //                data.SavedBy=(string)((ComboBoxItem)cmbUser.SelectedItem).Content;
        //                //data.DoctorName = "Asthana";
        //                //data.OPD = 1;
        //                //data.VisitType = ((TabItem)FormTab.SelectedItem).Name;
        //                //data.CC = ((EMRTemplate)cmbComplaint.SelectedItem).Title;
        //                //data.VisitDate = DateTime.Now;
        //                client.SavePatientEMRAsync(data);
        //                IsSaved = true;
        //            }
        //            else
        //            {
        //                //Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
        //                DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
        //                client.UpdatePatientEMRCompleted += (s, args) =>
        //                {
        //                    MessageBox.Show("Patient EMR Updated Successfully.", "EMR Updated", MessageBoxButton.OK);
        //                };
        //                PatientEMRData data = new PatientEMRData();
        //                data.TemplateId = ((EMRTemplate)cmbComplaint.SelectedItem).TemplateId;
        //                data.PatientId = SelectedPatient.PatientId;
        //                data.Template = test;
        //                //data.PCR = test1;
        //                data.SavedBy = (string)((ComboBoxItem)cmbUser.SelectedItem).Content;                       
        //                //data.DoctorName = "Asthana";
        //                //data.OPD = 1;
        //                //data.VisitType = ((TabItem)FormTab.SelectedItem).Name;
        //                //data.CC = ((EMRTemplate)cmbComplaint.SelectedItem).Title;
        //                //data.VisitDate = DateTime.Now;
        //                client.UpdatePatientEMRAsync(data);
        //                //IsSaved = true;
        //            }
        //            IsPatientSaved = true;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        HtmlPage.Window.Alert("Error Occured. \rPatient EMR not Saved.");
        //    }
        //}

        private void SaveVariance()
        {

        }
        private void HomeItemButton_Click(object sender, RoutedEventArgs e)
        {
            //if (BorderVariance.Visibility == Visibility.Visible)
            //{
            //    BorderVariance.Visibility = Visibility.Collapsed;
            //    BorderForm.Visibility = Visibility.Visible;
            //}
            //else
            //{
            App.MainWindow.MainRegion.Content = new TemplateList();
            //}
        }

        private  void MapRelations()
        {
            if (((TabItem)FormTab.SelectedItem).Name != "tabHistory")
            {
                if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null && SelectedFormStructure.Relations != null && SelectedFormStructure.Relations.Count > 0)
                {
                    foreach (var item in SelectedFormStructure.Relations)
                    {
                        FieldDetail source = null;
                        FieldDetail target = null;
                        foreach (var section in SelectedFormStructure.SectionList)
                        {
                            if (section.UniqueId.ToString() == item.SourceSectionId)
                            {
                                foreach (var field in section.FieldList)
                                {
                                    if (field.UniqueId.ToString() == item.SourceFieldId)
                                    {
                                        source = field;
                                        source.Parent = section;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        foreach (var section in SelectedFormStructure.SectionList)
                        {
                            if (section.UniqueId.ToString() == item.TargetSectionId)
                            {
                                foreach (var field in section.FieldList)
                                {
                                    if (field.UniqueId.ToString() == item.TargetFieldId)
                                    {
                                        target = field;
                                        target.Parent = section;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        if (source != null && target != null)
                        {
                            item.SourceField = source;
                            item.TargetField = target;
                            item.SourceSection = source.Parent.Title;
                            item.TargetSection = target.Parent.Title;
                            ((FrameworkElement)target.LabelControl).Visibility = ((FrameworkElement)target.Control).Visibility = Visibility.Collapsed;



                            target.RelationCondition = item.ExpCondition;
                            if (source.RelationalFieldList == null)
                                source.RelationalFieldList = new List<FieldDetail>();
                            source.RelationalFieldList.Add(target);
                            if (source.Settings is DecimalFieldSetting)
                            {
                                if (source.Control is StackPanel)
                                {
                                    decUnit_LostFocus(((StackPanel)source.Control).Children[0], new RoutedEventArgs());
                                }
                                else
                                {
                                    decUnit_LostFocus(source.Control, new RoutedEventArgs());
                                }
                            }
                            if (source.Settings is BooleanFieldSetting)
                            {
                                chk_Click(source.Control, new RoutedEventArgs());
                            }
                            if (source.Settings is ListFieldSetting)
                            {
                                if (source.Control is ComboBox)
                                {
                                    cmbList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<DynamicListItem>(), new List<DynamicListItem>()));
                                }
                            }
                            if (source.Settings is AutomatedListFieldSetting)
                            {
                                if (((AutomatedListFieldSetting)source.Settings).ControlType == AutoListControlType.ComboBox)
                                {
                                    AutoComboList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<MasterListItem>(), new List<MasterListItem>()));
                                }
                                if (((AutomatedListFieldSetting)source.Settings).ControlType == AutoListControlType.ListBox)
                                {
                                    if (((AutomatedListFieldSetting)source.Settings).ChoiceMode == SelectionMode.Single)
                                    {
                                        AutoComboList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<MasterListItem>(), new List<MasterListItem>()));
                                    }
                                    if (((AutomatedListFieldSetting)source.Settings).ChoiceMode == SelectionMode.Multiples)
                                    {
                                        lbAutoList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<MasterListItem>(), new List<MasterListItem>()));
                                    }
                                }
                                if (((AutomatedListFieldSetting)source.Settings).ControlType == AutoListControlType.CheckListBox)
                                {
                                    CLBCI_chkItemClicked(source.Control, new RoutedEventArgs());
                                }
                            }
                            if (source.Settings is InvestigationFieldSetting)
                            {
                                if (((InvestigationFieldSetting)source.Settings).ControlType == AutoListControlType.ComboBox)
                                {
                                    InvestAutoComboList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<MasterListItem>(), new List<MasterListItem>()));
                                }
                                if (((InvestigationFieldSetting)source.Settings).ControlType == AutoListControlType.ListBox)
                                {
                                    if (((InvestigationFieldSetting)source.Settings).ChoiceMode == SelectionMode.Single)
                                    {
                                        InvestAutoComboList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<MasterListItem>(), new List<MasterListItem>()));
                                    }
                                    if (((InvestigationFieldSetting)source.Settings).ChoiceMode == SelectionMode.Multiples)
                                    {
                                        lbInvestAutoList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<MasterListItem>(), new List<MasterListItem>()));
                                    }
                                }
                                if (((InvestigationFieldSetting)source.Settings).ControlType == AutoListControlType.CheckListBox)
                                {
                                    InvestCLBCI_chkItemClicked(source.Control, new RoutedEventArgs());
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (SelectedHistoryStructure != null && SelectedHistoryStructure.SectionList != null && SelectedHistoryStructure.Relations != null && SelectedHistoryStructure.Relations.Count > 0)
                {
                    foreach (var item in SelectedHistoryStructure.Relations)
                    {
                        FieldDetail source = null;
                        FieldDetail target = null;
                        foreach (var section in SelectedHistoryStructure.SectionList)
                        {
                            if (section.UniqueId.ToString() == item.SourceSectionId)
                            {
                                foreach (var field in section.FieldList)
                                {
                                    if (field.UniqueId.ToString() == item.SourceFieldId)
                                    {
                                        source = field;
                                        source.Parent = section;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        foreach (var section in SelectedHistoryStructure.SectionList)
                        {
                            if (section.UniqueId.ToString() == item.TargetSectionId)
                            {
                                foreach (var field in section.FieldList)
                                {
                                    if (field.UniqueId.ToString() == item.TargetFieldId)
                                    {
                                        target = field;
                                        target.Parent = section;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        if (source != null && target != null)
                        {
                            item.SourceField = source;
                            item.TargetField = target;
                            item.SourceSection = source.Parent.Title;
                            item.TargetSection = target.Parent.Title;
                            ((FrameworkElement)target.LabelControl).Visibility = ((FrameworkElement)target.Control).Visibility = Visibility.Collapsed;



                            target.RelationCondition = item.ExpCondition;
                            if (source.RelationalFieldList == null)
                                source.RelationalFieldList = new List<FieldDetail>();
                            source.RelationalFieldList.Add(target);
                            if (source.Settings is DecimalFieldSetting)
                            {
                                if (source.Control is StackPanel)
                                {
                                    decUnit_LostFocus(((StackPanel)source.Control).Children[0], new RoutedEventArgs());
                                }
                                else
                                {
                                    decUnit_LostFocus(source.Control, new RoutedEventArgs());
                                }
                            }
                            if (source.Settings is BooleanFieldSetting)
                            {
                                chk_Click(source.Control, new RoutedEventArgs());
                            }
                            if (source.Settings is ListFieldSetting)
                            {
                                if (source.Control is ComboBox)
                                {
                                    cmbList_SelectionChanged(source.Control, new SelectionChangedEventArgs(new List<DynamicListItem>(), new List<DynamicListItem>()));
                                }
                            }
                        }
                    }
                }
            }
        }

        private void MapPCR()
        {
            objPCR = null;
            objPCR = new clsPCRVO();
            PrescriptionList = null;
            PrescriptionList = new List<clsPatientPrescriptionDetailVO>();

            ServiceList = null;
            ServiceList = new List<clsDoctorSuggestedServiceDetailVO>();

            if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null && SelectedFormStructure.PCRRelations != null && SelectedFormStructure.PCRRelations.Count > 0)
            {
                foreach (var item in SelectedFormStructure.PCRRelations)
                {
                    MasterListItem source = null;
                    FieldDetail target = null;
                    source = item.SourceField;

                    foreach (var section in SelectedFormStructure.SectionList)
                    {
                        if (section.UniqueId.ToString() == item.TargetSectionId)
                        {
                            foreach (var field in section.FieldList)
                            {
                                if (field.UniqueId.ToString() == item.TargetFieldId)
                                {
                                    target = field;
                                    target.Parent = section;
                                    break;
                                }
                            }
                            break;
                        }
                    }

                    if (source != null && target != null)
                    {
                        item.TargetField = target;
                        item.TargetSection = target.Parent.Title;

                        string tempStr = "";
                        DateTime? tempDt = null;
                        //Consultation
                        //Follow Up Consultation
                        //    Medication
                        if ((CurrentVisit.VisitTypeID == 1 && ((SectionDetail)target.Parent).Tab == "Consultation") || (CurrentVisit.VisitTypeID != 1 && ((SectionDetail)target.Parent).Tab == "Follow Up Consultation") || (((SectionDetail)target.Parent).Tab == "Medication"))
                        {
                            switch (target.DataType.Id)
                            {
                                case 1:
                                    tempStr = ((TextFieldSetting)target.Settings).Value;
                                    if (source.ID == 6 && tempStr != null && tempStr != "")
                                    {
                                        ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                        {
                                            ServiceID = 0,
                                            ServiceName = tempStr,
                                            IsOther = true,
                                            Reason = "",
                                        });
                                    }
                                    break;
                                case 2:
                                    if (((BooleanFieldSetting)target.Settings).Value && ((FrameworkElement)target.Control).Visibility == Visibility.Visible)
                                    {
                                        tempStr = target.Title;
                                        if (source.ID == 6 && tempStr != null && tempStr != "")
                                        {
                                            ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                            {
                                                ServiceID = 0,
                                                ServiceName = tempStr,
                                                IsOther = true,
                                                Reason = "",
                                            });
                                        }
                                    }
                                    break;
                                case 3:
                                    tempDt = ((DateFieldSetting)target.Settings).Date;
                                    break;
                                case 4:
                                    ListFieldSetting listSetting = (ListFieldSetting)target.Settings;
                                    switch (listSetting.ChoiceMode)
                                    {
                                        case SelectionMode.Single:
                                            switch (listSetting.ControlType)
                                            {
                                                case ListControlType.ComboBox:
                                                    if (listSetting.SelectedItem != null)
                                                        tempStr = ((DynamicListItem)listSetting.SelectedItem).Title;
                                                    break;
                                            }
                                            break;
                                        case SelectionMode.Multiples:
                                            if (listSetting.SelectedItems != null && listSetting.SelectedItems.Count > 0)
                                            {
                                                foreach (var ob in listSetting.SelectedItems)
                                                {
                                                    if (ob != null)
                                                        tempStr = (tempStr == "" ? "" : (tempStr + ",\t")) + ((DynamicListItem)listSetting.SelectedItem).Title;
                                                }
                                            }
                                            break;
                                    }
                                    break;
                                case 5:
                                    if (((DecimalFieldSetting)target.Settings).Value != null)
                                    {
                                        tempStr = target.Title + ": " + ((DecimalFieldSetting)target.Settings).Value.ToString();
                                        tempStr = ((DecimalFieldSetting)target.Settings).Unit != null ? tempStr + " " + ((DecimalFieldSetting)target.Settings).Unit : tempStr;
                                    }
                                    else
                                    {
                                        tempStr = target.Title + ":N/A";
                                    }

                                    break;
                                case 6:
                                    tempStr = ((HyperlinkFieldSetting)target.Settings).Url;
                                    break;
                                case 7:
                                    //Header
                                    break;
                                case 8:
                                    LookUpFieldSetting LookUpSetting = ((LookUpFieldSetting)target.Settings);

                                    switch (LookUpSetting.ChoiceMode)
                                    {
                                        case SelectionMode.Single:
                                            if (LookUpSetting.SelectedItem != null)
                                            {
                                                tempStr = ((DynamicListItem)LookUpSetting.SelectedItem).Title;
                                            }
                                            if (LookUpSetting.IsAlternateText == true && LookUpSetting.AlternateText != null && LookUpSetting.AlternateText != "")
                                                tempStr = (tempStr == "" ? "" : (tempStr + " OR ")) + LookUpSetting.AlternateText;
                                            break;
                                    }
                                    break;
                                case 9:
                                    MedicationFieldSetting medSetting = ((MedicationFieldSetting)target.Settings);
                                    for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                    {
                                        if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                        {
                                            PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                                            {
                                                DrugID = (((Medication)medSetting.ItemsSource[i]).Drug.ID),
                                                Dose = (((Medication)medSetting.ItemsSource[i]).Dose),
                                                Route = ((Medication)medSetting.ItemsSource[i]).Route == null ? "" : ((Medication)medSetting.ItemsSource[i]).Route.Description,
                                                Frequency = ((Medication)medSetting.ItemsSource[i]).Frequency.ToString(),
                                                Days = (((Medication)medSetting.ItemsSource[i]).Day),
                                                Quantity = (((Medication)medSetting.ItemsSource[i]).Quantity),
                                                IsOther = false,
                                            });
                                        }
                                    }
                                    break;
                                case 10:
                                    // Follow Up Medaication
                                    break;
                                case 11:
                                    OtherInvestigationFieldSetting InvestSetting = (OtherInvestigationFieldSetting)target.Settings;
                                    for (int i = 0; i < InvestSetting.ItemsSource.Count; i++)
                                    {
                                        if (((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation != null && ((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation != "--Select--")
                                        {
                                            tempStr = (tempStr == "" ? "" : (tempStr + ",\t")) + ((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation.ToString();
                                            if (source.ID == 6 && tempStr != null && tempStr != "")
                                            {
                                                ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                                {
                                                    ServiceID = 0,
                                                    ServiceName = tempStr,
                                                    IsOther = true,
                                                    Reason = "",
                                                });
                                            }
                                        }
                                    }
                                    break;
                                case 12:
                                    ListOfCheckBoxesFieldSetting listSetting1 = (ListOfCheckBoxesFieldSetting)target.Settings;
                                    for (int i = 0; i < listSetting1.ItemsSource.Count; i++)
                                    {
                                        if (listSetting1.SelectedItems[i])
                                        {
                                            tempStr = (tempStr == "" ? "" : (tempStr + ",\t")) + (listSetting1.ItemsSource[i]).ToString();

                                            if (listSetting1.ListType == "Nutrition List" && (listSetting1.ItemsSource[i]) == "Other" && listSetting1.OtherText != null)
                                                tempStr = tempStr + ":" + listSetting1.OtherText;
                                        }
                                    }
                                    break;
                                case 13:
                                    AutomatedListFieldSetting AutolistSetting = ((AutomatedListFieldSetting)target.Settings);
                                    switch (AutolistSetting.ControlType)
                                    {
                                        case AutoListControlType.ComboBox:
                                            if (AutolistSetting.SelectedItem != null)
                                            {
                                                tempStr = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                            }
                                            break;
                                        case AutoListControlType.ListBox:
                                            switch (AutolistSetting.ChoiceMode)
                                            {
                                                case SelectionMode.Single:
                                                    if (AutolistSetting.SelectedItem != null)
                                                    {
                                                        tempStr = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                    }
                                                    break;
                                                case SelectionMode.Multiples:
                                                    if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                                    {
                                                        foreach (var obList in AutolistSetting.SelectedItems)
                                                            tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + obList.Description.ToString();
                                                    }
                                                    break;
                                            }
                                            break;
                                        case AutoListControlType.CheckListBox:
                                            for (int k = 0; k < AutolistSetting.ItemSource.Count; k++)
                                            {
                                                if (((MasterListItem)AutolistSetting.ItemSource[k]).Status)
                                                {
                                                    tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + ((MasterListItem)AutolistSetting.ItemSource[k]).Description.ToString();
                                                }
                                            }
                                            break;
                                    }
                                    break;
                                case 14:
                                    OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)target.Settings);
                                    for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                    {
                                        if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null)
                                        {
                                            PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                                            {
                                                DrugID = 0,
                                                DrugName = ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug.ToString(),
                                                Dose = (((OtherMedication)OthermedSetting.ItemsSource[i]).Dose),
                                                Route = ((OtherMedication)OthermedSetting.ItemsSource[i]).Route == null ? "" : ((OtherMedication)OthermedSetting.ItemsSource[i]).Route.Description,
                                                Frequency = ((OtherMedication)OthermedSetting.ItemsSource[i]).Frequency.ToString(),
                                                Days = (((OtherMedication)OthermedSetting.ItemsSource[i]).Day),
                                                Quantity = (((OtherMedication)OthermedSetting.ItemsSource[i]).Quantity),
                                                IsOther = true,
                                                Reason = (((OtherMedication)OthermedSetting.ItemsSource[i]).Reason),
                                            });
                                        }
                                    }
                                    break;
                                case 15:
                                    InvestigationFieldSetting InvestlistSetting = ((InvestigationFieldSetting)target.Settings);
                                    switch (InvestlistSetting.ControlType)
                                    {
                                        case AutoListControlType.ComboBox:
                                            if (InvestlistSetting.SelectedItem != null)
                                            {
                                                tempStr = ((MasterListItem)InvestlistSetting.SelectedItem).Description.ToString();
                                                ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                                {
                                                    ServiceID = ((MasterListItem)InvestlistSetting.SelectedItem).ID,
                                                    ServiceName = ((MasterListItem)InvestlistSetting.SelectedItem).Description.ToString(),
                                                    IsOther = false,
                                                    Reason = "",
                                                });
                                            }
                                            break;
                                        case AutoListControlType.ListBox:
                                            switch (InvestlistSetting.ChoiceMode)
                                            {
                                                case SelectionMode.Single:
                                                    if (InvestlistSetting.SelectedItem != null)
                                                    {
                                                        tempStr = ((MasterListItem)InvestlistSetting.SelectedItem).Description.ToString();
                                                        ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                                        {
                                                            ServiceID = ((MasterListItem)InvestlistSetting.SelectedItem).ID,
                                                            ServiceName = ((MasterListItem)InvestlistSetting.SelectedItem).Description.ToString(),
                                                            IsOther = false,
                                                            Reason = "",
                                                        });
                                                    }
                                                    break;
                                                case SelectionMode.Multiples:
                                                    if (InvestlistSetting.SelectedItems != null && InvestlistSetting.SelectedItems.Count > 0)
                                                    {
                                                        foreach (var obList in InvestlistSetting.SelectedItems)
                                                        {
                                                            tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + obList.Description.ToString();
                                                            ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                                            {
                                                                ServiceID = obList.ID,
                                                                ServiceName = obList.Description.ToString(),
                                                                IsOther = false,
                                                                Reason = "",
                                                            });
                                                        }
                                                    }
                                                    break;
                                            }
                                            break;
                                        case AutoListControlType.CheckListBox:
                                            for (int k = 0; k < InvestlistSetting.ItemSource.Count; k++)
                                            {
                                                if (((MasterListItem)InvestlistSetting.ItemSource[k]).Status)
                                                {
                                                    tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + ((MasterListItem)InvestlistSetting.ItemSource[k]).Description.ToString();
                                                    ServiceList.Add(new clsDoctorSuggestedServiceDetailVO()
                                                    {
                                                        ServiceID = ((MasterListItem)InvestlistSetting.ItemSource[k]).ID,
                                                        ServiceName = ((MasterListItem)InvestlistSetting.ItemSource[k]).Description.ToString(),
                                                        IsOther = false,
                                                        Reason = "",
                                                    });
                                                }
                                            }
                                            break;
                                    }
                                    break;
                            }
                        }

                        switch (source.ID)
                        {
                            case 1:
                                objPCR.ComplaintReported = ((objPCR.ComplaintReported == null || objPCR.ComplaintReported == "") ? "" : (objPCR.ComplaintReported + ", ")) + tempStr;
                                break;
                            case 2:
                                objPCR.ChiefComplaints = ((objPCR.ChiefComplaints == null || objPCR.ChiefComplaints == "") ? "" : (objPCR.ChiefComplaints + ", ")) + tempStr;
                                break;
                            case 3:
                                objPCR.PastHistory = ((objPCR.PastHistory == null || objPCR.PastHistory == "") ? "" : (objPCR.PastHistory + ", ")) + tempStr;
                                break;
                            case 4:
                                objPCR.DrugHistory = ((objPCR.DrugHistory == null || objPCR.DrugHistory == "") ? "" : (objPCR.DrugHistory + ", ")) + tempStr;
                                break;
                            case 5:
                                objPCR.Allergies = ((objPCR.Allergies == null || objPCR.Allergies == "") ? "" : (objPCR.Allergies + ", ")) + tempStr;
                                break;
                            case 6:
                                objPCR.Investigations = ((objPCR.Investigations == null || objPCR.Investigations == "") ? "" : (objPCR.Investigations + ", ")) + tempStr;
                                break;
                            case 7:
                                objPCR.PovisionalDiagnosis = ((objPCR.PovisionalDiagnosis == null || objPCR.PovisionalDiagnosis == "") ? "" : (objPCR.PovisionalDiagnosis + ", ")) + tempStr;
                                break;
                            case 8:
                                objPCR.FinalDiagnosis = ((objPCR.FinalDiagnosis == null || objPCR.FinalDiagnosis == "") ? "" : (objPCR.FinalDiagnosis + ", ")) + tempStr;
                                break;
                            case 9:
                                objPCR.Hydration = ((objPCR.Hydration == null || objPCR.Hydration == "") ? "" : (objPCR.Hydration + ", ")) + tempStr;
                                break;
                            case 10:
                                objPCR.IVHydration4 = ((objPCR.IVHydration4 == null || objPCR.IVHydration4 == "") ? "" : (objPCR.IVHydration4 + ", ")) + tempStr;
                                break;
                            case 11:
                                objPCR.ZincSupplement = ((objPCR.ZincSupplement == null || objPCR.ZincSupplement == "") ? "" : (objPCR.ZincSupplement + ", ")) + tempStr;
                                break;
                            case 12:
                                objPCR.Nutritions = ((objPCR.Nutritions == null || objPCR.Nutritions == "") ? "" : (objPCR.Nutritions + ", ")) + tempStr;
                                break;
                            case 13:
                                //Medication
                                break;
                            case 14:
                                objPCR.AdvisoryAttached = ((objPCR.AdvisoryAttached == null || objPCR.AdvisoryAttached == "") ? "" : (objPCR.AdvisoryAttached + ", ")) + tempStr;
                                break;
                            case 15:
                                objPCR.WhenToVisitHospital = ((objPCR.WhenToVisitHospital == null || objPCR.WhenToVisitHospital == "") ? "" : (objPCR.WhenToVisitHospital + ", ")) + tempStr;
                                break;
                            case 16:
                                objPCR.SpecificInstructions = ((objPCR.SpecificInstructions == null || objPCR.SpecificInstructions == "") ? "" : (objPCR.SpecificInstructions + ", ")) + tempStr;
                                break;
                            case 17:
                                if (tempDt != null)
                                    objPCR.FollowUpDate = tempDt;
                                break;
                            case 18:
                                objPCR.FollowUpAt = ((objPCR.FollowUpAt == null || objPCR.FollowUpAt == "") ? "" : (objPCR.FollowUpAt + ", ")) + tempStr;
                                break;
                            case 19:
                                objPCR.ReferralTo = ((objPCR.ReferralTo == null || objPCR.ReferralTo == "") ? "" : (objPCR.ReferralTo + ", ")) + tempStr;
                                break;
                        }
                    }
                }
            }
        }

        private void MapCaseReferral()
        {
            objCaseReferral = null;
            objCaseReferral = new clsCaseReferralVO();
            if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null && SelectedFormStructure.CaseReferralRelations != null && SelectedFormStructure.CaseReferralRelations.Count > 0)
            {
                foreach (var item in SelectedFormStructure.CaseReferralRelations)
                {
                    MasterListItem source = null;
                    FieldDetail target = null;
                    source = item.SourceField;

                    foreach (var section in SelectedFormStructure.SectionList)
                    {
                        if (section.UniqueId.ToString() == item.TargetSectionId)
                        {
                            foreach (var field in section.FieldList)
                            {
                                if (field.UniqueId.ToString() == item.TargetFieldId)
                                {
                                    target = field;
                                    target.Parent = section;
                                    break;
                                }
                            }
                            break;
                        }
                    }

                    if (source != null && target != null)
                    {
                        item.TargetField = target;
                        item.TargetSection = target.Parent.Title;

                        string tempStr = "";
                        DateTime? tempDt = null;
                        long tempId = 0;

                        if ((CurrentVisit.VisitTypeID == 1 && ((SectionDetail)target.Parent).Tab == "Consultation") || (CurrentVisit.VisitTypeID != 1 && ((SectionDetail)target.Parent).Tab == "Follow Up Consultation") || (((SectionDetail)target.Parent).Tab == "Medication"))
                        {
                            switch (target.DataType.Id)
                            {
                                case 1:
                                    tempStr = ((TextFieldSetting)target.Settings).Value;
                                    break;
                                case 2:
                                    if (((BooleanFieldSetting)target.Settings).Value && ((FrameworkElement)target.Control).Visibility == Visibility.Visible)
                                        tempStr = target.Title;
                                    break;
                                case 3:
                                    tempDt = ((DateFieldSetting)target.Settings).Date;
                                    break;
                                case 4:
                                    ListFieldSetting listSetting = (ListFieldSetting)target.Settings;
                                    switch (listSetting.ChoiceMode)
                                    {
                                        case SelectionMode.Single:
                                            switch (listSetting.ControlType)
                                            {
                                                case ListControlType.ComboBox:
                                                    if (listSetting.SelectedItem != null)
                                                        tempStr = ((DynamicListItem)listSetting.SelectedItem).Title;
                                                    break;
                                            }
                                            break;
                                        case SelectionMode.Multiples:
                                            if (listSetting.SelectedItems != null && listSetting.SelectedItems.Count > 0)
                                            {
                                                foreach (var ob in listSetting.SelectedItems)
                                                {
                                                    if (ob != null)
                                                        tempStr = (tempStr == "" ? "" : (tempStr + ",\t")) + ((DynamicListItem)listSetting.SelectedItem).Title;
                                                }
                                            }
                                            break;
                                    }
                                    break;
                                case 5:
                                    if (((DecimalFieldSetting)target.Settings).Value != null)
                                    {
                                        tempStr = target.Title + ": " + ((DecimalFieldSetting)target.Settings).Value.ToString();
                                        tempStr = ((DecimalFieldSetting)target.Settings).Unit != null ? tempStr + " " + ((DecimalFieldSetting)target.Settings).Unit : tempStr;
                                    }
                                    else
                                    {
                                        tempStr = target.Title + ":N/A";
                                    }
                                    break;
                                case 6:
                                    tempStr = ((HyperlinkFieldSetting)target.Settings).Url;
                                    break;
                                case 7:
                                    //Header
                                    break;
                                case 8:
                                    LookUpFieldSetting LookUpSetting = ((LookUpFieldSetting)target.Settings);

                                    switch (LookUpSetting.ChoiceMode)
                                    {
                                        case SelectionMode.Single:
                                            if (LookUpSetting.SelectedItem != null)
                                            {
                                                tempStr = ((DynamicListItem)LookUpSetting.SelectedItem).Title;
                                            }
                                            if (LookUpSetting.IsAlternateText == true && LookUpSetting.AlternateText != null && LookUpSetting.AlternateText != "")
                                                tempStr = (tempStr == "" ? "" : (tempStr + " OR ")) + LookUpSetting.AlternateText;
                                            break;
                                    }
                                    break;
                                case 9:
                                    //Medication
                                    break;
                                case 10:
                                    // Follow Up Medaication
                                    break;
                                case 11:
                                    OtherInvestigationFieldSetting InvestSetting = (OtherInvestigationFieldSetting)target.Settings;
                                    for (int i = 0; i < InvestSetting.ItemsSource.Count; i++)
                                    {
                                        if (((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation != null && ((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation != "--Select--")
                                        {
                                            tempStr = (tempStr == "" ? "" : (tempStr + ",\t")) + ((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation.ToString();
                                        }
                                    }
                                    break;
                                case 12:
                                    ListOfCheckBoxesFieldSetting listSetting1 = (ListOfCheckBoxesFieldSetting)target.Settings;
                                    for (int i = 0; i < listSetting1.ItemsSource.Count; i++)
                                    {
                                        if (listSetting1.SelectedItems[i])
                                        {
                                            tempStr = (tempStr == "" ? "" : (tempStr + ",\t")) + (listSetting1.ItemsSource[i]).ToString();
                                        }
                                    }
                                    break;
                                case 13:
                                    AutomatedListFieldSetting AutolistSetting = ((AutomatedListFieldSetting)target.Settings);
                                    switch (AutolistSetting.ControlType)
                                    {
                                        case AutoListControlType.ComboBox:
                                            if (AutolistSetting.SelectedItem != null)
                                            {
                                                tempStr = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                tempId = ((MasterListItem)AutolistSetting.SelectedItem).ID;
                                            }
                                            break;
                                        case AutoListControlType.ListBox:
                                            switch (AutolistSetting.ChoiceMode)
                                            {
                                                case SelectionMode.Single:
                                                    if (AutolistSetting.SelectedItem != null)
                                                    {
                                                        tempStr = ((MasterListItem)AutolistSetting.SelectedItem).Description.ToString();
                                                        tempId = ((MasterListItem)AutolistSetting.SelectedItem).ID;
                                                    }
                                                    break;
                                                case SelectionMode.Multiples:
                                                    if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                                    {
                                                        foreach (var obList in AutolistSetting.SelectedItems)
                                                            tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + obList.Description.ToString();
                                                    }
                                                    break;
                                            }
                                            break;
                                        case AutoListControlType.CheckListBox:
                                            for (int k = 0; k < AutolistSetting.ItemSource.Count; k++)
                                            {
                                                if (((MasterListItem)AutolistSetting.ItemSource[k]).Status)
                                                {
                                                    tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + ((MasterListItem)AutolistSetting.ItemSource[k]).Description.ToString();
                                                }
                                            }
                                            break;
                                    }
                                    break;
                                case 14:
                                    // Other Medication
                                    break;
                                case 15:
                                    InvestigationFieldSetting InvestlistSetting = ((InvestigationFieldSetting)target.Settings);
                                    switch (InvestlistSetting.ControlType)
                                    {
                                        case AutoListControlType.ComboBox:
                                            if (InvestlistSetting.SelectedItem != null)
                                            {
                                                tempStr = ((MasterListItem)InvestlistSetting.SelectedItem).Description.ToString();
                                            }
                                            break;
                                        case AutoListControlType.ListBox:
                                            switch (InvestlistSetting.ChoiceMode)
                                            {
                                                case SelectionMode.Single:
                                                    if (InvestlistSetting.SelectedItem != null)
                                                    {
                                                        tempStr = ((MasterListItem)InvestlistSetting.SelectedItem).Description.ToString();
                                                    }
                                                    break;
                                                case SelectionMode.Multiples:
                                                    if (InvestlistSetting.SelectedItems != null && InvestlistSetting.SelectedItems.Count > 0)
                                                    {
                                                        foreach (var obList in InvestlistSetting.SelectedItems)
                                                            tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + obList.Description.ToString();
                                                    }
                                                    break;
                                            }
                                            break;
                                        case AutoListControlType.CheckListBox:
                                            for (int k = 0; k < InvestlistSetting.ItemSource.Count; k++)
                                            {
                                                if (((MasterListItem)InvestlistSetting.ItemSource[k]).Status)
                                                {
                                                    tempStr = (tempStr == "" ? "" : (tempStr + ", ")) + ((MasterListItem)InvestlistSetting.ItemSource[k]).Description.ToString();
                                                }
                                            }
                                            break;
                                    }
                                    break;
                            }
                        }
                        switch (source.ID)
                        {
                            case 1:
                                objCaseReferral.ReferredToDoctorID = tempId;//((objPCR.ComplaintReported == null || objPCR.ComplaintReported == "") ? "" : (objPCR.ComplaintReported + ", ")) + tempStr;
                                break;
                            case 2:
                                objCaseReferral.ReferredToClinicID = tempId;//((objPCR.ChiefComplaints == null || objPCR.ChiefComplaints == "") ? "" : (objPCR.ChiefComplaints + ", ")) + tempStr;
                                break;
                            case 3:
                                objCaseReferral.ReferredToMobile = ((objCaseReferral.ReferredToMobile == null || objCaseReferral.ReferredToMobile == "") ? "" : (objCaseReferral.ReferredToMobile + ", ")) + tempStr;
                                break;
                            case 4:
                                objCaseReferral.ProvisionalDiagnosis = ((objCaseReferral.ProvisionalDiagnosis == null || objCaseReferral.ProvisionalDiagnosis == "") ? "" : (objCaseReferral.ProvisionalDiagnosis + ", ")) + tempStr;
                                break;
                            case 5:
                                objCaseReferral.ChiefComplaints = ((objCaseReferral.ChiefComplaints == null || objCaseReferral.ChiefComplaints == "") ? "" : (objCaseReferral.ChiefComplaints + ", ")) + tempStr;
                                break;
                            case 6:
                                objCaseReferral.Summary = ((objCaseReferral.Summary == null || objCaseReferral.Summary == "") ? "" : (objCaseReferral.Summary + ", ")) + tempStr;
                                break;
                            case 7:
                                objCaseReferral.Observations = ((objCaseReferral.Observations == null || objCaseReferral.Observations == "") ? "" : (objCaseReferral.Observations + ", ")) + tempStr;
                                break;
                        }
                    }
                }
            }
        }
       
        private void GenratePreview()
        {
            HistoryForm.RowDefinitions.Clear();
            HistoryForm.Children.Clear();

            Form.RowDefinitions.Clear();
            Form.Children.Clear();

            if (((TabItem)FormTab.SelectedItem).Name == "tabHistory")
            {
                if (SelectedHistoryStructure != null && SelectedHistoryStructure.SectionList != null)
                {
                    foreach (var item in SelectedHistoryStructure.SectionList)
                    {
                        AddNodeItems(item);
                    }
                }
            }
            else
            {
                if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null)
                {
                    foreach (var item in SelectedFormStructure.SectionList)
                    {
                        AddNodeItems(item);
                    }


                    //TextBox txtWeight = (TextBox)Form.FindName("Weight");
                    //decUnit_LostFocus(txtWeight, new RoutedEventArgs());

                    //TextBox txtHeight = (TextBox)Form.FindName("Height");
                    //decUnit_LostFocus(txtHeight, new RoutedEventArgs());

                    //ComboBox cmbHydr = (ComboBox)Form.FindName("HydrationStatus");
                    //cmbList_SelectionChanged(cmbHydr,new SelectionChangedEventArgs(new List<DynamicListItem>(),new List<DynamicListItem>()));

                    //ComboBox cmbProviDiag = (ComboBox)Form.FindName("ProvisionalDiagnosis");
                    //cmbList_SelectionChanged(cmbProviDiag, new SelectionChangedEventArgs(new List<DynamicListItem>(), new List<DynamicListItem>()));
                }
            }
            //if (Form.FindName("AlarmPersistentCoughCardiovascularDisease") is CheckBox)
            //{
            //    CheckBox chkAlarm = (CheckBox)Form.FindName("AlarmPersistentCoughCardiovascularDisease");                
            //    chkAlarm.Visibility = Visibility.Collapsed;
            //    ((FrameworkElement)((FieldDetail)chkAlarm.DataContext).LabelControl).Visibility = Visibility.Collapsed;
            //    chkAlarm.IsChecked = false;
            //}
            // Work for Setting Alarm Alerts on Bloodstools,Vomiting and urine OutPut
            #region (Hard Coded)
            ////Work for Setting Alarm Alerts on Bloodstools,Vomiting and urine OutPut

            ////IEnumerator<UIElement> lst = (IEnumerator<UIElement>)Form.Children.GetEnumerator();

            //int index = 0;
            //while (index < Form.Children.Count - 1)
            //{
            //    Grid sec = (Grid)Form.Children[index];
            //    if ((string)sec.Tag == "History")
            //    {
            //        Grid cont = (Grid)((Border)sec.Children[0]).Child;

            //        IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

            //        while (lst1.MoveNext())
            //        {
            //            if (lst1.Current is StackPanel)
            //            {
            //                StackPanel st = (StackPanel)lst1.Current;
            //                IEnumerator<UIElement> lst2 = (IEnumerator<UIElement>)st.Children.GetEnumerator();

            //                while (lst2.MoveNext())
            //                {
            //                    if (lst2.Current is RadioButton)
            //                    {

            //                        RadioButton r = (RadioButton)lst2.Current;

            //                        if (r.Name == "BloodStoolsYes")
            //                        {
            //                            r.Click += new RoutedEventHandler(r_Click);
            //                            if (r.IsChecked == true)
            //                            {
            //                                r.IsChecked = false;
            //                                r.IsChecked = true;
            //                            }
            //                        }
            //                        if (r.Name == "BloodStoolsNo")
            //                        {
            //                            r.Click += new RoutedEventHandler(r_Click);
            //                            if (r.IsChecked == true)
            //                            {
            //                                r.IsChecked = false;
            //                                r.IsChecked = true;
            //                            }
            //                        }
            //                        if (r.Name == "VomitingYes")
            //                        {
            //                            r.Click += new RoutedEventHandler(r_Click);
            //                            if (r.IsChecked == true)
            //                            {
            //                                r.IsChecked = false;
            //                                r.IsChecked = true;
            //                            }
            //                        }
            //                        if (r.Name == "VomitingNo")
            //                        {
            //                            r.Click += new RoutedEventHandler(r_Click);
            //                            if (r.IsChecked == true)
            //                            {
            //                                r.IsChecked = false;
            //                                r.IsChecked = true;
            //                            }
            //                        }
            //                    }
            //                }

            //            }
            //            if (lst1.Current is ComboBox)
            //            {
            //                ComboBox cb = (ComboBox)lst1.Current;

            //                if (cb.Name == "UrineOutput")
            //                {
            //                    cb.SelectionChanged += new SelectionChangedEventHandler(cb_SelectionChanged);

            //                    ListFieldSetting listSetting = ((ListFieldSetting)((FieldDetail)cb.DataContext).Settings);

            //                    if (listSetting.SelectedItem != null)
            //                        listSetting.SelectedItem = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                }
            //            }
            //        }
            //    }
            //    index++;
            //}


            #endregion
        }

        #region Hard Coded
        //void cb_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    //throw new NotImplementedException();


        //    //IEnumerator<UIElement> list = (IEnumerator<UIElement>)Form.Children.GetEnumerator();
        //    ComboBox cb = (ComboBox)sender;
        //    if (cb.SelectedIndex == 2)
        //    {
        //        int i = 0;
        //        while (i < Form.Children.Count)
        //        {
        //            Grid sec = (Grid)Form.Children[i];
        //            if ((string)sec.Tag == "Alarm Features")
        //            {
        //                Grid cont = (Grid)((Border)sec.Children[0]).Child;
        //                IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

        //                while (lst1.MoveNext())
        //                {
        //                    if (lst1.Current is CheckBox)
        //                    {
        //                        CheckBox chk = (CheckBox)lst1.Current;
        //                        if (chk.Name == "ChkAlarm5")
        //                        {
        //                            chk.IsChecked = true;
        //                        }
        //                    }
        //                    if (lst1.Current is TextBox)
        //                    {
        //                        TextBox txtbx = (TextBox)lst1.Current;
        //                        if (txtbx.Name == "TxtAlarm6")
        //                        {
        //                            txtbx.Text = "Urine Absent Problem is Discovered.";

        //                        }

        //                    }
        //                }
        //            }
        //            i++;
        //        }
        //    }

        //    if (cb.SelectedIndex != 2)
        //    {
        //        int i = 0;
        //        while (i < Form.Children.Count)
        //        {
        //            Grid sec = (Grid)Form.Children[i];
        //            if ((string)sec.Tag == "Alarm Features")
        //            {
        //                Grid cont = (Grid)((Border)sec.Children[0]).Child;
        //                IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

        //                while (lst1.MoveNext())
        //                {
        //                    if (lst1.Current is CheckBox)
        //                    {
        //                        CheckBox chk = (CheckBox)lst1.Current;
        //                        if (chk.Name == "ChkAlarm5")
        //                        {
        //                            chk.IsChecked = false;
        //                        }
        //                    }
        //                    if (lst1.Current is TextBox)
        //                    {
        //                        TextBox txtbx = (TextBox)lst1.Current;
        //                        if (txtbx.Name == "TxtAlarm6")
        //                        {
        //                            txtbx.Text = "";

        //                        }

        //                    }
        //                }
        //            }
        //            i++;
        //        }
        //    }
        //}
        #endregion

        #region Hard Coded
        //void r_Click(object sender, RoutedEventArgs e)
        //{
        //    //throw new NotImplementedException();
        //    if (((RadioButton)e.OriginalSource).Name == "BloodStoolsYes")
        //    {
        //        //IEnumerator<UIElement> list = (IEnumerator<UIElement>)Form.Children.GetEnumerator();
        //        int i = 0;
        //        while (i < Form.Children.Count)
        //        {
        //            Grid sec = (Grid)Form.Children[i];
        //            if ((string)sec.Tag == "Alarm Features")
        //            {
        //                Grid cont = (Grid)((Border)sec.Children[0]).Child;
        //                IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

        //                while (lst1.MoveNext())
        //                {
        //                    if (lst1.Current is CheckBox)
        //                    {
        //                        CheckBox chk = (CheckBox)lst1.Current;
        //                        if (chk.Name == "ChkAlarm1")
        //                        {
        //                            chk.IsChecked = true;
        //                        }
        //                    }
        //                    if (lst1.Current is TextBox)
        //                    {
        //                        TextBox txtbx = (TextBox)lst1.Current;
        //                        if (txtbx.Name == "TxtAlarm2")
        //                        {
        //                            txtbx.Text = "Blood in stools is Discovered.";

        //                        }

        //                    }
        //                }
        //            }
        //            i++;
        //        }
        //    }
        //    if (((RadioButton)e.OriginalSource).Name == "BloodStoolsNo")
        //    {
        //        //IEnumerator<UIElement> list = (IEnumerator<UIElement>)Form.Children.GetEnumerator();
        //        int i = 0;
        //        while (i < Form.Children.Count)
        //        {
        //            Grid sec = (Grid)Form.Children[i];
        //            if ((string)sec.Tag == "Alarm Features")
        //            {
        //                Grid cont = (Grid)((Border)sec.Children[0]).Child;
        //                IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

        //                while (lst1.MoveNext())
        //                {
        //                    if (lst1.Current is CheckBox)
        //                    {
        //                        CheckBox chk = (CheckBox)lst1.Current;
        //                        if (chk.Name == "ChkAlarm1")
        //                        {
        //                            chk.IsChecked = false;
        //                        }
        //                    }
        //                    if (lst1.Current is TextBox)
        //                    {
        //                        TextBox txtbx = (TextBox)lst1.Current;
        //                        if (txtbx.Name == "TxtAlarm2")
        //                        {
        //                            txtbx.Text = "";

        //                        }

        //                    }
        //                }
        //            }
        //            i++;
        //        }
        //    }

        //    if (((RadioButton)e.OriginalSource).Name == "VomitingYes")
        //    {
        //        IEnumerator<UIElement> list = (IEnumerator<UIElement>)Form.Children.GetEnumerator();

        //        while (list.MoveNext())
        //        {
        //            Grid sec = (Grid)list.Current;
        //            if ((string)sec.Tag == "Alarm Features")
        //            {
        //                Grid cont = (Grid)((Border)sec.Children[0]).Child;
        //                IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

        //                while (lst1.MoveNext())
        //                {
        //                    if (lst1.Current is CheckBox)
        //                    {
        //                        CheckBox chk = (CheckBox)lst1.Current;
        //                        if (chk.Name == "ChkAlarm3")
        //                        {
        //                            chk.IsChecked = true;
        //                        }
        //                    }
        //                    if (lst1.Current is TextBox)
        //                    {
        //                        TextBox txtbx = (TextBox)lst1.Current;
        //                        if (txtbx.Name == "TxtAlarm4")
        //                        {
        //                            txtbx.Text = "Nausea & Vomoiting Problem is Discovered.";

        //                        }

        //                    }
        //                }
        //            }

        //        }
        //    }

        //    if (((RadioButton)e.OriginalSource).Name == "VomitingNo")
        //    {
        //        IEnumerator<UIElement> list = (IEnumerator<UIElement>)Form.Children.GetEnumerator();

        //        while (list.MoveNext())
        //        {
        //            Grid sec = (Grid)list.Current;
        //            if ((string)sec.Tag == "Alarm Features")
        //            {
        //                Grid cont = (Grid)((Border)sec.Children[0]).Child;
        //                IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

        //                while (lst1.MoveNext())
        //                {
        //                    if (lst1.Current is CheckBox)
        //                    {
        //                        CheckBox chk = (CheckBox)lst1.Current;
        //                        if (chk.Name == "ChkAlarm3")
        //                        {
        //                            chk.IsChecked = false;
        //                        }
        //                    }
        //                    if (lst1.Current is TextBox)
        //                    {
        //                        TextBox txtbx = (TextBox)lst1.Current;
        //                        if (txtbx.Name == "TxtAlarm4")
        //                        {
        //                            txtbx.Text = "";

        //                        }

        //                    }
        //                }
        //            }

        //        }
        //    }
        //}
        #endregion

        bool WritePerm = true;
        public void AddNodeItems(SectionDetail PItem)
        {
            RowDefinition Row = new RowDefinition();
            //Row.Height = new GridLength(23, GridUnitType.Auto);
            if (((TabItem)FormTab.SelectedItem).Name == "tabHistory")
            {
                HistoryForm.RowDefinitions.Add(Row);
            }
            else
            {
                Form.RowDefinitions.Add(Row);
            }
            Grid section = GetSectionLayout(PItem.Title);
            //if (PItem.IsToolTip == true)
            //{
            //    #region new added by harish
            //    ToolTip tt = new ToolTip();
            //    TextBlock tbl = new TextBlock();
            //    tbl.Text = PItem.ToolTipText;
            //    tbl.TextWrapping = TextWrapping.Wrap;
            //    tt.Content = tbl;
            //    ToolTipService.SetToolTip((Border)section.Children[1], tt);
            //    //tt.Placement = System.Windows.Controls.Primitives.PlacementMode.Mouse;
            //    #endregion
            //}

            if (PItem.IsToolTip == true)
            {
                #region new added by harish

                //TextBox tbl = new TextBox();
                //tbl.IsEnabled = false;
                //tbl.Text = PItem.ToolTipText;
                //tbl.TextWrapping = TextWrapping.Wrap;

                ((Border)section.Children[1]).DataContext = PItem.ToolTipText;
                ((Border)section.Children[1]).MouseEnter += new MouseEventHandler(FormDesigner_MouseEnter);

                //tt.Placement = System.Windows.Controls.Primitives.PlacementMode.Mouse;
                #endregion
            }

            if (Context == "TEMPLATE")
            {
            }
            else if (Context == "FEEDBACK")
            {
                //Commented on 20th June (To implement AllowClinicalTransaction functionality)
                //if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                //{
                //    WritePerm = false;
                //}
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                {
                    if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.AllowClinicalTransaction == true && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == CurrentVisit.UnitId)
                        WritePerm = true;
                    else
                    {
                        WritePerm = false;
                    }
                }
            }
            else if (SelectedUser != null || SelectedUser != "")
            {
                //String SelectedUser = (string)((ComboBoxItem)cmbUser.SelectedItem).Content;
                int i = 0;
                bool user = false;
                while (i < PItem.ReadPermission.Count)
                {
                    if (SelectedUser == PItem.ReadPermission[i])
                    {
                        user = true;
                    }
                    i++;
                }

                //if (user == false)
                //{
                //    section.Visibility = Visibility.Collapsed;
                //}


                if (((TabItem)FormTab.SelectedItem).Name == "tabHistory")
                {
                    if (PItem.Tab == "History")
                    {
                        if (user == true)
                        {
                            section.Visibility = Visibility.Visible;
                        }
                        else
                        {
                            section.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        section.Visibility = Visibility.Collapsed;
                    }
                }
                else if (((TabItem)FormTab.SelectedItem).Name == "tabConsultation")
                {
                    if (PItem.Tab == "Consultation")
                    {
                        if (user == true)
                        {
                            section.Visibility = Visibility.Visible;
                        }
                        else
                        {
                            section.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        section.Visibility = Visibility.Collapsed;
                    }
                }
                else if (((TabItem)FormTab.SelectedItem).Name == "tabFUConsultation")
                {
                    if (PItem.Tab == "Follow Up Consultation")
                    {
                        if (user == true)
                        {
                            section.Visibility = Visibility.Visible;
                        }
                        else
                        {
                            section.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        section.Visibility = Visibility.Collapsed;
                    }

                }
                else if (((TabItem)FormTab.SelectedItem).Name == "tabMedication")
                {
                    if (PItem.Tab == "Medication")
                    {
                        if (user == true)
                        {
                            section.Visibility = Visibility.Visible;
                        }
                        else
                        {
                            section.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        section.Visibility = Visibility.Collapsed;
                    }

                }

                WritePerm = false;
                i = 0;
                while (i < PItem.ReadWritePermission.Count)
                {
                    if (SelectedUser == PItem.ReadWritePermission[i])
                    {
                        WritePerm = true;
                    }
                    i++;
                }

                // Disable Consultation controls when VisitType is follow up

                if (CurrentVisit.VisitTypeID != 1 && PItem.Tab == "Consultation")
                {
                    WritePerm = true;
                }
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                {
                    if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.AllowClinicalTransaction == false || ((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID != CurrentVisit.UnitId)
                        WritePerm = true;
                }
            }

            #region Validate Section visibility according to user

            //if (cmbUser.SelectedItem != null)
            //{
            //    string selectedUser = (string)((ComboBoxItem)cmbUser.SelectedItem).Content;
            //    string sectionTag = (string)section.Tag;
            //    switch (selectedUser)
            //    {
            //        case "Admin":

            //            switch (sectionTag)
            //            {
            //                case "Physical Examination":
            //                    section.Visibility = Visibility.Visible;
            //                    break;

            //                default:
            //                    break;
            //            }
            //            break;

            //        case "Nurse":

            //            switch (sectionTag)
            //            {
            //                case "Physical Examination":
            //                    section.Visibility = Visibility.Collapsed;
            //                    break;

            //                default:
            //                    break;
            //            }

            //            break;
            //        case "Doctor":

            //            break;
            //        case "Front office":

            //            break;
            //        default:
            //            break;


            //    }
            //}
            #endregion


            Grid container = (Grid)((Border)section.Children[0]).Child;

            ColumnDefinition column1 = new ColumnDefinition();
            column1.Width = new GridLength(200, GridUnitType.Auto);
            ColumnDefinition column2 = new ColumnDefinition();
            //column1.Width = new GridLength(200, GridUnitType.Auto);
            container.ColumnDefinitions.Add(column1);
            container.ColumnDefinitions.Add(column2);

            if (((TabItem)FormTab.SelectedItem).Name == "tabHistory")
            {
                Grid.SetRow(section, HistoryForm.RowDefinitions.Count - 1);
                HistoryForm.Children.Add(section);
            }
            else
            {
                Grid.SetRow(section, Form.RowDefinitions.Count - 1);
                Form.Children.Add(section);
            }


            if (PItem.FieldList != null)
                foreach (var item in PItem.FieldList)
                {
                    item.Parent = PItem;
                    AddNodeItems(container, item, false);
                }
        }

        void FormDesigner_MouseEnter(object sender, MouseEventArgs e)
        {
            if (!p.IsOpen)
            {
                //((Border)((ScrollViewer)p.Child).Content).Child = null;
                TextBox tbl = new TextBox();
                tbl.IsEnabled = false;
                //tbl.Background = new SolidColorBrush(Colors.Yellow);
                tbl.Text = ((FrameworkElement)sender).DataContext.ToString();
                tbl.TextWrapping = TextWrapping.Wrap;
                ((Border)((ScrollViewer)p.Child).Content).Child = tbl;
                //((Border)((ScrollViewer)p.Child).Content).Child = (TextBox)((Border)sender).DataContext;
                GeneralTransform gt = ((Border)sender).TransformToVisual(Application.Current.RootVisual as UIElement);
                Point offset = gt.Transform(new Point(0, 0));
                double controlTop = offset.Y + ((Border)sender).ActualHeight;
                double controlLeft = offset.X;
                ((ScrollViewer)p.Child).MaxWidth = this.ActualWidth - controlLeft + 10;
                //((ScrollViewer)p.Child).MaxHeight = this.ActualHeight - controlTop + 10;
                ((ScrollViewer)p.Child).MaxHeight = (Application.Current.RootVisual as UIElement).DesiredSize.Height - controlTop - 10;

                p.VerticalOffset = controlTop;
                p.HorizontalOffset = controlLeft;
                p.IsOpen = true;
            }
        }

        bool ForFlag = false;
        bool FrequencyFlag = false;
        public void AddNodeItems(Grid Container, FieldDetail PItem, bool IdDependentField)
        {
            RowDefinition Row = new RowDefinition();
            Row.Height = new GridLength(23, GridUnitType.Auto);
            Container.RowDefinitions.Add(Row);
            TextBlock FTitle = new TextBlock();
            #region new added by harish
            FTitle.Tag = PItem.DataType.Id;
            //ToolTip tt = new ToolTip();
            //TextBlock tbl = new TextBlock();
            //tbl.Text = PItem.ToolTipText;
            //tbl.TextWrapping = TextWrapping.Wrap;
            //tt.Content = tbl;
            //tt.Placement = System.Windows.Controls.Primitives.PlacementMode.Mouse;
            #endregion
            FTitle.HorizontalAlignment = HorizontalAlignment.Right;
            FTitle.VerticalAlignment = VerticalAlignment.Center;
            FTitle.Margin = new Thickness(2);
            FTitle.Text = PItem.Title + (string.IsNullOrEmpty(PItem.Title) ? "" : " : ");
            if (PItem.DataType.Id != 7)
            {
                Grid.SetRow(FTitle, Container.RowDefinitions.Count - 1);
                Container.Children.Add(FTitle);
            }
            PItem.LabelControl = FTitle;
            switch (PItem.DataType.Id)
            {
                case 1:
                    TextBox Field = new TextBox();
                    #region Added By Harish
                    //if (PItem.IsToolTip == true)
                    //    ToolTipService.SetToolTip(Field, tt);

                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(Field, tt);
                        #region new added by harish
                        Field.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    Field.IsEnabled = WritePerm;
                    #region Hard coded
                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features")
                    //{
                    //    Field.Name = "TxtAlarm" + Container.RowDefinitions.Count;
                    //}
                    #endregion

                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                    {
                        #region for templateid = 2
                        if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Color/Consistency")
                            {
                                Field.Name = "ColorConsistency";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "Provisional Diagnosis")
                            {
                                Field.Name = "RMProvisionalDiagnosis";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "Chief Complaints")
                            {
                                Field.Name = "RMChiefComplaints";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "Specific Request")
                            {
                                Field.Name = "RMSpecificRequest";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Patient Complaint as reported")
                            {
                                Field.Name = "ComplaintReported";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Past Medical History" && PItem.Title == "Past Medical History")
                            {
                                Field.Name = "PastMedicalHistory";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Past Medical History" && PItem.Title == "Drug History")
                            {
                                Field.Name = "DrugHistory";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Examination" && PItem.Title == "Final Diagnosis")
                            {
                                Field.Name = "FinalDiagnosis";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional diagnosis summary" && PItem.Title == "Provisional Diagnosis")
                            {
                                Field.Name = "FollowUpProvisionalDiagnosis";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Status/Current Complaints" && PItem.Title == "Current Complaints")
                            {
                                Field.Name = "RCurrentComplaints";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Examination" && PItem.Title == "Examination")
                            {
                                Field.Name = "RExamination";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Management" && PItem.Title == "for")
                            {
                                if (!ForFlag)
                                {
                                    Field.Name = "FUMFor";
                                }
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Management" && PItem.Title == "Instructions")
                            {
                                if (!ForFlag)
                                {
                                    Field.Name = "FUMInstructions";
                                    ForFlag = true;
                                }
                            }
                        }
                        #endregion
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Other tests ")
                            {
                                Field.Name = "InvestOtherTests";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Other tests")
                            {
                                Field.Name = "InvestOtherTests";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Other investigations")
                            {
                                Field.Name = "InvestOtherinvestigations";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Other tests")
                            {
                                Field.Name = "InvestOtherTests";
                            }
                        }
                    }

                    Field.LostFocus += new RoutedEventHandler(TextField_LostFocus);
                    Field.GotFocus += new RoutedEventHandler(TextField_GotFocus);
                    Field.DataContext = PItem;
                    Binding binding = new Binding("Settings.Value");
                    binding.Mode = BindingMode.TwoWay;
                    Field.SetBinding(TextBox.TextProperty, binding);
                    Field.Margin = new Thickness(2);
                    Grid.SetRow(Field, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(Field, 1);
                    if (!(((TextFieldSetting)PItem.Settings).Mode))
                    {
                        Field.AcceptsReturn = true;
                        Field.Height = 60;
                        Field.VerticalScrollBarVisibility = ScrollBarVisibility.Visible;
                    }
                    if (IdDependentField)
                        FTitle.Visibility = Field.Visibility = Visibility.Collapsed;
                    PItem.Control = Field;
                    Container.Children.Add(Field);
                    break;
                case 2:
                    if ((((BooleanFieldSetting)PItem.Settings).Mode))
                    {
                        CheckBox chk = new CheckBox();
                        #region Added By Harish
                        if (PItem.IsToolTip == true)
                        {
                            //ToolTipService.SetToolTip(chk, tt);
                            #region new added by harish
                            chk.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                            #endregion
                        }
                        #endregion

                        if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                        {
                            if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "Stool M/E")
                                {
                                    chk.Name = "StoolME";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "Stool Culture")
                                {
                                    chk.Name = "StoolCulture";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "CBC")
                                {
                                    chk.Name = "CBC";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "BUN Creatinine")
                                {
                                    chk.Name = "BUNCreatinine";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "Serum electrolytes")
                                {
                                    chk.Name = "SerumElectro";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "X-Ray chest")
                                {
                                    chk.Name = "XRayChest";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "Blood gases")
                                {
                                    chk.Name = "BloodGases";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigation" && PItem.Title == "Ova / parasite test")
                                {
                                    chk.Name = "OvaParasiteTest";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Observation Protocol")
                                {
                                    chk.Name = "EMObservationProtocol";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "ORS advice")
                                {
                                    chk.Name = "EMORSAdvice";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Nutrition advice")
                                {
                                    chk.Name = "EMNutritionAdvice";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit clinic")
                                {
                                    chk.Name = "EMVisitClinic";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit hospital")
                                {
                                    chk.Name = "EMVisitHospital";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Tests conducted")
                                {
                                    chk.Name = "EMTestsConducted";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Medication explained")
                                {
                                    chk.Name = "EMMedicationExplained";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up visit discussed")
                                {
                                    chk.Name = "EMFollowUpVisitDiscussed";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "follow up/telephonic follow up scheduled")
                                {
                                    chk.Name = "EMFollowUpScheduled";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentation" && PItem.Title == "Heart burn")
                                {
                                    chk.Name = "PrsntHeartBurn";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Cough with GERD")
                                {
                                    chk.Name = "PDCoughWithGERD";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Acute cough")
                                {
                                    chk.Name = "PDAcuteCough";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Persistent cough")
                                {
                                    chk.Name = "PDPersistentCough";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Chronic cough ")
                                {
                                    chk.Name = "PDChronicCough";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Cough with rhinitis")
                                {
                                    chk.Name = "PDCoughWithRhinitis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Cough with post nasal drips")
                                {
                                    chk.Name = "PDCoughWithPostNasalDrips";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Cough with chest infection")
                                {
                                    chk.Name = "PDCoughWithChestInfection";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Cough with bronchitis/ asthma/COPD/pneumoconiosis ")
                                {
                                    chk.Name = "PDCoughWithBronchitisAsthmaCOPDpneumoconiosis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Tropical Eosinophilia ")
                                {
                                    chk.Name = "PDTropicalEosinophilia";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis " && PItem.Title == "Tuberculosis ")
                                {
                                    chk.Name = "PDTuberculosis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Runny nose / Rhinitis")
                                {
                                    chk.Name = "HistRunnyNoseRhinitis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == " Post nasal drip")
                                {
                                    chk.Name = "HistPostNasalDrip";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Risk Factors" && PItem.Title == "Cardiac problems (CHF)")
                                {
                                    chk.Name = "RiskCardiacProblemsCHF";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Persistent cough in patients with co-existing cardiovascular disease")
                                {
                                    chk.Name = "AlarmPersistentCoughCardiovascularDisease";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Respiratory ")
                                {
                                    chk.Name = "PERespiratory";
                                }
                                //else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Complete Blood Count (CBC)")
                                //{
                                //    chk.Name = "InvestCBC";
                                //}
                                //else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Chest X-ray")
                                //{
                                //    chk.Name = "InvestChestXRay";
                                //}
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Sinus imaging")
                                {
                                    chk.Name = "InvestSinusImaging";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Pertussis infection nasopharyngeal culture ")
                                {
                                    chk.Name = "InvestPertussisInfectionNasopharyngealCulture";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Sputum culture & sensitivity")
                                {
                                    chk.Name = "InvestSputumCultureSensitivity";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Mantoux test")
                                {
                                    chk.Name = "InvestMantouxTest";
                                }
                                //else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Spirometry ")
                                //{
                                //    chk.Name = "InvestSpirometry";
                                //}
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with dyspnea at rest ")
                                {
                                    chk.Name = "AlarmCoughWithDyspneaAtRest";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough accompanied with breathlessness and coughing up pink frothy mucus")
                                {
                                    chk.Name = "AlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Intractable cough")
                                {
                                    chk.Name = "AlarmIntractableCough";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Persistent cough in patients with co-existing respiratory disease")
                                {
                                    chk.Name = "AlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with blood (hemoptysis)")
                                {
                                    chk.Name = "AlarmCoughWithBloodHemoptysis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with tachycardia")
                                {
                                    chk.Name = "AlarmCoughWithTachycardia";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with unexplained weight loss with fevers and night chills")
                                {
                                    chk.Name = "AlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with associated cyanosis")
                                {
                                    chk.Name = "AlarmCoughWithAssociatedCyanosis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Persistent cough not responsive to empirical therapy/ drug treatment")
                                {
                                    chk.Name = "AlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with dyspnea with mild activity")
                                {
                                    chk.Name = "AlarmCoughWithDyspneaWithMildActivity";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with tachypnea")
                                {
                                    chk.Name = "AlarmCoughWithTachypnea";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with high fever")
                                {
                                    chk.Name = "AlarmCoughWithHighFever";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features " && PItem.Title == "Cough with stridor ( retropharyngeal abcess)")
                                {
                                    chk.Name = "AlarmCoughWithStridorRetropharyngealAbcess";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Worsen during day time")
                                {
                                    chk.Name = "HistWorsenDuringDayTime";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Worsen during night time")
                                {
                                    chk.Name = "HistWorsenDuringNightTime";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Worsen with any postural change")
                                {
                                    chk.Name = "HistWorsenWithAnyPosturalChange";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Persistent")
                                {
                                    chk.Name = "HistPersistent";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Happens in bouts, followed by intervals of freedom")
                                {
                                    chk.Name = "HistHappensInBoutsFollowedByIntervalsOfFreedom";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "No specific pattern")
                                {
                                    chk.Name = "HistNoSpecificPattern";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Breathlessness / wheezing / stridor ")
                                {
                                    chk.Name = "HistBreathlessnessWheezingStridor";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Characteristic ‘whoop’")
                                {
                                    chk.Name = "HistCharacteristicWhoop";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Unexplained weight loss with fevers and night chills")
                                {
                                    chk.Name = "HistUnexplainedWeightLossWithFeversAndNightChills";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Bodyache/ myalgia ")
                                {
                                    chk.Name = "HistBodyacheMyalgia";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Rash or any other signs")
                                {
                                    chk.Name = "HistRashOrAnyOtherSigns";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "History of foreign body inhalation")
                                {
                                    chk.Name = "HistHistoryOfForeignBodyInhalation";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Intractable cough")
                                {
                                    chk.Name = "HistIntractableCough";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Sputum production")
                                {
                                    chk.Name = "HistSputumProduction";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Purulent sputum ")
                                {
                                    chk.Name = "HistPurulentSputum";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Presence of blood")
                                {
                                    chk.Name = "HistPresenceOfBlood";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Coughing up pink frothy mucus")
                                {
                                    chk.Name = "HistCoughingUpPinkFrothyMucus";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Risk Factors" && PItem.Title == "H/o Asthma/ COPD")
                                {
                                    chk.Name = "RiskHoAsthmaCOPD";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Risk Factors" && PItem.Title == "Smoking ")
                                {
                                    chk.Name = "RiskSmoking";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Risk Factors" && PItem.Title == "ACE drug use")
                                {
                                    chk.Name = "RiskACEDrugUse";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Lifestyle changes ")
                                {
                                    chk.Name = "EMLifeStyleChanges";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Dietary advice")
                                {
                                    chk.Name = "EMDietaryAdvice";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit clinic")
                                {
                                    chk.Name = "EMWhenToVisitClinic";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit hospital")
                                {
                                    chk.Name = "EMWhenToVisitHospital";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Tests conducted")
                                {
                                    chk.Name = "EMTestsConducted";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Medication explained")
                                {
                                    chk.Name = "EMMedicationExplained";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up visit discussed")
                                {
                                    chk.Name = "EMFollowUpVisitDiscussed";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up/telephonic follow up scheduled")
                                {
                                    chk.Name = "EMFollowUpTelephonicFollowUpScheduled";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Frequent watery or loose stool")
                                {
                                    chk.Name = "PresFreqWateryLooseStool";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Diarrhea accompanied with fever above 102.2 F")
                                {
                                    chk.Name = "AlarmDiarrheaFever";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Presence of mucus in the stool")
                                {
                                    chk.Name = "PresMucusStool";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Presence of blood in the stool")
                                {
                                    chk.Name = "PresBloodStool";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Dysentry")
                                {
                                    chk.Name = "PDDysentry";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Decreased urination")
                                {
                                    chk.Name = "PresDecreasedUrination";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Sunken eyes ")
                                {
                                    chk.Name = "PresSunkenEyes";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Dry mouth or skin ")
                                {
                                    chk.Name = "PresDryMouthOrSkin";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Severe dehydration")
                                {
                                    chk.Name = "AlarmSevereDehydration";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Persistent diarrhea")
                                {
                                    chk.Name = "PDPersistentDiarrhea";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "C. difficile assay")
                                {
                                    chk.Name = "InvestCDifficileAssay";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "General Examination" && PItem.Title == "Pallor")
                                {
                                    chk.Name = "GEPallor";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Acute watery diarrhea")
                                {
                                    chk.Name = "PDAcuteWateryDiarrhea";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Abdominal distension")
                                {
                                    chk.Name = "AlarmAbdominalDistension";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Prolonged symptoms of diarrhea (>14 days)")
                                {
                                    chk.Name = "AlarmProlongedSymptomsOfDiarrhea14Days";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Persistent vomiting")
                                {
                                    chk.Name = "AlarmPersistentVomiting";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Passing of black tarry stool")
                                {
                                    chk.Name = "AlarmPassingOfBlackTarryStool";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Severe pain in the abdomen or rectum")
                                {
                                    chk.Name = "AlarmSeverePainInTheAbdomenOrRectum";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Diarrhea with severe abdominal pain in a patient older than 50 years or in the elderly (above 60 years)")
                                {
                                    chk.Name = "AlarmDiarrheaWithSevereAbdominalPain";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Drowsiness or listlessness")
                                {
                                    chk.Name = "AlarmDrowsinessOrListlessness";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Convulsions or loss of consciousness")
                                {
                                    chk.Name = "AlarmConvulsionsOrLossOfConsciousness";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Inability to administer oral rehydration therapy")
                                {
                                    chk.Name = "AlarmInabilityToAdministerOralRehydrationTherapy";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentation" && PItem.Title == "Nausea and vomiting")
                                {
                                    chk.Name = "PresNauseaVomiting";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Hypertension with symptoms of nausea and vomiting")
                                {
                                    chk.Name = "AlarmHypertensionNauseaVomiting";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Pre hypertension")
                                {
                                    chk.Name = "PDPrehypertension";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Stage I hypertension/Mild hypertension")
                                {
                                    chk.Name = "PDStageIhypertensionMildhypertension";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Stage II hypertension/Moderate hypertension")
                                {
                                    chk.Name = "PDStageIIhypertensionModeratehypertension";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Stage III hypertension/Severe hypertension")
                                {
                                    chk.Name = "PDStageIIIhypertensionSeverehypertension";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Persistent systolic blood pressure recording of more than 200 mmHg even after medication")
                                {
                                    chk.Name = "AlarmPersistentsystolic200aftermedication";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Ultrasound abdomen")
                                {
                                    chk.Name = "InvestUltrasoundAbdomen";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Doppler flow study")
                                {
                                    chk.Name = "InvestDopplerFlowStudy";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentation" && PItem.Title == "Blurred vision")
                                {
                                    chk.Name = "PresBlurredVision";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentation" && PItem.Title == "Confusion")
                                {
                                    chk.Name = "PresConfusion";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentation" && PItem.Title == "Loss of consciousness")
                                {
                                    chk.Name = "PresLossOfConsciousness";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "History of sudden blackouts")
                                {
                                    chk.Name = "HistSuddenBlackouts";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Complaints of weakness of the limbs")
                                {
                                    chk.Name = "HistWeaknessOfLimbs";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Slurred speech ")
                                {
                                    chk.Name = "HistSlurredSpeech";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Tongue  protruding to one side")
                                {
                                    chk.Name = "HistTongueProtrudingToOneSide";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Reduce weight")
                                {
                                    chk.Name = "MgmtReduceWeight";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Adopt DASH eating plan")
                                {
                                    chk.Name = "MgmtAdoptDASHEatingPlan";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Restrict salt in the diet")
                                {
                                    chk.Name = "MgmtRestrictSaltInTheDiet";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Exercise regularly")
                                {
                                    chk.Name = "MgmtExerciseRegularly";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Reduce alcohol consumption")
                                {
                                    chk.Name = "MgmtReduceAlcoholConsumption";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Stop smoking")
                                {
                                    chk.Name = "MgmtStopSmoking";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Lifestyle changes ")
                                {
                                    chk.Name = "EMLifeStyleChanges";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Dietary advice")
                                {
                                    chk.Name = "EMDietaryAdvice";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit clinic")
                                {
                                    chk.Name = "EMWhenToVisitClinic";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit hospital")
                                {
                                    chk.Name = "EMWhenToVisitHospital";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Tests conducted")
                                {
                                    chk.Name = "EMTestsConducted";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Medication explained")
                                {
                                    chk.Name = "EMMedicationExplained";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up visit discussed")
                                {
                                    chk.Name = "EMFollowUpVisitDiscussed";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up / telephonic follow up scheduled")
                                {
                                    chk.Name = "EMFollowUpTelephonicFollowUpScheduled";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Hypertensive emergencies where severe elevation of blood pressure (SBP> 220 mm of Hg or DBP>130 mm of Hg) is seen")
                                {
                                    chk.Name = "AlarmHypertensiveEmergenciesSevereElevationOfBloodPressureSBP220OrDBP130";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Patients with severe retinopathy (hemorrhage and papilloedema) and malignant hypertension")
                                {
                                    chk.Name = "AlarmPatientsWithSevereRetinopathyHemorrhageAndPapilloedemaAndMalignantHypertension";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Raised serum creatinine or low plasma potassium in the absence of a diuretic")
                                {
                                    chk.Name = "AlarmRaisedSerumCreatinineOrLowPlasmaPotassiumInTheAbsenceOfDiuretic";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Hematuria, proteinuria or cells in urine")
                                {
                                    chk.Name = "AlarmHematuriaProteinuriaOrCellsInUrine";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Sudden and severe headaches ")
                                {
                                    chk.Name = "AlarmSuddenAndSevereHeadaches";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Symptoms of blurred vision ")
                                {
                                    chk.Name = "AlarmSymptomsOfBlurredVision";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Symptoms of dizziness ")
                                {
                                    chk.Name = "AlarmSymptomsOfDizziness";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Sudden blackouts")
                                {
                                    chk.Name = "AlarmSuddenBlackouts";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Complaints of weakness of the limbs")
                                {
                                    chk.Name = "AlarmComplaintsOfWeaknessOfTheLimbs";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Confusion")
                                {
                                    chk.Name = "AlarmConfusion";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Loss of consciousness")
                                {
                                    chk.Name = "AlarmLossOfConsciousness";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Complaints of slurred speech ")
                                {
                                    chk.Name = "AlarmComplaintsOfSlurredSpeech";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Complaints of tongue  protruding to one side")
                                {
                                    chk.Name = "AlarmComplaintsOfTongueProtrudingToOneSide";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Presentations" && PItem.Title == "Reflux-like symptoms : heartburn or acid regurgitation")
                                {
                                    chk.Name = "PresRefluxSymptomsHeartburnAcidRegurgitation";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Gastro esophageal reflux disease (GERD)")
                                {
                                    chk.Name = "PDGastroEsophagealRefluxDiseaseGERD";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Gastrointestinal bleeding( blood in vomiting and stools)")
                                {
                                    chk.Name = "AlarmGastrointestinalBleedingVomitingStools";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "General Examination" && PItem.Title == "Pallor")
                                {
                                    chk.Name = "GEPallor";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "General Examination" && PItem.Title == "Lymphadenopathy")
                                {
                                    chk.Name = "GELymphadenopathy";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Palpable mass or lymphadenopathy")
                                {
                                    chk.Name = "AlarmPalpableMassLymphadenopathy";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Duodenal ulcer")
                                {
                                    chk.Name = "PDDuodenalUlcer";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Peptic ulcer")
                                {
                                    chk.Name = "PDPepticUlcer";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Gastric ulcers")
                                {
                                    chk.Name = "PDGastricUlcers";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Drug induced gastritis ")
                                {
                                    chk.Name = "PDDrugInducedGastritis";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Serology test")
                                {
                                    chk.Name = "InvestSerologytest";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Age >55 years, with new onset symptoms")
                                {
                                    chk.Name = "AlarmAge55yearsWithNewOnsetSymptoms";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Unexplained weight loss (>3kg)")
                                {
                                    chk.Name = "AlarmUnexplainedWeightLoss3kg";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Progressive dysphagia or persistent painful swallowing")
                                {
                                    chk.Name = "AlarmProgressiveDysphagiaOrPersistentPainfulSwallowing";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Persistent vomiting")
                                {
                                    chk.Name = "AlarmPersistentVomiting";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Signs of anemia (Pallor)")
                                {
                                    chk.Name = "AlarmSignsOfAnemiaPallor";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features" && PItem.Title == "Jaundice")
                                {
                                    chk.Name = "AlarmJaundice";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Helicobacter pylori infection")
                                {
                                    chk.Name = "PDHelicobacterPyloriInfection";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Lifestyle changes ")
                                {
                                    chk.Name = "EMLifeStyleChanges";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Dietary advice")
                                {
                                    chk.Name = "EMDietaryAdvice";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit clinic")
                                {
                                    chk.Name = "EMWhenToVisitClinic";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "When to visit hospital")
                                {
                                    chk.Name = "EMWhenToVisitHospital";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Tests conducted")
                                {
                                    chk.Name = "EMTestsConducted";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Medication explained")
                                {
                                    chk.Name = "EMMedicationExplained";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up visit discussed")
                                {
                                    chk.Name = "EMFollowUpVisitDiscussed";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Follow up/telephonic follow up scheduled")
                                {
                                    chk.Name = "EMFollowUpTelephonicFollowUpScheduled";
                                }
                            }
                        }


                        chk.IsEnabled = WritePerm;
                        #region Hard Coded
                        //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Alarm Features")
                        //{
                        //    chk.Name = "ChkAlarm" + Container.RowDefinitions.Count;
                        //}
                        #endregion
                        chk.IsThreeState = false;
                        chk.Margin = new Thickness(2);
                        chk.Click += new RoutedEventHandler(chk_Click);
                        chk.DataContext = PItem;
                        binding = new Binding("Settings.Value");
                        binding.Mode = BindingMode.TwoWay;
                        chk.SetBinding(CheckBox.IsCheckedProperty, binding);
                        Grid.SetRow(chk, Container.RowDefinitions.Count - 1);
                        Grid.SetColumn(chk, 1);
                        PItem.Control = chk;
                        Container.Children.Add(chk);
                        if (IdDependentField)
                            FTitle.Visibility = chk.Visibility = Visibility.Collapsed;

                    }
                    else
                    {
                        StackPanel panel = new StackPanel();
                        #region Added By Harish
                        if (PItem.IsToolTip == true)
                        {
                            //ToolTipService.SetToolTip(panel, tt);
                            #region new added by harish
                            panel.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                            #endregion
                        }
                        #endregion
                        panel.DataContext = PItem;
                        panel.Orientation = Orientation.Horizontal;
                        RadioButton yes = new RadioButton();
                        RadioButton No = new RadioButton();
                        if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                        {
                            if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Spirometry ")
                                {
                                    yes.Name = "InvestSpirometry";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Past History" && PItem.Title == "On any cough medications")
                                {
                                    yes.Name = "PHistOnAnyCoughMedicationsYes";
                                    No.Name = "PHistOnAnyCoughMedicationsNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Advisory")
                                {
                                    yes.Name = "EMAdvisoryYes";
                                    No.Name = "EMAdvisoryNo";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Drug History" && PItem.Title == "Anti hypertensives")
                                {
                                    yes.Name = "DHistAntihypertensivesYes";
                                    No.Name = "DHistAntihypertensivesNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Risk Factors" && PItem.Title == "Diabetes")
                                {
                                    yes.Name = "RFDiabetesYes";
                                    No.Name = "RFDiabetesNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Past History" && PItem.Title == "Renal/Kidney disease")
                                {
                                    yes.Name = "PHRenalKidneyDiseaseYes";
                                    No.Name = "PHRenalKidneyDiseaseNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Family History" && PItem.Title == "Diabetes")
                                {
                                    yes.Name = "FHDiabetesYes";
                                    No.Name = "FHDiabetesNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Family History" && PItem.Title == "Hyperlipidemia")
                                {
                                    yes.Name = "FHHyperlipidemiaYes";
                                    No.Name = "FHHyperlipidemiaNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Pedal edema")
                                {
                                    yes.Name = "PEPedalEdemaYes";
                                    No.Name = "PEPedalEdemaNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Signs of anemia")
                                {
                                    yes.Name = "PESignsOfAnemiaYes";
                                    No.Name = "PESignsOfAnemiaNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Advisory")
                                {
                                    yes.Name = "EMAdvisoryYes";
                                    No.Name = "EMAdvisoryNo";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Blood in stool")
                                {
                                    yes.Name = "HistBloodStoolYes";
                                    No.Name = "HistBloodStoolNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Blood in vomitus ")
                                {
                                    yes.Name = "HistBloodVomitusYes";
                                    No.Name = "HistBloodVomitusNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "General Examination" && PItem.Title == "Masses")
                                {
                                    yes.Name = "GEMassesYes";
                                    No.Name = "GEMassesNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Education Management" && PItem.Title == "Advisory")
                                {
                                    yes.Name = "EMAdvisoryYes";
                                    No.Name = "EMAdvisoryNo";
                                }
                            }
                            else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Recent antibiotic use")
                                {
                                    yes.Name = "HistRecentAntibioticUseYes";
                                    No.Name = "HistRecentAntibioticUseNo";
                                }
                                else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Blood in Stools")
                                {
                                    yes.Name = "HistBloodInStoolsYes";
                                    No.Name = "HistBloodInStoolsNo";
                                }
                            }
                        }
                        yes.IsEnabled = WritePerm;
                        #region Hard Coded
                        //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Blood in Stools")
                        //{
                        //    yes.Name = "BloodStoolsYes";
                        //}
                        //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Nausea & vomiting")
                        //{
                        //    yes.Name = "VomitingYes";
                        //}
                        #endregion
                        Binding byes = new Binding("Settings.Value");
                        byes.Converter = new BoolToYesNoConverter();
                        byes.ConverterParameter = "true";
                        byes.Mode = BindingMode.TwoWay;
                        yes.SetBinding(RadioButton.IsCheckedProperty, byes);
                        yes.Margin = new Thickness(2);
                        yes.Click += new RoutedEventHandler(chk_Click);
                        yes.Content = "Yes";

                        No.IsEnabled = WritePerm;
                        #region Hard Coded
                        //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Blood in Stools")
                        //{
                        //    No.Name = "BloodStoolsNo";
                        //}
                        //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Nausea & vomiting")
                        //{
                        //    No.Name = "VomitingNo";
                        //}
                        #endregion
                        Binding bno = new Binding("Settings.Value");
                        bno.Converter = new BoolToYesNoConverter();
                        bno.ConverterParameter = "false";
                        bno.Mode = BindingMode.TwoWay;
                        No.SetBinding(RadioButton.IsCheckedProperty, bno);
                        No.Margin = new Thickness(2);
                        No.Click += new RoutedEventHandler(chk_Click);
                        No.Content = "No";
                        panel.Children.Add(yes);
                        panel.Children.Add(No);
                        Grid.SetRow(panel, Container.RowDefinitions.Count - 1);
                        Grid.SetColumn(panel, 1);
                        PItem.Control = panel;
                        Container.Children.Add(panel);
                        if (PItem.IsRequired)
                        {
                            yes.SetValidation(PItem.Title + " is required.");
                            yes.RaiseValidationError();
                            No.SetValidation(PItem.Title + " is required.");
                            No.RaiseValidationError();
                        }
                        if (IdDependentField)
                        {
                            FTitle.Visibility = panel.Visibility = Visibility.Collapsed;
                        }
                    }
                    break;
                case 3:
                    DatePicker dtp = new DatePicker();
                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null && ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                    {
                        if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Management" && PItem.Title == "Date(Hospital)")
                        {
                            dtp.Name = "HospitalDate";
                        }
                        if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Management" && PItem.Title == "Date(Telephonic)")
                        {
                            dtp.Name = "TelephonicDate";
                        }
                    }
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(dtp, tt);
                        #region new added by harish
                        dtp.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    dtp.IsEnabled = WritePerm;

                    if (!IsSaved && ((DateFieldSetting)PItem.Settings).IsDefaultDate)
                    {
                        if (VisitTypeID == 1)
                        {
                            if (((SectionDetail)PItem.Parent).Tab == "Consultation")
                            {
                                if ((bool)((DateFieldSetting)PItem.Settings).Mode)
                                    ((DateFieldSetting)PItem.Settings).Date = (DateTime.Now).AddDays(Convert.ToDouble(((DateFieldSetting)PItem.Settings).Days));
                                else
                                    ((DateFieldSetting)PItem.Settings).Date = (DateTime.Now).AddDays(-Convert.ToDouble(((DateFieldSetting)PItem.Settings).Days));
                            }
                        }
                        else if (VisitTypeID == 2 || VisitTypeID == 3)
                        {
                            if (((SectionDetail)PItem.Parent).Tab != "Consultation")
                            {
                                if ((bool)((DateFieldSetting)PItem.Settings).Mode)
                                    ((DateFieldSetting)PItem.Settings).Date = (DateTime.Now).AddDays(Convert.ToDouble(((DateFieldSetting)PItem.Settings).Days));
                                else
                                    ((DateFieldSetting)PItem.Settings).Date = (DateTime.Now).AddDays(-Convert.ToDouble(((DateFieldSetting)PItem.Settings).Days));
                            }
                        }

                    }
                    #region new added by harish
                    dtp.DataContext = PItem;
                    #endregion
                    dtp.Margin = new Thickness(2);
                    binding = new Binding("Settings.Date");
                    binding.Mode = BindingMode.TwoWay;
                    dtp.SetBinding(DatePicker.SelectedDateProperty, binding);
                    //dtp.SelectedDateChanged += new EventHandler<SelectionChangedEventArgs>(dtp_SelectedDateChanged);                    
                    Grid.SetRow(dtp, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(dtp, 1);
                    PItem.Control = dtp;
                    if (IdDependentField)
                        FTitle.Visibility = dtp.Visibility = Visibility.Collapsed;

                    Container.Children.Add(dtp);
                    break;
                case 4:
                    ListFieldSetting listSetting = ((ListFieldSetting)PItem.Settings);

                    switch (listSetting.ChoiceMode)
                    {
                        case SelectionMode.Single:
                            switch (listSetting.ControlType)
                            {
                                case ListControlType.ComboBox:
                                    ComboBox cmbList = new ComboBox();
                                    #region Added By Harish
                                    if (PItem.IsToolTip == true)
                                    {
                                        //ToolTipService.SetToolTip(cmbList, tt);
                                        #region new added by harish
                                        cmbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                        #endregion
                                    }
                                    #endregion

                                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                                    {
                                        if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                                        {
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Urine output")
                                            {
                                                cmbList.Name = "UrineOutput";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "General Conditions")
                                            {
                                                cmbList.Name = "GeneralCondition";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Eye")
                                            {
                                                cmbList.Name = "Eye";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Skin Colour")
                                            {
                                                cmbList.Name = "SkinColour";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Thirst")
                                            {
                                                cmbList.Name = "Thirst";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Skin/Turgor")
                                            {
                                                cmbList.Name = "SkinTurgor";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Hydration Status")
                                            {
                                                cmbList.Name = "PhysicalExaminationHydrationStatus";
                                            }

                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Status")
                                            {
                                                cmbList.Name = "NutritionStatus";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Hydration Status" && PItem.Title == "Hydration status")
                                            {
                                                cmbList.Name = "HydrationStatus";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Provisional Diagnosis" && PItem.Title == "Provisional Diagnosis")
                                            {
                                                cmbList.Name = "ProvisionalDiagnosis";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Management" && PItem.Title == "for")
                                            {
                                                cmbList.Name = "ManagementFollowUpFor";
                                            }

                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "To(Hospital/Specialist)")
                                            {
                                                cmbList.Name = "RMTo";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "At(Location)")
                                            {
                                                cmbList.Name = "RMAt";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "For(Reason)")
                                            {
                                                cmbList.Name = "RMFor";
                                            }
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Refferal Management" && PItem.Title == "By(Urgency)")
                                            {
                                                cmbList.Name = "RMBy";
                                            }
                                        }
                                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                                        {
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Duration")
                                            {
                                                cmbList.Name = "CoughDuration";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Respiratory ")
                                            {
                                                cmbList.Name = "PERespiratory";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Referral Management" && PItem.Title == "To(Hospital/Specialist)")
                                            {
                                                cmbList.Name = "RMToHospital";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Onset ")
                                            {
                                                cmbList.Name = "CoughOnset";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Past History" && PItem.Title == "Course of drug treatment")
                                            {
                                                cmbList.Name = "PHistCourseOfDrugTreatment";
                                            }
                                        }
                                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                                        {
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Referral Management" && PItem.Title == "To(Hospital/Specialist)")
                                            {
                                                cmbList.Name = "RMToHospital";
                                            }
                                        }
                                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                                        {
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Referral Management" && PItem.Title == "To(Hospital/Specialist)")
                                            {
                                                cmbList.Name = "RMToHospital";
                                            }
                                        }
                                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                                        {
                                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Urine output")
                                            {
                                                cmbList.Name = "HistUrineOutput";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Hydration Status" && PItem.Title == "Hydration status")
                                            {
                                                cmbList.Name = "HSHydrationStatus";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "General condition")
                                            {
                                                cmbList.Name = "PEGeneralCondition";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Thirst")
                                            {
                                                cmbList.Name = "PEThirst";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Mucus membrane")
                                            {
                                                cmbList.Name = "PEMucusMembrane";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Skin pinch (abdomen)")
                                            {
                                                cmbList.Name = "PESkinPinchAbdomen";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Urine output")
                                            {
                                                cmbList.Name = "PEUrineOutput";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Skin colour")
                                            {
                                                cmbList.Name = "PESkinColour";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Referral Management" && PItem.Title == "To(Hospital/Specialist)")
                                            {
                                                cmbList.Name = "RMToHospital";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Abdominal examination")
                                            {
                                                cmbList.Name = "PEAbdominalExamination";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Eye")
                                            {
                                                cmbList.Name = "PEEye";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Skin temperature/ color")
                                            {
                                                cmbList.Name = "PESkinTemperatureColor";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Pulse rate")
                                            {
                                                cmbList.Name = "PEPulseRate";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Blood pressure")
                                            {
                                                cmbList.Name = "PEBloodPressure";
                                            }
                                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Abdominal examination")
                                            {
                                                cmbList.Name = "PEAbdominalExamination";
                                            }
                                        }
                                    }
                                    cmbList.IsEnabled = WritePerm;
                                    cmbList.DataContext = PItem;
                                    #region Hard Coded
                                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Urine output")
                                    //{
                                    //    cmbList.Name = "UrineOutput";
                                    //}
                                    #endregion
                                    PItem.Control = cmbList;
                                    cmbList.SelectionChanged += new SelectionChangedEventHandler(cmbList_SelectionChanged);
                                    if (listSetting.SelectedItem != null)
                                        listSetting.SelectedItem = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                                    else
                                    {
                                        if (listSetting.ItemSource.Count != 0)
                                            listSetting.SelectedItem = listSetting.ItemSource[0];
                                        listSetting.SelectedItem = null;
                                    }
                                    cmbList.DisplayMemberPath = "Title";

                                    Binding Sourcebinding = new Binding("Settings.ItemSource");
                                    Sourcebinding.Mode = BindingMode.OneWay;
                                    cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                                    Binding SIbinding = new Binding("Settings.SelectedItem");
                                    SIbinding.Mode = BindingMode.TwoWay;
                                    cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);
                                    cmbList.Margin = new Thickness(2);
                                    //commented by priti
                                    //Grid.SetRow(cmbList, Container.RowDefinitions.Count - 1);
                                    //Grid.SetColumn(cmbList, 1);
                                    // above commented by priti
                                    // if (IsView == true)
                                    //{
                                    //    cmbList.IsEnabled = false;
                                    //}
                                    //else
                                    //{
                                    //    cmbList.IsEnabled = true;
                                    //}
                                    Grid.SetRow(cmbList, Container.RowDefinitions.Count - 1);
                                    Grid.SetColumn(cmbList, 1);

                                    //cmbList.ItemsSource = listSetting.ItemSource;
                                    //cmbList.SelectedIndex = listSetting.DefaultSelectedItemIndex;
                                    //PItem.Control = cmbList;
                                    //if (listSetting.SelectedItem != null)
                                    //    listSetting.SelectedItem = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                                    //else
                                    //{
                                    //    if (listSetting.ItemSource.Count != 0)
                                    //        listSetting.SelectedItem = listSetting.ItemSource[0];
                                    //    listSetting.SelectedItem = null;
                                    //}
                                    if (PItem.IsRequired)
                                    {
                                        cmbList.SetValidation(PItem.Title + " is required.");
                                        cmbList.RaiseValidationError();
                                    }
                                    if (IdDependentField)
                                        FTitle.Visibility = cmbList.Visibility = Visibility.Visible;
                                    Container.Children.Add(cmbList);
                                    break;
                                case ListControlType.RadioButton:
                                    break;
                            }

                            break;
                        case SelectionMode.Multiples:
                            ListBox lbList = new ListBox();
                            #region Added By Harish
                            if (PItem.IsToolTip == true)
                            {
                                //ToolTipService.SetToolTip(lbList, tt);
                                #region new added by harish
                                lbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                #endregion
                            }
                            #endregion
                            lbList.IsEnabled = WritePerm;
                            lbList.SelectionMode = System.Windows.Controls.SelectionMode.Multiple;
                            lbList.DataContext = PItem;
                            Binding Sourcebinding1 = new Binding("Settings.ItemSource");
                            Sourcebinding1.Mode = BindingMode.OneWay;
                            lbList.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding1);
                            if (listSetting.SelectedItems != null && listSetting.SelectedItems.Count > 0)
                                foreach (var item in listSetting.SelectedItems)
                                {
                                    lbList.SelectedItems.Add(listSetting.ItemSource.Where(i => i.Title == item.Title).Single());
                                }
                            lbList.MaxHeight = 100;
                            lbList.DisplayMemberPath = "Title";
                            lbList.Margin = new Thickness(2);
                            lbList.SelectionChanged += new SelectionChangedEventHandler(lbList_SelectionChanged);
                            Grid.SetRow(lbList, Container.RowDefinitions.Count - 1);
                            Grid.SetColumn(lbList, 1);
                            lbList.ItemsSource = listSetting.ItemSource;
                            PItem.Control = lbList;
                            if (IdDependentField)
                                FTitle.Visibility = lbList.Visibility = Visibility.Visible;
                            Container.Children.Add(lbList);
                            break;
                    }
                    break;
                case 5:
                    StackPanel DecP = new StackPanel();
                    DecP.DataContext = PItem;
                    //PItem.Control = DecP;
                    DecP.Orientation = Orientation.Horizontal;
                    TextBox DecField = new TextBox();
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(DecField, tt);
                        #region new added by harish
                        DecP.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    #region Hard Coded
                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                    {
                        if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Temprature")
                            {
                                DecField.Name = "Temprature";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Pulse")
                            {
                                DecField.Name = "Pulse";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Respiratory Rate")
                            {
                                DecField.Name = "Respiratory";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Systolic")
                            {
                                DecField.Name = "Systolic";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Diastolic")
                            {
                                DecField.Name = "Diastolic";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Weight")
                            {
                                DecField.Name = "Weight";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Height")
                            {
                                DecField.Name = "Height";
                            }


                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Temprature")
                            {
                                DecField.Name = "ROTemprature";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Pulse")
                            {
                                DecField.Name = "ROPulse";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Respiratory Rate")
                            {
                                DecField.Name = "RORespiratory";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Systolic")
                            {
                                DecField.Name = "ROSystolic";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Diastolic")
                            {
                                DecField.Name = "RODiastolic";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Weight")
                            {
                                DecField.Name = "ROWeight";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Reassesment Observation" && PItem.Title == "Height")
                            {
                                DecField.Name = "ROHeight";
                            }

                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Height/Age")
                            {
                                DecField.Name = "StuntingPercent";
                                DecField.TextChanged += new TextChangedEventHandler(DecField_TextChanged);
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Physical Examination" && PItem.Title == "Height/Weight")
                            {
                                DecField.Name = "WastingPercent";
                                DecField.TextChanged += new TextChangedEventHandler(DecField_TextChanged);
                            }

                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Days")
                            {
                                DecField.Name = "StoolDays";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Hours")
                            {
                                DecField.Name = "StoolHours";
                            }

                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Frequency")
                            {
                                if (FrequencyFlag)
                                {
                                    DecField.Name = "VomitingFrequency";
                                    FrequencyFlag = false;
                                }
                                else
                                {
                                    DecField.Name = "StoolFrequency";
                                    FrequencyFlag = true;
                                }
                            }

                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Duration")
                            {
                                if (!FrequencyFlag)
                                {
                                    DecField.Name = "VomitingDuration";
                                    FrequencyFlag = true;
                                }
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Temperature")
                            {
                                DecField.Name = "Temprature";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Temperature")
                            {
                                DecField.Name = "ObserveTemperature";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Since")
                            {
                                if (((DecimalFieldSetting)PItem.Settings).Unit != null && ((DecimalFieldSetting)PItem.Settings).Unit == "days")
                                    DecField.Name = "HistSinceDays";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Systolic")
                            {
                                DecField.Name = "ObserveSystolic";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Observations" && PItem.Title == "Diastolic")
                            {
                                DecField.Name = "ObserveDiastolic";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "History" && PItem.Title == "Systolic")
                            {
                                DecField.Name = "HistSystolic";
                            }
                        }
                    }

                    #endregion
                    DecField.IsEnabled = WritePerm;
                    DecField.VerticalAlignment = VerticalAlignment.Center;
                    DecField.Margin = new Thickness(2);
                    DecP.Children.Add(DecField);
                    TextBlock decUnit = new TextBlock();
                    decUnit.Margin = new Thickness(2);
                    decUnit.VerticalAlignment = VerticalAlignment.Center;
                    DecP.Children.Add(decUnit);
                    Grid.SetRow(DecP, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(DecP, 1);
                    if (PItem.Settings != null)
                    {
                        binding = new Binding("Settings.Value");
                        binding.Mode = BindingMode.TwoWay;
                        DecField.SetBinding(TextBox.TextProperty, binding);
                        DecField.Width = 50;
                        if (string.IsNullOrEmpty(DecField.Text))
                            DecField.Text = ((DecimalFieldSetting)PItem.Settings).DefaultValue.HasValue ? ((DecimalFieldSetting)PItem.Settings).DefaultValue.ToString() : "";
                        DecField.LostFocus += new RoutedEventHandler(decUnit_LostFocus);
                        DecField.TextChanged += new TextChangedEventHandler(DecField_TextChanged);
                        DecField.KeyDown += new KeyEventHandler(DecField_KeyDown);
                        DecField.TextAlignment = TextAlignment.Right;
                        decUnit.Text = string.IsNullOrEmpty(((DecimalFieldSetting)PItem.Settings).Unit) ? "" : ((DecimalFieldSetting)PItem.Settings).Unit;
                        //DecField.Text = ((DecimalFieldSetting)PItem.Settings).DefaultValue.ToString();
                        //DecField.Text = ((DecimalFieldSetting)PItem.Settings).DefaultValue.ToString();
                    }
                    if (PItem.IsRequired)
                    {
                        DecField.SetValidation(PItem.Title + " is required.");
                        DecField.RaiseValidationError();
                    }
                    if (IdDependentField)
                        FTitle.Visibility = DecP.Visibility = Visibility.Collapsed;
                    PItem.Control = DecP;
                    Container.Children.Add(DecP);
                    break;
                case 6:
                    HyperlinkButton HyperBtn = new HyperlinkButton();
                    HyperBtn.VerticalAlignment = VerticalAlignment.Center;
                    HyperBtn.IsTabStop = false;
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(HyperBtn, tt);
                        #region new added by harish
                        HyperBtn.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion

                    if (((HyperlinkFieldSetting)PItem.Settings).Url != null && ((HyperlinkFieldSetting)PItem.Settings).Url != "")
                    {
                        HyperBtn.Content = ((HyperlinkFieldSetting)PItem.Settings).Url;
                        HyperBtn.TargetName = ((HyperlinkFieldSetting)PItem.Settings).Url;
                        HyperBtn.Click += new RoutedEventHandler(HyperBtn_Click);
                    }
                    HyperBtn.DataContext = PItem;
                    PItem.Control = HyperBtn;
                    Grid.SetRow(HyperBtn, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(HyperBtn, 1);
                    Container.Children.Add(HyperBtn);
                    break;
                case 7:
                    FTitle.FontFamily = new FontFamily("Portable User Interface");
                    FTitle.Foreground = this.Resources["Heading"] as Brush;
                    FTitle.FontWeight = FontWeights.Bold;
                    FTitle.FontStyle = FontStyles.Italic;
                    FTitle.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                    Grid.SetRow(FTitle, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(FTitle, 0);
                    Grid.SetColumnSpan(FTitle, 2);
                    Container.Children.Add(FTitle);
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(FTitle, tt);
                        #region new added by harish
                        FTitle.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    FTitle.DataContext = PItem;
                    break;

                case 8:
                    LookUpFieldSetting LookUpSetting = ((LookUpFieldSetting)PItem.Settings);

                    switch (LookUpSetting.ChoiceMode)
                    {
                        case SelectionMode.Single:
                            ComboBox cmbList = new ComboBox();

                            if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null && ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                            {
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Hydration")
                                {
                                    cmbList.Name = "HydrationStatusManagement";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "IV Hydration")
                                {
                                    cmbList.Name = "Hydration4StatusManagement";
                                }
                                if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Zinc Supplement")
                                {
                                    cmbList.Name = "ZincSupplementManagement";

                                    if (LookUpSetting.ItemSource.Count == 0)
                                    {
                                        LookUpSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source4", Value = "Source4" };
                                        IGetList src = null;
                                        src = new Source4();
                                        LookUpSetting.ItemSource = src.GetList();
                                    }
                                }
                            }
                            //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Nutritional advise")
                            //{
                            //    cmbList.Name = "NutritionalAdvise";
                            //}
                            if (LookUpSetting.ItemSource != null && LookUpSetting.ItemSource.Count != 0)
                            {
                                cmbList.ItemsSource = LookUpSetting.ItemSource;
                                if (LookUpSetting.SelectedItem != null)
                                {
                                    var item = LookUpSetting.ItemSource.Where(i => i.Title == LookUpSetting.SelectedItem.Title).Single();
                                    cmbList.SelectedItem = item;
                                }
                                else
                                {
                                    cmbList.SelectedItem = null;
                                }
                            }

                            //if (LookUpSetting.SelectedItem != null)
                            //    LookUpSetting.SelectedItem = LookUpSetting.ItemSource.Where(i => i.Title == LookUpSetting.SelectedItem.Title).Single();
                            //else
                            //{
                            //    if (LookUpSetting.ItemSource.Count != 0)
                            //        LookUpSetting.SelectedItem = LookUpSetting.ItemSource[0];
                            //    LookUpSetting.SelectedItem = null;
                            //}
                            cmbList.IsEnabled = WritePerm;
                            cmbList.DisplayMemberPath = "Title";
                            cmbList.Margin = new Thickness(2);
                            cmbList.DataContext = PItem;
                            Binding Sourcebinding = new Binding("Settings.ItemSource");
                            Sourcebinding.Mode = BindingMode.TwoWay;
                            cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                            Binding SIbinding = new Binding("Settings.SelectedItem");
                            SIbinding.Mode = BindingMode.TwoWay;
                            cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);
                            //cmbList.ItemsSource = ((IGetList)(Assembly.GetExecutingAssembly().CreateInstance(LookUpSetting.SelectedSource.Value))).GetList();
                            if (!LookUpSetting.IsAlternateText)
                            {
                                #region Added By Harish
                                if (PItem.IsToolTip == true)
                                {
                                    //ToolTipService.SetToolTip(cmbList, tt);
                                    #region new added by harish
                                    cmbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                    #endregion
                                }
                                #endregion
                                Grid.SetRow(cmbList, Container.RowDefinitions.Count - 1);
                                Grid.SetColumn(cmbList, 1);
                                //cmbList.SelectedIndex = listSetting.DefaultSelectedItemIndex;
                                PItem.Control = cmbList;
                                if (IdDependentField)
                                    cmbList.Visibility = Visibility.Collapsed;
                                Container.Children.Add(cmbList);
                            }
                            else
                            {
                                Grid lookupgrid = new Grid();
                                #region Added By Harish
                                if (PItem.IsToolTip == true)
                                {
                                    //ToolTipService.SetToolTip(lookupgrid, tt);
                                    lookupgrid.DataContext = PItem;
                                    #region new added by harish
                                    lookupgrid.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                    #endregion
                                }
                                #endregion
                                ColumnDefinition col1 = new ColumnDefinition();
                                ColumnDefinition col2 = new ColumnDefinition();
                                ColumnDefinition col3 = new ColumnDefinition();
                                col2.Width = new GridLength(30, GridUnitType.Auto);
                                lookupgrid.ColumnDefinitions.Add(col1);
                                lookupgrid.ColumnDefinitions.Add(col2);
                                lookupgrid.ColumnDefinitions.Add(col3);

                                Grid.SetColumn(cmbList, 0);

                                TextBlock or = new TextBlock();
                                or.VerticalAlignment = VerticalAlignment.Center;
                                or.Margin = new Thickness(2);
                                or.Text = "Or";
                                Grid.SetColumn(or, 1);
                                TextBox Alt = new TextBox();
                                Alt.IsEnabled = WritePerm;
                                or.Margin = new Thickness(2);
                                Grid.SetColumn(Alt, 2);
                                //cmbList.SelectedIndex = listSetting.DefaultSelectedItemIndex;
                                Grid.SetRow(lookupgrid, Container.RowDefinitions.Count - 1);
                                Grid.SetColumn(lookupgrid, 1);

                                lookupgrid.Children.Add(cmbList);
                                lookupgrid.Children.Add(or);
                                lookupgrid.Children.Add(Alt);
                                PItem.Control = lookupgrid;
                                if (IdDependentField)
                                    FTitle.Visibility = cmbList.Visibility = Visibility.Collapsed;
                                Container.Children.Add(lookupgrid);
                            }

                            break;
                        case SelectionMode.Multiples:
                            ListBox lbList = new ListBox();
                            #region Added By Harish
                            if (PItem.IsToolTip == true)
                            {
                                //ToolTipService.SetToolTip(lbList, tt);
                                #region new added by harish
                                lbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                #endregion
                            }
                            #endregion
                            lbList.IsEnabled = WritePerm;
                            lbList.MaxHeight = 100;
                            lbList.DisplayMemberPath = "Title";
                            lbList.SelectionMode = System.Windows.Controls.SelectionMode.Multiple;
                            lbList.Margin = new Thickness(2);
                            lbList.DataContext = PItem;
                            Grid.SetRow(lbList, Container.RowDefinitions.Count - 1);
                            Grid.SetColumn(lbList, 1);
                            //lbList.ItemsSource = ((IGetList)(Assembly.GetExecutingAssembly().CreateInstance(LookUpSetting.SelectedSource.Value))).GetList();
                            PItem.Control = lbList;
                            if (IdDependentField)
                                FTitle.Visibility = lbList.Visibility = Visibility.Collapsed;
                            Container.Children.Add(lbList);
                            break;
                    }
                    break;

                case 9:
                    MedicationFieldSetting MedSetting = ((MedicationFieldSetting)PItem.Settings);
                    FTitle.VerticalAlignment = VerticalAlignment.Top;
                    FTitle.Margin = new Thickness(2, 8, 2, 0);
                    ListBox lstBox = new ListBox();
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(lstBox, tt);
                        #region new added by harish
                        lstBox.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    lstBox.DataContext = PItem;
                    lstBox.IsEnabled = WritePerm;
                    lstBox.SelectionChanged += new SelectionChangedEventHandler(lstBox_SelectionChanged);
                    lstBox.Margin = new Thickness(2);
                    //lstBox.ItemTemplate = (DataTemplate)this.Resources["ListItemDataTemplate"];
                    //lstBox.ItemContainerStyle = (Style)this.Resources["ListBoxItemStyle"];

                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                    {
                        if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antiemetics")
                            {
                                lstBox.Name = "ManagementAntiemetics";
                            }
                        if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antibiotics")
                            {
                                lstBox.Name = "ManagementAntibiotics";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antipyretic")
                            {
                                lstBox.Name = "ManagementAntipyretic";
                            }
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antispasmodic")
                            {
                                lstBox.Name = "ManagementAntispasmodic";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Normal saline")
                            {
                                lstBox.Name = "ManagementNormalSaline";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Nasal drops")
                            {
                                lstBox.Name = "ManagementNasalDrops";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Beclomethasone nasal spray")
                            {
                                lstBox.Name = "ManagementBeclomethasoneNasalSpray";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Budesonide nasal spray")
                            {
                                lstBox.Name = "ManagementBudesonideNasalSpray";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Macrolides")
                            {
                                lstBox.Name = "ManagementMacrolides";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Cephalosporins")
                            {
                                lstBox.Name = "ManagementCephalosporins";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Quinolones")
                            {
                                lstBox.Name = "ManagementQuinolones";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Tetracyclines")
                            {
                                lstBox.Name = "ManagementTetracyclines";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Penicillin")
                            {
                                lstBox.Name = "ManagementPenicillin";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Ipratropium bromide")
                            {
                                lstBox.Name = "ManagementIpratropiumBromide";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Expectorant")
                            {
                                lstBox.Name = "ManagementExpectorant";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Expectorant Mucolytic")
                            {
                                lstBox.Name = "ManagementExpectorantMucolytic";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Salbutamol")
                            {
                                lstBox.Name = "ManagementSalbutamol";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Salbutamol + Theophylline")
                            {
                                lstBox.Name = "ManagementSalbutamolTheophylline";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other bronchodilators")
                            {
                                lstBox.Name = "ManagementOtherBronchodilators";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Beclomethasone")
                            {
                                lstBox.Name = "ManagementBeclomethasone";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "H2 blockers")
                            {
                                lstBox.Name = "ManagementH2Blockers";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other H2 blockers")
                            {
                                lstBox.Name = "ManagementOtherH2Blockers";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antacids")
                            {
                                lstBox.Name = "ManagementAntacids";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antiallergic Cough")
                            {
                                lstBox.Name = "ManagementAntiallergicCough";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Codeine")
                            {
                                lstBox.Name = "ManagementCodeine";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Diethylcarbamazine (hetrazan) ")
                            {
                                lstBox.Name = "ManagementDiethylcarbamazineHetrazan";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Anti TB drugs")
                            {
                                lstBox.Name = "ManagementAntiTBDrugs";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Thiazide diuretics")
                            {
                                lstBox.Name = "ManagementThiazideDiuretics";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == " Other Diuretics")
                            {
                                lstBox.Name = "ManagementOtherDiuretics";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Anti hypertensives")
                            {
                                lstBox.Name = "ManagementAntiHypertensives";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "ACE-Inhibitors")
                            {
                                lstBox.Name = "ManagementACEInhibitors";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Angiotensin II receptor blockers")
                            {
                                lstBox.Name = "ManagementAngiotensinIIReceptorBlockers";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other calcium channel blockers")
                            {
                                lstBox.Name = "ManagementOtherCalciumChannelBlockers";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Metronidazole + clarithromycin")
                            {
                                lstBox.Name = "ManagementMetronidazoleClarithromycin";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Amoxicillin  + clarithromycin")
                            {
                                lstBox.Name = "ManagementAmoxicillinClarithromycin";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Clarithromycin+amoxicillin+omeprazole kit ")
                            {
                                lstBox.Name = "ManagementClarithromycinAmoxicillinOmeprazolekit";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Omeprazole+clarithromycin+tinidazole kit")
                            {
                                lstBox.Name = "ManagementOmeprazoleClarithromycinTinidazolekit";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Lactobacillus")
                            {
                                lstBox.Name = "ManagementLactobacillus";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other antidiarrheals")
                            {
                                lstBox.Name = "ManagementOtherAntidiarrheals";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Quinolones")
                            {
                                lstBox.Name = "ManagementQuinolones";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Tetracyclines")
                            {
                                lstBox.Name = "ManagementTetracyclines";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Oral rehydration solutions (ORS) ")
                            {
                                lstBox.Name = "ManagementOralRehydrationSolutionsORS";
                            }
                        }
                    }
                    //if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 8)
                    //{
                    //    lstBox.Name = "GeneralMedication";
                    //}


                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Medication" && PItem.Title == "Antibiotics")
                    //{
                    //    ListBox lstMA = (ListBox)Form.FindName("ManagementAntibiotics");
                    //    lstBox.ItemsSource = lstMA.ItemsSource;
                    //}
                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Medication" && PItem.Title == "Antipyretic")
                    //{
                    //    ListBox lstMA = (ListBox)Form.FindName("ManagementAntipyretic");
                    //    lstBox.ItemsSource = lstMA.ItemsSource;
                    //}
                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Follow up Medication" && PItem.Title == "Antispasmodic")
                    //{
                    //    ListBox lstMA = (ListBox)Form.FindName("ManagementAntispasmodic");
                    //    lstBox.ItemsSource = lstMA.ItemsSource;
                    //}
                    if (MedSetting.MedicationDrugType != null)
                    {
                        clsGetDrugListBizActionVO BizAction = new clsGetDrugListBizActionVO();
                        //BizAction.TheraputicID = ((MasterListItem)MedSetting.MedicationDrugType).ID;
                        //BizAction.MoleculeID = ((MasterListItem)MedSetting.MoleculeType).ID;
                        //BizAction.GroupID = ((MasterListItem)MedSetting.GroupType).ID;
                        //BizAction.CategoryID = ((MasterListItem)MedSetting.CategoryType).ID;
                        //BizAction.PregnancyID = ((MasterListItem)MedSetting.PregnancyClass).ID;
                        if (MedSetting.MedicationDrugType != null)
                            BizAction.TheraputicID = ((MasterListItem)MedSetting.MedicationDrugType).ID;
                        else
                            BizAction.TheraputicID = 0L;

                        if (MedSetting.MoleculeType != null)
                            BizAction.MoleculeID = ((MasterListItem)MedSetting.MoleculeType).ID;
                        else
                            BizAction.MoleculeID = 0L;

                        if (MedSetting.GroupType != null)
                            BizAction.GroupID = ((MasterListItem)MedSetting.GroupType).ID;
                        else
                            BizAction.GroupID = 0L;

                        if (MedSetting.CategoryType != null)
                            BizAction.CategoryID = ((MasterListItem)MedSetting.CategoryType).ID;
                        else
                            BizAction.CategoryID = 0L;

                        if (MedSetting.PregnancyClass != null)
                            BizAction.PregnancyID = ((MasterListItem)MedSetting.PregnancyClass).ID;
                        else
                            BizAction.PregnancyID = 0L;

                        Uri address = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                        PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address.AbsoluteUri);
                        client.ProcessCompleted += (s1, args) =>
                        {
                            if (args.Error == null && args.Result != null)
                            {
                                List<clsDrugVO> lstSourceDrug = ((clsGetDrugListBizActionVO)args.Result).objDrugList;

                                List<MasterListItem> lstDrug = new List<MasterListItem>();
                                for (int i = 0; i < lstSourceDrug.Count; i++)
                                {
                                    lstDrug.Add(new MasterListItem() { ID = ((clsDrugVO)lstSourceDrug[i]).ID, Description = ((clsDrugVO)lstSourceDrug[i]).DrugName });
                                }
                                // Sort Drug List                
                                lstDrug = (List<MasterListItem>)(lstDrug.OrderBy(i => i.Description).ToList<MasterListItem>());

                                for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
                                {
                                    ((Medication)MedSetting.ItemsSource[i]).DrugSource = lstDrug;

                                    MedicatioRepeterControlItem mrci = new MedicatioRepeterControlItem();
                                    mrci.OnAddRemoveClick += new RoutedEventHandler(mrci_OnAddRemoveClick);
                                    mrci.cmbSelectionChanged += new RoutedEventHandler(mrci_cmbSelectionChanged);
                                    mrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
                                    mrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
                                    mrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
                                    mrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

                                    mrci.btnContradictionSideEffectClick += new RoutedEventHandler(mrci_btnContradictionSideEffectClick);

                                    //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                                    MedSetting.ItemsSource[i].Index = i;
                                    MedSetting.ItemsSource[i].Command = ((i == MedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                                    MedSetting.ItemsSource[i].Parent = lstBox;
                                    MedSetting.ItemsSource[i].MedicationSetting = MedSetting;
                                    mrci.DataContext = MedSetting.ItemsSource[i];
                                    lstBox.Items.Add(mrci);
                                }

                                //Grid.SetRow(lstBox, Container.RowDefinitions.Count - 1);
                                //Grid.SetColumn(lstBox, 1);
                                //if (IdDependentField)
                                //    FTitle.Visibility = lstBox.Visibility = Visibility.Collapsed;
                                //PItem.Control = lstBox;
                                //Container.Children.Add(lstBox);
                            }
                        };
                        client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
                        client.CloseAsync();
                    }
                    else
                    {
                        for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
                        {
                            MedicatioRepeterControlItem mrci = new MedicatioRepeterControlItem();
                            mrci.OnAddRemoveClick += new RoutedEventHandler(mrci_OnAddRemoveClick);
                            mrci.cmbSelectionChanged += new RoutedEventHandler(mrci_cmbSelectionChanged);
                            mrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
                            mrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
                            mrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
                            mrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

                            mrci.btnContradictionSideEffectClick += new RoutedEventHandler(mrci_btnContradictionSideEffectClick);

                            //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                            MedSetting.ItemsSource[i].Index = i;
                            MedSetting.ItemsSource[i].Command = ((i == MedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                            MedSetting.ItemsSource[i].Parent = lstBox;
                            MedSetting.ItemsSource[i].MedicationSetting = MedSetting;
                            mrci.DataContext = MedSetting.ItemsSource[i];
                            lstBox.Items.Add(mrci);
                        }
                        //Grid.SetRow(lstBox, Container.RowDefinitions.Count - 1);
                        //Grid.SetColumn(lstBox, 1);
                        //if (IdDependentField)
                        //    FTitle.Visibility = lstBox.Visibility = Visibility.Collapsed;
                        //PItem.Control = lstBox;
                        //Container.Children.Add(lstBox);
                    }

                    Grid.SetRow(lstBox, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(lstBox, 1);
                    if (IdDependentField)
                        FTitle.Visibility = lstBox.Visibility = Visibility.Collapsed;
                    PItem.Control = lstBox;
                    Container.Children.Add(lstBox);
                    break;

                case 10:
                    RowDefinition Row1 = new RowDefinition();
                    Row1.Height = new GridLength();
                    Container.RowDefinitions.Add(Row1);

                    Grid s = new Grid();
                    s.Name = "FollowUpMedication";
                    s = GetGridSchema(s);

                    Grid.SetRow(s, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(s, 0);
                    Grid.SetColumnSpan(s, 2);
                    Container.Children.Add(s);
                    break;

                case 11:
                    OtherInvestigationFieldSetting InvestSetting = ((OtherInvestigationFieldSetting)PItem.Settings);
                    FTitle.VerticalAlignment = VerticalAlignment.Top;
                    FTitle.Margin = new Thickness(2, 8, 2, 0);
                    ListBox lstBoxInvest = new ListBox();
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(lstBoxInvest, tt);
                        #region new added by harish
                        lstBoxInvest.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    lstBoxInvest.DataContext = PItem;
                    lstBoxInvest.IsEnabled = WritePerm;
                    //lstBoxInvest.SelectionChanged += new SelectionChangedEventHandler(lstBoxInvest_SelectionChanged);
                    lstBoxInvest.Margin = new Thickness(2);
                    //lstBox.ItemTemplate = (DataTemplate)this.Resources["ListItemDataTemplate"];
                    //lstBox.ItemContainerStyle = (Style)this.Resources["ListBoxItemStyle"];

                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antiemetics")
                    //{
                    //    lstBox.Name = "ManagementAntiemetics";
                    //}
                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antibiotics")
                    //{
                    //    lstBox.Name = "ManagementAntibiotics";
                    //}
                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antipyretic")
                    //{
                    //    lstBox.Name = "ManagementAntipyretic";
                    //}
                    //if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Antispasmodic")
                    //{
                    //    lstBox.Name = "ManagementAntispasmodic";
                    //}
                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                    {
                        if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Other tests ")
                            {
                                lstBoxInvest.Name = "InvestOtherTests";
                            }
                        }
                    }

                    for (int i = 0; i < InvestSetting.ItemsSource.Count; i++)
                    {
                        InvestigationRepetorControlItem irci = new InvestigationRepetorControlItem();
                        irci.OnAddRemoveClick += new RoutedEventHandler(irci_OnAddRemoveClick);
                        irci.cmbSelectionChanged += new RoutedEventHandler(irci_cmbSelectionChanged);
                        //irci.txtRemarksLostFocus += new RoutedEventHandler(irci_txtRemarksLostFocus);
                        irci.txtRemarksTextChanged += new RoutedEventHandler(irci_txtRemarksTextChanged);
                        //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                        InvestSetting.ItemsSource[i].Index = i;
                        InvestSetting.ItemsSource[i].Command = ((i == InvestSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                        InvestSetting.ItemsSource[i].Parent = lstBoxInvest;
                        InvestSetting.ItemsSource[i].InvestigationSetting = InvestSetting;
                        irci.DataContext = InvestSetting.ItemsSource[i];
                        lstBoxInvest.Items.Add(irci);

                    }


                    Grid.SetRow(lstBoxInvest, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(lstBoxInvest, 1);
                    if (IdDependentField)
                        FTitle.Visibility = lstBoxInvest.Visibility = Visibility.Collapsed;
                    PItem.Control = lstBoxInvest;
                    Container.Children.Add(lstBoxInvest);
                    break;

                case 12:
                    ListOfCheckBoxesFieldSetting listSetting1 = ((ListOfCheckBoxesFieldSetting)PItem.Settings);
                    //ListBox lbList1 = new ListBox();
                    ComboBox lbList1 = new ComboBox();
                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null && ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                    {
                        if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Nutritional advise")
                        {
                            lbList1.Name = "NutritionAdvise";
                        }
                    }
                    lbList1.SelectionChanged += new SelectionChangedEventHandler(lbList1_SelectionChanged);
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(lbList1, tt);
                        #region new added by harish
                        lbList1.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    //lbList1.SelectionMode = System.Windows.Controls.SelectionMode.Multiple;
                    lbList1.DataContext = PItem;
                    lbList1.IsEnabled = WritePerm;
                    //Binding Sourcebinding2 = new Binding("Settings.ItemSource");
                    //Sourcebinding2.Mode = BindingMode.OneWay;
                    //lbList1.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding2);

                    int j = 0;
                    while (j < listSetting1.ItemsSource.Count)
                    {
                        CheckBox chk = new CheckBox();

                        if (listSetting1.ListType == "Nutrition List" && listSetting1.ItemsSource[j] == "Other")
                            chk.Name = "chkOtherN";
                        if (listSetting1.ListType == "Other Alarms" && listSetting1.ItemsSource[j] == "Other")
                            chk.Name = "chkOtherA";

                        chk.Tag = j;
                        chk.Checked += new RoutedEventHandler(chk_Checked);
                        chk.Unchecked += new RoutedEventHandler(chk_Unchecked);

                        chk.Content = listSetting1.ItemsSource[j];
                        chk.Margin = new Thickness(2);
                        //chk.Click += new RoutedEventHandler(chk_Click);

                        chk.DataContext = PItem;
                        chk.IsChecked = listSetting1.SelectedItems[j];

                        lbList1.Items.Add(chk);
                        j++;
                    }
                    //lbList1.MaxHeight = 100;
                    lbList1.MaxHeight = 100;
                    lbList1.Margin = new Thickness(2);
                    Grid.SetRow(lbList1, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(lbList1, 1);
                    PItem.Control = lbList1;
                    if (IdDependentField)
                        FTitle.Visibility = lbList1.Visibility = Visibility.Visible;
                    Container.Children.Add(lbList1);

                    #region Code for Other Nutrition TextBox
                    RowDefinition Row2 = new RowDefinition();
                    Row2.Height = new GridLength(23, GridUnitType.Auto);
                    Container.RowDefinitions.Add(Row2);

                    TextBlock FTitle1 = new TextBlock();
                    if (!listSetting1.IsOtherText)
                        FTitle1.Visibility = Visibility.Collapsed;

                    if (listSetting1.ListType == "Nutrition List")
                    {
                        FTitle1.Name = "ONTitle";
                        FTitle1.Text = "Other Nutrition : ";
                    }
                    if (listSetting1.ListType == "Other Alarms")
                    {
                        FTitle1.Name = "OATitle";
                        FTitle1.Text = "Other Alarms : ";
                    }
                    FTitle1.HorizontalAlignment = HorizontalAlignment.Right;
                    FTitle1.VerticalAlignment = VerticalAlignment.Center;
                    FTitle1.Margin = new Thickness(2);

                    Grid.SetRow(FTitle1, Container.RowDefinitions.Count - 1);
                    Container.Children.Add(FTitle1);

                    TextBox Field2 = new TextBox();
                    if (!listSetting1.IsOtherText)
                        Field2.Visibility = Visibility.Collapsed;
                    if (listSetting1.ListType == "Nutrition List")
                    {
                        Field2.Name = "ONField";
                    }
                    if (listSetting1.ListType == "Other Alarms")
                    {
                        Field2.Name = "OAField";
                    }

                    Field2.DataContext = PItem;
                    Field2.IsEnabled = WritePerm;
                    Binding binding2 = new Binding("Settings.OtherText");
                    binding2.Mode = BindingMode.TwoWay;
                    Field2.SetBinding(TextBox.TextProperty, binding2);
                    Field2.Margin = new Thickness(2);
                    Grid.SetRow(Field2, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(Field2, 1);

                    Field2.AcceptsReturn = true;
                    Field2.Height = 60;
                    Field2.VerticalScrollBarVisibility = ScrollBarVisibility.Visible;

                    Container.Children.Add(Field2);
                    #endregion
                    break;
                case 13:
                    AutomatedListFieldSetting AutolistSetting = ((AutomatedListFieldSetting)PItem.Settings);
                    switch (AutolistSetting.ControlType)
                    {
                        case AutoListControlType.ComboBox:
                            #region Region for Auto Combo
                            ComboBox cmbList = new ComboBox();
                            if (PItem.IsToolTip == true)
                            {
                                //ToolTipService.SetToolTip(cmbList, tt);
                                #region new added by harish
                                cmbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                #endregion
                            }
                            cmbList.IsEnabled = WritePerm;
                            cmbList.DataContext = PItem;
                            PItem.Control = cmbList;

                            //if (AutolistSetting.SelectedItem != null)
                            //    listSetting.SelectedItem = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                            //else
                            //{
                            //    if (listSetting.ItemSource.Count != 0)
                            //        listSetting.SelectedItem = listSetting.ItemSource[0];
                            //    listSetting.SelectedItem = null;
                            //}
                            cmbList.DisplayMemberPath = "Description";                           
                            cmbList.SelectedValuePath = "ID";
                            if (false == true)
                            {
                                clsGetMasterListByTableNameAndColumnNameBizActionVO BizAction = new clsGetMasterListByTableNameAndColumnNameBizActionVO();
                                BizAction.MasterTable = ((MasterListItem)AutolistSetting.SelectedTable).Description;
                                BizAction.ColumnName = ((MasterListItem)AutolistSetting.SelectedColumn).Description;

                                BizAction.MasterList = new List<MasterListItem>();
                                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                                PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                client1.ProcessCompleted += (s1, args) =>
                                {
                                    if (args.Error == null && args.Result != null)
                                    {
                                        List<MasterListItem> SourceList = ((clsGetMasterListByTableNameAndColumnNameBizActionVO)args.Result).MasterList;
                                        ((AutomatedListFieldSetting)PItem.Settings).ItemSource = SourceList;

                                        Binding Sourcebinding = new Binding("Settings.ItemSource");
                                        Sourcebinding.Mode = BindingMode.OneWay;
                                        cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                                        Binding SIbinding = new Binding("Settings.SelectedItem");
                                        SIbinding.Mode = BindingMode.TwoWay;
                                        cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);
                                    }
                                };
                                client1.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
                                client1.CloseAsync();
                            }
                            else
                            {
                                //Binding Sourcebinding = new Binding("Settings.ItemSource");
                                //Sourcebinding.Mode = BindingMode.OneWay;
                             
                                //cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                                //Binding SIbinding = new Binding("Settings.SelectedItem");
                                //SIbinding.Mode = BindingMode.TwoWay;
                                //cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);


                                 Binding Sourcebinding = new Binding("Settings.ItemSource");
                                Sourcebinding.Mode = BindingMode.OneWay;
                                cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                                Binding SIbinding = new Binding("Settings.SelectedItem");
                                SIbinding.Mode = BindingMode.TwoWay;
                                cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);
                            }
                            //cmbList.Margin = new Thickness(2);
                            //Grid.SetRow(cmbList, Container.RowDefinitions.Count - 1);
                            //Grid.SetColumn(cmbList, 1);
                            //cmbList.ItemsSource = AutolistSetting.ItemSource;
                            //if (AutolistSetting.SelectedItem != null)
                            //{
                            //    //cmbList.Name  = AutolistSetting.SelectedItem.Description;
                            //    ((AutomatedListFieldSetting)PItem.Settings).SelectedItem = AutolistSetting.SelectedItem;
                            //    Binding Sourcebinding = new Binding("Settings.SelectedItem");
                            //    Sourcebinding.Mode = BindingMode.OneWay;
                            //    cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                            //    Binding SIbinding = new Binding("Settings.SelectedItem");
                            //    SIbinding.Mode = BindingMode.TwoWay;
                            //    cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);

                               // cmbList.SelectedValue = ((ComboBox)AutolistSetting.SelectedItem).ID;
                                
                               // cmbList.SelectedIndex =Convert.ToInt32(AutolistSetting.SelectedItem.ID);
                                //cmbList.SelectedItem = AutolistSetting.SelectedItem;
                                //cmbList.SelectedValuePath = Convert.ToString(AutolistSetting.SelectedItem.ID);
                           // }

                            object lst = cmbList.ItemsSource;
                            cmbList.Margin = new Thickness(2);
                            Grid.SetRow(cmbList, Container.RowDefinitions.Count - 1);
                            Grid.SetColumn(cmbList, 1);
                            //cmbList.ItemsSource = AutolistSetting.ItemSource;
                            if (AutolistSetting.SelectedItem != null)
                                cmbList.SelectedValue = AutolistSetting.SelectedItem.ID;
                           
                             

                        

                            cmbList.SelectionChanged += new SelectionChangedEventHandler(AutoComboList_SelectionChanged);
                            if (PItem.IsRequired)
                            {
                                cmbList.SetValidation(PItem.Title + " is required.");
                                cmbList.RaiseValidationError();
                            }
                            if (IdDependentField)
                                FTitle.Visibility = cmbList.Visibility = Visibility.Visible;
                            Container.Children.Add(cmbList);
                            #endregion
                            break;
                        case AutoListControlType.ListBox:
                            switch (AutolistSetting.ChoiceMode)
                            {
                                case SelectionMode.Single:
                                    //Region for Auto List (SelectionMode-Single)
                                    #region Region for Auto List (SelectionMode-Single)
                                    ListBox lbListSingle = new ListBox();
                                    if (PItem.IsToolTip == true)
                                    {
                                        //ToolTipService.SetToolTip(lbList, tt);
                                        #region new added by harish
                                        lbListSingle.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                        #endregion
                                    }
                                    lbListSingle.IsEnabled = WritePerm;
                                    lbListSingle.SelectionMode = System.Windows.Controls.SelectionMode.Single;
                                    lbListSingle.DataContext = PItem;
                                    lbListSingle.DisplayMemberPath = "Description";
                                    lbListSingle.SelectedValuePath = "ID";
                                    if (AutolistSetting.IsDynamic == true)
                                    {
                                        clsGetMasterListByTableNameAndColumnNameBizActionVO BizAction = new clsGetMasterListByTableNameAndColumnNameBizActionVO();
                                        BizAction.MasterTable = ((MasterListItem)AutolistSetting.SelectedTable).Description;
                                        BizAction.ColumnName = ((MasterListItem)AutolistSetting.SelectedColumn).Description;

                                        BizAction.MasterList = new List<MasterListItem>();
                                        Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                                        PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client1.ProcessCompleted += (s1, args) =>
                                        {
                                            if (args.Error == null && args.Result != null)
                                            {
                                                List<MasterListItem> SourceList = ((clsGetMasterListByTableNameAndColumnNameBizActionVO)args.Result).MasterList;
                                                ((AutomatedListFieldSetting)PItem.Settings).ItemSource = SourceList;

                                                Binding Sourcebinding1 = new Binding("Settings.ItemSource");
                                                Sourcebinding1.Mode = BindingMode.OneWay;
                                                lbListSingle.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding1);
                                                Binding SIbinding1 = new Binding("Settings.SelectedItem");
                                                SIbinding1.Mode = BindingMode.TwoWay;
                                                lbListSingle.SetBinding(ListBox.SelectedItemProperty, SIbinding1);
                                            }
                                        };
                                        client1.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client1.CloseAsync();
                                    }
                                    else
                                    {
                                        Binding Sourcebinding1 = new Binding("Settings.ItemSource");
                                        Sourcebinding1.Mode = BindingMode.OneWay;
                                        lbListSingle.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding1);
                                        Binding SIbinding1 = new Binding("Settings.SelectedItem");
                                        SIbinding1.Mode = BindingMode.TwoWay;
                                        lbListSingle.SetBinding(ListBox.SelectedItemProperty, SIbinding1);
                                    }
                                    lbListSingle.MaxHeight = 100;

                                    lbListSingle.Margin = new Thickness(2);

                                    Grid.SetRow(lbListSingle, Container.RowDefinitions.Count - 1);
                                    Grid.SetColumn(lbListSingle, 1);

                                    //lbListSingle.ItemsSource = AutolistSetting.ItemSource;
                                    if (AutolistSetting.SelectedItem != null)
                                        lbListSingle.SelectedValue = AutolistSetting.SelectedItem.ID;

                                    lbListSingle.SelectionChanged += new SelectionChangedEventHandler(AutoComboList_SelectionChanged);
                                    PItem.Control = lbListSingle;

                                    if (IdDependentField)
                                        FTitle.Visibility = lbListSingle.Visibility = Visibility.Visible;
                                    Container.Children.Add(lbListSingle);
                                    #endregion
                                    break;
                                case SelectionMode.Multiples:
                                    //Region for Auto List (SelectionMode-Multiple)
                                    #region Region for Auto List (SelectionMode-Multiple)
                                    ListBox lbList = new ListBox();
                                    if (PItem.IsToolTip == true)
                                    {
                                        //ToolTipService.SetToolTip(lbList, tt);
                                        #region new added by harish
                                        lbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                        #endregion
                                    }
                                    lbList.IsEnabled = WritePerm;
                                    lbList.SelectionMode = System.Windows.Controls.SelectionMode.Multiple;
                                    lbList.DataContext = PItem;
                                    if (AutolistSetting.IsDynamic == true)
                                    {
                                        clsGetMasterListByTableNameAndColumnNameBizActionVO BizAction = new clsGetMasterListByTableNameAndColumnNameBizActionVO();
                                        BizAction.MasterTable = ((MasterListItem)AutolistSetting.SelectedTable).Description;
                                        BizAction.ColumnName = ((MasterListItem)AutolistSetting.SelectedColumn).Description;

                                        BizAction.MasterList = new List<MasterListItem>();
                                        Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                                        PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                        client1.ProcessCompleted += (s1, args) =>
                                        {
                                            if (args.Error == null && args.Result != null)
                                            {
                                                List<MasterListItem> SourceList = ((clsGetMasterListByTableNameAndColumnNameBizActionVO)args.Result).MasterList;
                                                ((AutomatedListFieldSetting)PItem.Settings).ItemSource = SourceList;

                                                Binding Sourcebinding2 = new Binding("Settings.ItemSource");
                                                Sourcebinding2.Mode = BindingMode.OneWay;
                                                lbList.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding2);

                                                if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                                    foreach (var item in AutolistSetting.SelectedItems)
                                                    {
                                                        lbList.SelectedItems.Add(AutolistSetting.ItemSource.Where(i => i.ID == item.ID).Single());
                                                    }
                                                lbList.SelectionChanged += new SelectionChangedEventHandler(lbAutoList_SelectionChanged);
                                            }
                                        };
                                        client1.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
                                        client1.CloseAsync();
                                    }
                                    else
                                    {
                                        Binding Sourcebinding2 = new Binding("Settings.ItemSource");
                                        Sourcebinding2.Mode = BindingMode.OneWay;
                                        lbList.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding2);

                                        if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                            foreach (var item in AutolistSetting.SelectedItems)
                                            {
                                                lbList.SelectedItems.Add(AutolistSetting.ItemSource.Where(i => i.ID == item.ID).Single());
                                            }
                                        lbList.SelectionChanged += new SelectionChangedEventHandler(lbAutoList_SelectionChanged);
                                    }
                                    lbList.MaxHeight = 100;
                                    lbList.DisplayMemberPath = "Description";
                                    //lbList.SelectedValuePath = "ID";
                                    lbList.Margin = new Thickness(2);
                                    //lbList.SelectionChanged += new SelectionChangedEventHandler(lbAutoList_SelectionChanged);
                                    Grid.SetRow(lbList, Container.RowDefinitions.Count - 1);
                                    Grid.SetColumn(lbList, 1);
                                    //lbList.ItemsSource = AutolistSetting.ItemSource;

                                    PItem.Control = lbList;
                                    if (IdDependentField)
                                        FTitle.Visibility = lbList.Visibility = Visibility.Visible;
                                    Container.Children.Add(lbList);
                                    #endregion
                                    break;
                            }
                            break;
                        case AutoListControlType.CheckListBox:
                            FTitle.VerticalAlignment = VerticalAlignment.Top;
                            FTitle.Margin = new Thickness(2, 8, 2, 0);
                            ListBox CheckListBox = new ListBox();
                            CheckListBox.MaxHeight = 100;
                            if (PItem.IsToolTip == true)
                            {
                                //ToolTipService.SetToolTip(lstBox, tt);
                                #region new added by harish
                                CheckListBox.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                #endregion
                            }
                            CheckListBox.IsEnabled = WritePerm;
                            CheckListBox.DataContext = PItem;
                            CheckListBox.Tag = PItem;
                            CheckListBox.Margin = new Thickness(2);
                            if (AutolistSetting.IsDynamic == true)
                            {
                                clsGetMasterListByTableNameAndColumnNameBizActionVO BizAction = new clsGetMasterListByTableNameAndColumnNameBizActionVO();
                                BizAction.MasterTable = ((MasterListItem)AutolistSetting.SelectedTable).Description;
                                BizAction.ColumnName = ((MasterListItem)AutolistSetting.SelectedColumn).Description;

                                BizAction.MasterList = new List<MasterListItem>();
                                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                                PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                                client1.ProcessCompleted += (s1, args) =>
                                {
                                    if (args.Error == null && args.Result != null)
                                    {
                                        List<MasterListItem> SourceList = ((clsGetMasterListByTableNameAndColumnNameBizActionVO)args.Result).MasterList;
                                        if (AutolistSetting.ControlType == AutoListControlType.CheckListBox)
                                        {
                                            foreach (var SLI in SourceList)
                                            {
                                                foreach (var ItemSourceItem in ((AutomatedListFieldSetting)PItem.Settings).ItemSource)
                                                {
                                                    if (SLI.ID == ItemSourceItem.ID)
                                                    {
                                                        SLI.Status = ItemSourceItem.Status;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        ((AutomatedListFieldSetting)PItem.Settings).ItemSource = SourceList;
                                        for (int k = 0; k < AutolistSetting.ItemSource.Count; k++)
                                        {
                                            CheckListBoxControlItem CLBCI = new CheckListBoxControlItem();
                                            CLBCI.chkItemClicked += new RoutedEventHandler(CLBCI_chkItemClicked);
                                            CLBCI.DataContext = AutolistSetting.ItemSource[k];
                                            CLBCI.Tag = PItem;
                                            CheckListBox.Items.Add(CLBCI);
                                        }
                                    }
                                };
                                client1.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
                                client1.CloseAsync();
                            }
                            else
                            {
                                for (int k = 0; k < AutolistSetting.ItemSource.Count; k++)
                                {
                                    CheckListBoxControlItem CLBCI = new CheckListBoxControlItem();
                                    CLBCI.chkItemClicked += new RoutedEventHandler(CLBCI_chkItemClicked);
                                    CLBCI.DataContext = AutolistSetting.ItemSource[k];
                                    CLBCI.Tag = PItem;
                                    CheckListBox.Items.Add(CLBCI);
                                }
                            }
                            Grid.SetRow(CheckListBox, Container.RowDefinitions.Count - 1);
                            Grid.SetColumn(CheckListBox, 1);
                            if (IdDependentField)
                                FTitle.Visibility = CheckListBox.Visibility = Visibility.Collapsed;
                            PItem.Control = CheckListBox;
                            Container.Children.Add(CheckListBox);
                            break;
                    }
                    break;
                case 14:
                    OtherMedicationFieldSetting OtherMedSetting = ((OtherMedicationFieldSetting)PItem.Settings);
                    FTitle.VerticalAlignment = VerticalAlignment.Top;
                    FTitle.Margin = new Thickness(2, 8, 2, 0);
                    ListBox OtherMedlstBox = new ListBox();
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(lstBox, tt);
                        #region new added by harish
                        OtherMedlstBox.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    OtherMedlstBox.DataContext = PItem;
                    OtherMedlstBox.IsEnabled = WritePerm;
                    OtherMedlstBox.Margin = new Thickness(2);

                    if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                    {
                        if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other antiallergics")
                            {
                                OtherMedlstBox.Name = "ManagementOtherAntiallergics";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Others")
                            {
                                OtherMedlstBox.Name = "ManagementOthers";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other drugs")
                            {
                                OtherMedlstBox.Name = "ManagementOtherDrugs";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Others")
                            {
                                OtherMedlstBox.Name = "ManagementOthers";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other antibiotics")
                            {
                                OtherMedlstBox.Name = "ManagementOtherAntibiotics";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other drugs")
                            {
                                OtherMedlstBox.Name = "ManagementOtherDrugs";
                            }
                        }
                        else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                        {
                            if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other antibiotics")
                            {
                                OtherMedlstBox.Name = "ManagementOtherAntibiotics";
                            }
                            else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Management" && PItem.Title == "Other drugs")
                            {
                                OtherMedlstBox.Name = "ManagementOtherDrugs";
                            }
                        }
                    }

                    for (int i = 0; i < OtherMedSetting.ItemsSource.Count; i++)
                    {
                        OtherMedicatioRepeterControlItem Otmrci = new OtherMedicatioRepeterControlItem();
                        Otmrci.OnAddRemoveClick += new RoutedEventHandler(Otmrci_OnAddRemoveClick);
                        Otmrci.cmbSelectionChanged += new RoutedEventHandler(Otmrci_cmbSelectionChanged);
                        Otmrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
                        Otmrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
                        Otmrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
                        Otmrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

                        //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                        OtherMedSetting.ItemsSource[i].Index = i;
                        OtherMedSetting.ItemsSource[i].Command = ((i == OtherMedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                        OtherMedSetting.ItemsSource[i].Parent = OtherMedlstBox;
                        OtherMedSetting.ItemsSource[i].MedicationSetting = OtherMedSetting;
                        Otmrci.DataContext = OtherMedSetting.ItemsSource[i];
                        OtherMedlstBox.Items.Add(Otmrci);
                    }
                    Grid.SetRow(OtherMedlstBox, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(OtherMedlstBox, 1);
                    if (IdDependentField)
                        FTitle.Visibility = OtherMedlstBox.Visibility = Visibility.Collapsed;
                    PItem.Control = OtherMedlstBox;
                    Container.Children.Add(OtherMedlstBox);

                    break;
                case 15:
                    InvestigationFieldSetting InvestAutolistSetting = ((InvestigationFieldSetting)PItem.Settings);
                    switch (InvestAutolistSetting.ControlType)
                    {
                        case AutoListControlType.ComboBox:
                            #region Region for Auto Combo
                            ComboBox cmbList = new ComboBox();
                            if (PItem.IsToolTip == true)
                            {
                                //ToolTipService.SetToolTip(cmbList, tt);
                                #region new added by harish
                                cmbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                #endregion
                            }
                            cmbList.IsEnabled = WritePerm;
                            cmbList.DataContext = PItem;
                            PItem.Control = cmbList;

                            cmbList.DisplayMemberPath = "Description";
                            cmbList.SelectedValuePath = "ID";

                            Binding Sourcebinding = new Binding("Settings.ItemSource");
                            Sourcebinding.Mode = BindingMode.OneWay;
                            cmbList.SetBinding(ComboBox.ItemsSourceProperty, Sourcebinding);
                            Binding SIbinding = new Binding("Settings.SelectedItem");
                            SIbinding.Mode = BindingMode.TwoWay;
                            cmbList.SetBinding(ComboBox.SelectedItemProperty, SIbinding);
                            cmbList.Margin = new Thickness(2);
                            Grid.SetRow(cmbList, Container.RowDefinitions.Count - 1);
                            Grid.SetColumn(cmbList, 1);
                            //cmbList.ItemsSource = AutolistSetting.ItemSource;
                            if (InvestAutolistSetting.SelectedItem != null)
                                cmbList.SelectedValue = InvestAutolistSetting.SelectedItem.ID;

                            cmbList.SelectionChanged += new SelectionChangedEventHandler(InvestAutoComboList_SelectionChanged);
                            if (PItem.IsRequired)
                            {
                                cmbList.SetValidation(PItem.Title + " is required.");
                                cmbList.RaiseValidationError();
                            }
                            if (IdDependentField)
                                FTitle.Visibility = cmbList.Visibility = Visibility.Visible;
                            Container.Children.Add(cmbList);
                            #endregion
                            break;
                        case AutoListControlType.ListBox:
                            switch (InvestAutolistSetting.ChoiceMode)
                            {
                                case SelectionMode.Single:
                                    //Region for Auto List (SelectionMode-Single)
                                    #region Region for Auto List (SelectionMode-Single)
                                    ListBox lbListSingle = new ListBox();
                                    if (PItem.IsToolTip == true)
                                    {
                                        //ToolTipService.SetToolTip(lbList, tt);
                                        #region new added by harish
                                        lbListSingle.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                        #endregion
                                    }
                                    lbListSingle.IsEnabled = WritePerm;
                                    lbListSingle.SelectionMode = System.Windows.Controls.SelectionMode.Single;
                                    lbListSingle.DataContext = PItem;
                                    lbListSingle.DisplayMemberPath = "Description";
                                    lbListSingle.SelectedValuePath = "ID";
                                    Binding Sourcebinding1 = new Binding("Settings.ItemSource");
                                    Sourcebinding1.Mode = BindingMode.OneWay;
                                    lbListSingle.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding1);
                                    Binding SIbinding1 = new Binding("Settings.SelectedItem");
                                    SIbinding1.Mode = BindingMode.TwoWay;
                                    lbListSingle.SetBinding(ListBox.SelectedItemProperty, SIbinding1);

                                    lbListSingle.MaxHeight = 100;

                                    lbListSingle.Margin = new Thickness(2);

                                    Grid.SetRow(lbListSingle, Container.RowDefinitions.Count - 1);
                                    Grid.SetColumn(lbListSingle, 1);

                                    //lbListSingle.ItemsSource = AutolistSetting.ItemSource;
                                    if (InvestAutolistSetting.SelectedItem != null)
                                        lbListSingle.SelectedValue = InvestAutolistSetting.SelectedItem.ID;

                                    lbListSingle.SelectionChanged += new SelectionChangedEventHandler(InvestAutoComboList_SelectionChanged);
                                    PItem.Control = lbListSingle;

                                    if (IdDependentField)
                                        FTitle.Visibility = lbListSingle.Visibility = Visibility.Visible;
                                    Container.Children.Add(lbListSingle);
                                    #endregion
                                    break;
                                case SelectionMode.Multiples:
                                    //Region for Auto List (SelectionMode-Multiple)
                                    #region Region for Auto List (SelectionMode-Multiple)
                                    ListBox lbList = new ListBox();
                                    if (PItem.IsToolTip == true)
                                    {
                                        //ToolTipService.SetToolTip(lbList, tt);
                                        #region new added by harish
                                        lbList.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                        #endregion
                                    }
                                    lbList.IsEnabled = WritePerm;
                                    lbList.SelectionMode = System.Windows.Controls.SelectionMode.Multiple;
                                    lbList.DataContext = PItem;

                                    Binding Sourcebinding2 = new Binding("Settings.ItemSource");
                                    Sourcebinding2.Mode = BindingMode.OneWay;
                                    lbList.SetBinding(ListBox.ItemsSourceProperty, Sourcebinding2);

                                    if (InvestAutolistSetting.SelectedItems != null && InvestAutolistSetting.SelectedItems.Count > 0)
                                        foreach (var item in InvestAutolistSetting.SelectedItems)
                                        {
                                            lbList.SelectedItems.Add(InvestAutolistSetting.ItemSource.Where(i => i.ID == item.ID).Single());
                                        }

                                    lbList.MaxHeight = 100;
                                    lbList.DisplayMemberPath = "Description";
                                    //lbList.SelectedValuePath = "ID";
                                    lbList.Margin = new Thickness(2);
                                    lbList.SelectionChanged += new SelectionChangedEventHandler(lbInvestAutoList_SelectionChanged);
                                    Grid.SetRow(lbList, Container.RowDefinitions.Count - 1);
                                    Grid.SetColumn(lbList, 1);
                                    //lbList.ItemsSource = AutolistSetting.ItemSource;

                                    PItem.Control = lbList;
                                    if (IdDependentField)
                                        FTitle.Visibility = lbList.Visibility = Visibility.Visible;
                                    Container.Children.Add(lbList);
                                    #endregion
                                    break;
                            }
                            break;
                        case AutoListControlType.CheckListBox:
                            FTitle.VerticalAlignment = VerticalAlignment.Top;
                            FTitle.Margin = new Thickness(2, 8, 2, 0);
                            ListBox CheckListBox = new ListBox();
                            CheckListBox.MaxHeight = 100;
                            if (PItem.IsToolTip == true)
                            {
                                //ToolTipService.SetToolTip(lstBox, tt);
                                #region new added by harish
                                CheckListBox.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                                #endregion
                            }

                            if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                            {
                                if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                                {
                                    if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Labs")
                                    {
                                        CheckListBox.Name = "InvestLabs";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Radiology")
                                    {
                                        CheckListBox.Name = "InvestRadiology";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Labs & services")
                                    {
                                        CheckListBox.Name = "InvestAdditionalInvestigations";
                                    }

                                }
                                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                                {
                                    if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Lab Services")
                                    {
                                        CheckListBox.Name = "InvestLabServices";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "ECG")
                                    {
                                        CheckListBox.Name = "InvestECG";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Labs")
                                    {
                                        CheckListBox.Name = "InvestLabs";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Ambulatory blood pressure monitoring ")
                                    {
                                        CheckListBox.Name = "InvestAmbulatoryBloodPressureMonitoring";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Radiology")
                                    {
                                        CheckListBox.Name = "InvestRadiology";
                                    }
                                }
                                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                                {
                                    if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Labs")
                                    {
                                        CheckListBox.Name = "InvestLabs";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Radiology")
                                    {
                                        CheckListBox.Name = "InvestRadiology";
                                    }
                                }
                                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                                {
                                    if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Labs")
                                    {
                                        CheckListBox.Name = "InvestLabs";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Ova / parasite test")
                                    {
                                        CheckListBox.Name = "InvestOvaParasiteTest";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Clinitest or Benedict’s test ")
                                    {
                                        CheckListBox.Name = "InvestClinitestOrBenedictsTest";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Stool exam for phenolphthalein and magnesium sulphate")
                                    {
                                        CheckListBox.Name = "InvestStoolExamForPhenolphthaleinAndMagnesiumSulphate";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Radiology")
                                    {
                                        CheckListBox.Name = "InvestRadiology";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Small bowel biopsy ")
                                    {
                                        CheckListBox.Name = "InvestSmallBowelBiopsy ";
                                    }
                                    else if ((string)((Grid)((Border)Container.Parent).Parent).Tag == "Investigations" && PItem.Title == "Sigmoidoscopy or colonoscopy with biopsies ")
                                    {
                                        CheckListBox.Name = "InvestSigmoidoscopyOrColonoscopyWithBiopsies";
                                    }
                                }
                            }
                            CheckListBox.IsEnabled = WritePerm;
                            CheckListBox.DataContext = PItem;
                            CheckListBox.Tag = PItem;
                            CheckListBox.Margin = new Thickness(2);
                            for (int k = 0; k < InvestAutolistSetting.ItemSource.Count; k++)
                            {
                                CheckListBoxControlItem CLBCI = new CheckListBoxControlItem();
                                CLBCI.chkItemClicked += new RoutedEventHandler(InvestCLBCI_chkItemClicked);
                                CLBCI.DataContext = InvestAutolistSetting.ItemSource[k];
                                CLBCI.Tag = PItem;
                                CheckListBox.Items.Add(CLBCI);
                            }
                            Grid.SetRow(CheckListBox, Container.RowDefinitions.Count - 1);
                            Grid.SetColumn(CheckListBox, 1);
                            if (IdDependentField)
                                FTitle.Visibility = CheckListBox.Visibility = Visibility.Collapsed;
                            PItem.Control = CheckListBox;
                            Container.Children.Add(CheckListBox);
                            break;
                    }
                    break;
                case 16:
                    TimePicker TP = new TimePicker();
                    TP.Width = (double)100;
                    TP.HorizontalAlignment = HorizontalAlignment.Left;
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(dtp, tt);
                        #region new added by harish
                        TP.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion
                    TP.IsEnabled = WritePerm;
                    #region new added by harish
                    TP.DataContext = PItem;
                    #endregion
                    TP.Margin = new Thickness(2);
                    binding = new Binding("Settings.Time");
                    binding.Mode = BindingMode.TwoWay;
                    TP.SetBinding(TimePicker.ValueProperty, binding);
                    Grid.SetRow(TP, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(TP, 1);
                    PItem.Control = TP;
                    if (IdDependentField)
                        FTitle.Visibility = TP.Visibility = Visibility.Collapsed;

                    Container.Children.Add(TP);
                    break;
                case 17:
                    FileUploadFieldSetting FUSetting = ((FileUploadFieldSetting)PItem.Settings);
                    FTitle.VerticalAlignment = VerticalAlignment.Top;
                    FTitle.Margin = new Thickness(2, 8, 2, 0);
                    ListBox FUlstBox = new ListBox();
                    #region Added By Harish
                    if (PItem.IsToolTip == true)
                    {
                        //ToolTipService.SetToolTip(lstBox, tt);
                        #region new added by harish
                        FUlstBox.MouseEnter += new MouseEventHandler(Field_MouseEnter);
                        #endregion
                    }
                    #endregion

                    //if (IsFirstTime == true && IsSaved==true)
                    //{
                    //    clsGetPatientEMRUploadedFilesBizActionVO BizActionFU = new clsGetPatientEMRUploadedFilesBizActionVO();
                    //    BizActionFU.ControlName = PItem.Name;
                    //    BizActionFU.PatientID = CurrentVisit.PatientId;
                    //    BizActionFU.PatientUnitID = CurrentVisit.PatientUnitId;
                    //    BizActionFU.VisitID = CurrentVisit.ID;
                    //    if (GlobalTemplateID != 0)
                    //        BizActionFU.TemplateID = GlobalTemplateID;
                    //    else if (cmbComplaint.SelectedItem != null)
                    //        BizActionFU.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;
                    //    BizActionFU.UnitID = CurrentVisit.UnitId;

                    //    Uri address2 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                    //    PalashServiceClient clientFU = new PalashServiceClient("BasicHttpBinding_IPalashService", address2.AbsoluteUri);
                    //    clientFU.ProcessCompleted += (s1, args) =>
                    //    {
                    //        if (args.Error == null && args.Result != null)
                    //        {
                    //            List<clsPatientEMRUploadedFilesVO> lstFU = ((clsGetPatientEMRUploadedFilesBizActionVO)args.Result).objPatientEMRUploadedFiles;
                    //            if (lstFU != null && lstFU.Count > 0)
                    //            {
                    //                for (int i = 0; i < lstFU.Count; i++)
                    //                {
                    //                    FUSetting.ItemsSource[lstFU[i].ControlIndex].Data = lstFU[i].Value;
                    //                }
                    //            }

                    //            FUlstBox.DataContext = PItem;
                    //            FUlstBox.IsEnabled = WritePerm;
                    //            FUlstBox.Margin = new Thickness(2);

                    //            for (int i = 0; i < FUSetting.ItemsSource.Count; i++)
                    //            {
                    //                FileUploadRepeterControlItem FUrci = new FileUploadRepeterControlItem();
                    //                FUrci.OnAddRemoveClick += new RoutedEventHandler(FUrci_OnAddRemoveClick);
                    //                FUrci.OnBrowseClick += new RoutedEventHandler(FUrci_OnBrowseClick);
                    //                FUrci.OnViewClick += new RoutedEventHandler(FUrci_OnViewClick);

                    //                FUSetting.ItemsSource[i].Index = i;
                    //                FUSetting.ItemsSource[i].Command = ((i == FUSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                    //                FUSetting.ItemsSource[i].Parent = FUlstBox;
                    //                FUSetting.ItemsSource[i].FileUploadSetting = FUSetting;
                    //                FUrci.DataContext = FUSetting.ItemsSource[i];
                    //                FUlstBox.Items.Add(FUrci);
                    //            }
                    //        }
                    //    };
                    //    clientFU.ProcessAsync(BizActionFU, ((IApplicationConfiguration)App.Current).CurrentUser);
                    //    clientFU.CloseAsync();
                    //}
                    //else
                    //{
                    FUlstBox.DataContext = PItem;
                    FUlstBox.IsEnabled = WritePerm;
                    FUlstBox.Margin = new Thickness(2);

                    for (int i = 0; i < FUSetting.ItemsSource.Count; i++)
                    {
                        FileUploadRepeterControlItem FUrci = new FileUploadRepeterControlItem();
                        FUrci.OnAddRemoveClick += new RoutedEventHandler(FUrci_OnAddRemoveClick);
                        FUrci.OnBrowseClick += new RoutedEventHandler(FUrci_OnBrowseClick);
                        FUrci.OnViewClick += new RoutedEventHandler(FUrci_OnViewClick);

                        FUSetting.ItemsSource[i].Index = i;
                        FUSetting.ItemsSource[i].Command = ((i == FUSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                        FUSetting.ItemsSource[i].Parent = FUlstBox;
                        FUSetting.ItemsSource[i].FileUploadSetting = FUSetting;
                        FUrci.DataContext = FUSetting.ItemsSource[i];
                        FUlstBox.Items.Add(FUrci);
                    }
                    //}
                    Grid.SetRow(FUlstBox, Container.RowDefinitions.Count - 1);
                    Grid.SetColumn(FUlstBox, 1);
                    if (IdDependentField)
                        FTitle.Visibility = FUlstBox.Visibility = Visibility.Collapsed;
                    PItem.Control = FUlstBox;
                    Container.Children.Add(FUlstBox);
                    break;
            }
            if (PItem.DependentFieldDetail != null && PItem.DependentFieldDetail.Count > 0)
                foreach (var item in PItem.DependentFieldDetail)
                {
                    AddNodeItems(Container, item, true);
                }
        }

        void FUrci_OnViewClick(object sender, RoutedEventArgs e)
        {
            var lstBox = ((FileUpload)((HyperlinkButton)sender).DataContext).Parent;
            var FUSetting = ((FileUpload)((HyperlinkButton)sender).DataContext).FileUploadSetting;

            if (((FileUpload)((HyperlinkButton)sender).DataContext).FileName != null && ((FileUpload)((HyperlinkButton)sender).DataContext).FileName != "")
            {
                if (((FileUpload)((HyperlinkButton)sender).DataContext).Data != null)
                {
                    string FullFile = ((FieldDetail)lstBox.DataContext).Name + ((FileUpload)((HyperlinkButton)sender).DataContext).Index + ((FileUpload)((HyperlinkButton)sender).DataContext).FileName;

                    Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
                    DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
                    client.GlobalUploadFileCompleted += (s, args) =>
                    {
                        if (args.Error == null)
                        {
                            HtmlPage.Window.Invoke("GlobalOpenFile", new string[] { "UserUploadedFilesByTemplateTool/" + FullFile });
                            listOfReports.Add(FullFile);
                        }
                    };
                    client.GlobalUploadFileAsync("../UserUploadedFilesByTemplateTool", FullFile, ((FileUpload)((HyperlinkButton)sender).DataContext).Data);
                }
                else
                {
                    clsGetPatientEMRUploadedFilesBizActionVO BizActionFU = new clsGetPatientEMRUploadedFilesBizActionVO();
                    BizActionFU.ControlName = ((FieldDetail)lstBox.DataContext).Name;

                    //if (CurrentVisit != null)
                    //{
                        BizActionFU.PatientID = CurrentVisit.PatientId;
                        BizActionFU.PatientUnitID = CurrentVisit.PatientUnitId;
                        BizActionFU.VisitID = CurrentVisit.ID;
                    //    BizActionFU.UnitID = CurrentVisit.UnitId;
                    //}
                    //else
                    //{
                    //    BizActionFU.PatientID = ((clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient).PatientID;
                    //    BizActionFU.PatientUnitID = ((clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient).UnitId;
                    //    BizActionFU.VisitID = 0;
                    //    BizActionFU.UnitID = ((clsPatientGeneralVO)((IApplicationConfiguration)App.Current).SelectedPatient).UnitId;
                    //}

                    if (GlobalTemplateID != 0)
                        BizActionFU.TemplateID = GlobalTemplateID;
                    else if (cmbComplaint.SelectedItem != null)
                        BizActionFU.TemplateID = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID;

                    BizActionFU.UnitID = CurrentVisit.UnitId;
                    
                    BizActionFU.ControlIndex = ((FileUpload)((HyperlinkButton)sender).DataContext).Index;

                    Uri address2 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
                    PalashServiceClient clientFU = new PalashServiceClient("BasicHttpBinding_IPalashService", address2.AbsoluteUri);
                    clientFU.ProcessCompleted += (s1, args) =>
                    {
                        if (args.Error == null && args.Result != null)
                        {
                            List<clsPatientEMRUploadedFilesVO> lstFU = ((clsGetPatientEMRUploadedFilesBizActionVO)args.Result).objPatientEMRUploadedFiles;
                            if (lstFU != null && lstFU.Count > 0)
                            {
                                for (int i = 0; i < lstFU.Count; i++)
                                {
                                    //FUSetting.ItemsSource[lstFU[i].ControlIndex].Data = lstFU[i].Value;
                                    ((FileUpload)((HyperlinkButton)sender).DataContext).Data = lstFU[i].Value;
                                }

                                string FullFile = ((FieldDetail)lstBox.DataContext).Name + ((FileUpload)((HyperlinkButton)sender).DataContext).Index + ((FileUpload)((HyperlinkButton)sender).DataContext).FileName;

                                Uri address = new Uri(Application.Current.Host.Source, "../EMR/DataTemplateHttpsService.svc"); // this url will work both in dev and after deploy
                                DataTemplateHttpsServiceClient client = new DataTemplateHttpsServiceClient("BasicHttpBinding_DataTemplateHttpsService", address.AbsoluteUri);
                                client.GlobalUploadFileCompleted += (s, args1) =>
                                {
                                    if (args1.Error == null)
                                    {
                                        HtmlPage.Window.Invoke("GlobalOpenFile", new string[] { "UserUploadedFilesByTemplateTool/" + FullFile });
                                        listOfReports.Add(FullFile);
                                    }
                                };
                                client.GlobalUploadFileAsync("../UserUploadedFilesByTemplateTool", FullFile, ((FileUpload)((HyperlinkButton)sender).DataContext).Data);
                            }
                            else
                            {
                                MessageBoxControl.MessageBoxChildWindow mgbx = new MessageBoxChildWindow("Palash", "This File is not uploaded. Please upload the File then click on preview", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                mgbx.Show();
                            }
                        }
                        else
                        {
                            MessageBoxControl.MessageBoxChildWindow mgbx = new MessageBoxChildWindow("Palash", "File cannot be loaded.\nError occured during file retrieving.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                            mgbx.Show();
                        }
                    };
                    clientFU.ProcessAsync(BizActionFU, ((IApplicationConfiguration)App.Current).CurrentUser);
                    clientFU.CloseAsync();
                }
            }
            else
            {
                MessageBoxControl.MessageBoxChildWindow mgbx = new MessageBoxChildWindow("Palash", "This File is not uploaded. Please upload the File then click on preview", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                mgbx.Show();
            }
        }

        void FUrci_OnBrowseClick(object sender, RoutedEventArgs e)
        {
            var lstBox = ((FileUpload)((Button)sender).DataContext).Parent;
            var FUSetting = ((FileUpload)((Button)sender).DataContext).FileUploadSetting;

            OpenFileDialog openDialog = new OpenFileDialog();
            if (openDialog.ShowDialog() == true)
            {
                ((FileUpload)((Button)sender).DataContext).FileName = openDialog.File.Name;
                ((TextBox)((Grid)((Button)sender).Parent).FindName("FileName")).Text = openDialog.File.Name;
                try
                {
                    using (Stream stream = openDialog.File.OpenRead())
                    {
                        ((FileUpload)((Button)sender).DataContext).Data = new byte[stream.Length];
                        stream.Read(((FileUpload)((Button)sender).DataContext).Data, 0, (int)stream.Length);
                        ((FileUpload)((Button)sender).DataContext).FileInfo = openDialog.File;
                    }
                }
                catch (Exception ex)
                {
                    string msgText = "Error while reading file.";

                    MessageBoxControl.MessageBoxChildWindow msgWindow =
                        new MessageBoxControl.MessageBoxChildWindow("Palsh", msgText, MessageBoxControl.MessageBoxButtons.Ok, MessageBoxControl.MessageBoxIcon.Information);
                    msgWindow.Show();
                }
            }
        }

        void FUrci_OnAddRemoveClick(object sender, RoutedEventArgs e)
        {
            var lstBox = ((FileUpload)((HyperlinkButton)sender).DataContext).Parent;
            var FUSetting = ((FileUpload)((HyperlinkButton)sender).DataContext).FileUploadSetting;
            if (((HyperlinkButton)sender).TargetName.ToString() == "Remove")
            {
                FUSetting.ItemsSource.RemoveAt(((FileUpload)((HyperlinkButton)sender).DataContext).Index);
            }
            if (((HyperlinkButton)sender).TargetName.ToString() == "Add")
            {
                FUSetting.ItemsSource.Add(new FileUpload());
            }
            lstBox.Items.Clear();
            for (int i = 0; i < FUSetting.ItemsSource.Count; i++)
            {
                FileUploadRepeterControlItem FUrci = new FileUploadRepeterControlItem();
                FUrci.OnAddRemoveClick += new RoutedEventHandler(FUrci_OnAddRemoveClick);
                FUrci.OnBrowseClick += new RoutedEventHandler(FUrci_OnBrowseClick);
                FUrci.OnViewClick += new RoutedEventHandler(FUrci_OnViewClick);

                FUSetting.ItemsSource[i].Index = i;
                FUSetting.ItemsSource[i].Command = ((i == FUSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                FUSetting.ItemsSource[i].Parent = lstBox;
                FUSetting.ItemsSource[i].FileUploadSetting = FUSetting;
                FUrci.DataContext = FUSetting.ItemsSource[i];
                lstBox.Items.Add(FUrci);
            }
        }

        private void DesignAutoList(Grid Container, TextBlock FTitle, FieldDetail PItem, bool IdDependentField)
        {
            //if (AutolistSetting.IsDynamic == true)
            //{
            //    clsGetMasterListByTableNameAndColumnNameBizActionVO BizAction = new clsGetMasterListByTableNameAndColumnNameBizActionVO();
            //    BizAction.MasterTable = ((MasterListItem)AutolistSetting.SelectedTable).Description;
            //    BizAction.ColumnName = ((MasterListItem)AutolistSetting.SelectedColumn).Description;

            //    BizAction.MasterList = new List<MasterListItem>();
            //    Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc");
            //    PalashServiceClient client1 = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
            //    client1.ProcessCompleted += (s1, args) =>
            //    {
            //        if (args.Error == null && args.Result != null)
            //        {
            //            List<MasterListItem> SourceList = ((clsGetMasterListByTableNameAndColumnNameBizActionVO)args.Result).MasterList;
            //            if (AutolistSetting.ControlType == AutoListControlType.CheckListBox)
            //            {
            //                foreach (var SLI in SourceList)
            //                {
            //                    foreach (var ItemSourceItem in ((AutomatedListFieldSetting)PItem.Settings).ItemSource)
            //                    {
            //                        if (SLI.ID == ItemSourceItem.ID)
            //                        {
            //                            SLI.Status = ItemSourceItem.Status;
            //                            break;
            //                        }
            //                    }
            //                }
            //            }
            //            ((AutomatedListFieldSetting)PItem.Settings).ItemSource = SourceList;
            //        }
            //    };
            //    client1.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);
            //    client1.CloseAsync();
            //}
        }

        void Otmrci_cmbSelectionChanged(object sender, RoutedEventArgs e)
        {
            if (((AutoCompleteComboBox)sender).SelectedItem != null && IsFirstTime == false)
            {
                if ((string)((AutoCompleteComboBox)sender).Tag == "Route")
                {
                    ((OtherMedication)((AutoCompleteComboBox)sender).DataContext).Route = (MasterListItem)((AutoCompleteComboBox)sender).SelectedItem;
                }
            }
            #region Code for follow up Medication
            //Grid g = (Grid)Form.FindName("FollowUpMedication");
            //if (g != null)
            //{
            //    g.RowDefinitions.Clear();
            //    g.ColumnDefinitions.Clear();
            //    g.Children.Clear();
            //    g = GetGridSchema(g);
            //}
            #endregion
        }

        void Otmrci_OnAddRemoveClick(object sender, RoutedEventArgs e)
        {
            var lstBox = ((OtherMedication)((HyperlinkButton)sender).DataContext).Parent;
            var MedSetting = ((OtherMedication)((HyperlinkButton)sender).DataContext).MedicationSetting;
            if (((HyperlinkButton)sender).TargetName.ToString() == "Remove")
            {
                MedSetting.ItemsSource.RemoveAt(((OtherMedication)((HyperlinkButton)sender).DataContext).Index);
            }

            if (((HyperlinkButton)sender).TargetName.ToString() == "Add")
            {
                MedSetting.ItemsSource.Add(new OtherMedication() { RouteSource = Helpers.GetRouteList() });
            }
            lstBox.Items.Clear();
            for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
            {
                OtherMedicatioRepeterControlItem mrci = new OtherMedicatioRepeterControlItem();
                mrci.OnAddRemoveClick += new RoutedEventHandler(Otmrci_OnAddRemoveClick);
                mrci.cmbSelectionChanged += new RoutedEventHandler(Otmrci_cmbSelectionChanged);
                mrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
                mrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
                mrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
                mrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

                //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                MedSetting.ItemsSource[i].Index = i;
                MedSetting.ItemsSource[i].Command = ((i == MedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                MedSetting.ItemsSource[i].Parent = lstBox;
                MedSetting.ItemsSource[i].MedicationSetting = MedSetting;
                mrci.DataContext = MedSetting.ItemsSource[i];
                lstBox.Items.Add(mrci);
            }
        }

        void mrci_txtQtyChanged(object sender, TextChangedEventArgs e)
        {
            if (IsFirstTime == false)
            {
                if (((TextBox)sender).Text != "" && !((TextBox)sender).Text.IsPositiveNumberValid())
                {

                    ((TextBox)sender).Text = textBefore;
                    ((TextBox)sender).SelectionStart = selectionStart;
                    ((TextBox)sender).SelectionLength = selectionLength;
                    textBefore = "";
                    selectionStart = 0;
                    selectionLength = 0;
                }
                if (((TextBox)sender).Text == "")
                    ((TextBox)sender).Text = "0";

                if (((TextBox)sender).DataContext is Medication)
                {
                    ((Medication)((TextBox)sender).DataContext).Quantity = Convert.ToInt32(((TextBox)sender).Text);
                }
                else if (((TextBox)sender).DataContext is OtherMedication)
                {
                    ((OtherMedication)((TextBox)sender).DataContext).Quantity = Convert.ToInt32(((TextBox)sender).Text);
                }
            }
        }

        void mrci_txtFreqChanged(object sender, TextChangedEventArgs e)
        {
            if (IsFirstTime == false)
            {
                if (((TextBox)sender).Text != "" && !((TextBox)sender).Text.IsPositiveNumberValid())
                {
                    ((TextBox)sender).Text = textBefore;
                    ((TextBox)sender).SelectionStart = selectionStart;
                    ((TextBox)sender).SelectionLength = selectionLength;
                    textBefore = "";
                    selectionStart = 0;
                    selectionLength = 0;
                }
                if (((TextBox)sender).Text == "")
                    ((TextBox)sender).Text = "0";

                if (((TextBox)sender).DataContext is Medication)
                {
                    ((Medication)((TextBox)sender).DataContext).Frequency = Convert.ToInt32(((TextBox)sender).Text);
                    ((Medication)((TextBox)sender).DataContext).Quantity = ((Medication)((TextBox)sender).DataContext).Day * Convert.ToInt32(((Medication)((TextBox)sender).DataContext).Frequency);
                }
                else if (((TextBox)sender).DataContext is OtherMedication)
                {
                    ((OtherMedication)((TextBox)sender).DataContext).Frequency = Convert.ToInt32(((TextBox)sender).Text);
                    ((OtherMedication)((TextBox)sender).DataContext).Quantity = ((OtherMedication)((TextBox)sender).DataContext).Day * Convert.ToInt32(((OtherMedication)((TextBox)sender).DataContext).Frequency);
                }
            }
        }

        void mrci_txtDayChanged(object sender, TextChangedEventArgs e)
        {
            if (IsFirstTime == false)
            {
                if (((TextBox)sender).Text != "" && !((TextBox)sender).Text.IsPositiveNumberValid())
                {
                    ((TextBox)sender).Text = textBefore;
                    ((TextBox)sender).SelectionStart = selectionStart;
                    ((TextBox)sender).SelectionLength = selectionLength;
                    textBefore = "";
                    selectionStart = 0;
                    selectionLength = 0;
                }
                if (((TextBox)sender).Text == "")
                    ((TextBox)sender).Text = "0";

                if (((TextBox)sender).DataContext is Medication)
                {
                    ((Medication)((TextBox)sender).DataContext).Day = Convert.ToInt32(((TextBox)sender).Text);
                    ((Medication)((TextBox)sender).DataContext).Quantity = ((Medication)((TextBox)sender).DataContext).Day * Convert.ToInt32(((Medication)((TextBox)sender).DataContext).Frequency);
                }
                else if (((TextBox)sender).DataContext is OtherMedication)
                {
                    ((OtherMedication)((TextBox)sender).DataContext).Day = Convert.ToInt32(((TextBox)sender).Text);
                    ((OtherMedication)((TextBox)sender).DataContext).Quantity = ((OtherMedication)((TextBox)sender).DataContext).Day * Convert.ToInt32(((OtherMedication)((TextBox)sender).DataContext).Frequency);
                }

            }
        }

        //CheckListBox Selection and Relation Management
        void CLBCI_chkItemClicked(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((FrameworkElement)(((FieldDetail)(((Control)sender).Tag))).Control).Visibility == Visibility.Visible)
                {
                    if (((FieldDetail)(((Control)sender).Tag)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((Control)sender).Tag)).RelationalFieldList)
                        {
                            if (item.Control is FrameworkElement && item.RelationCondition is CheckListExpression<bool>)
                            {
                                switch (((CheckListExpression<bool>)item.RelationCondition).Operation)
                                {
                                    case ComboOperations.EqualTo:
                                        try
                                        {
                                            if (((AutomatedListFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource != null && ((AutomatedListFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID && f.Status == true)) != null)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }

                                        break;
                                    case ComboOperations.NotEqualTo:
                                        try
                                        {
                                            if (((AutomatedListFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource != null && ((AutomatedListFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID && f.Status == true)) != null)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }

                                        break;
                                }

                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }

            }
            catch (Exception ex)
            {

                //throw;
            }
        }

        void InvestCLBCI_chkItemClicked(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((FrameworkElement)(((FieldDetail)(((Control)sender).Tag))).Control).Visibility == Visibility.Visible)
                {
                    if (((FieldDetail)(((Control)sender).Tag)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((Control)sender).Tag)).RelationalFieldList)
                        {
                            if (item.Control is FrameworkElement && item.RelationCondition is CheckListExpression<bool>)
                            {
                                switch (((CheckListExpression<bool>)item.RelationCondition).Operation)
                                {
                                    case ComboOperations.EqualTo:
                                        try
                                        {
                                            if (((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource != null && ((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID && f.Status == true)) != null)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }

                                        break;
                                    case ComboOperations.NotEqualTo:
                                        try
                                        {
                                            if (((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource != null && ((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID && f.Status == true)) != null)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }

                                        break;
                                }

                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }

            }
            catch (Exception ex)
            {

                //throw;
            }
        }

        //AutoCombo + AutoList(Single Selection Mode) Selection and Relation management
        void AutoComboList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (((FrameworkElement)(((FieldDetail)(((Control)sender).DataContext))).Control).Visibility == Visibility.Visible)
                {
                    if (((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList)
                        {
                            if (item.Control is FrameworkElement && item.RelationCondition is CheckListExpression<bool>)
                            {
                                switch (((CheckListExpression<bool>)item.RelationCondition).Operation)
                                {
                                    case ComboOperations.EqualTo:
                                        if (((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem != null && ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID == ((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem.ID)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }
                                        else
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }
                                        break;
                                    case ComboOperations.NotEqualTo:
                                        if (((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem != null && ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID == ((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem.ID)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }
                                        else
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }
                                        break;
                                }

                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }

            }
            catch (Exception ex)
            {

                //throw;
            }
        }

        void InvestAutoComboList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (((FrameworkElement)(((FieldDetail)(((Control)sender).DataContext))).Control).Visibility == Visibility.Visible)
                {
                    if (((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList)
                        {
                            if (item.Control is FrameworkElement && item.RelationCondition is CheckListExpression<bool>)
                            {
                                switch (((CheckListExpression<bool>)item.RelationCondition).Operation)
                                {
                                    case ComboOperations.EqualTo:
                                        if (((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem != null && ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID == ((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem.ID)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }
                                        else
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }
                                        break;
                                    case ComboOperations.NotEqualTo:
                                        if (((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem != null && ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID == ((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem.ID)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }
                                        else
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }
                                        break;
                                }

                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }

            }
            catch (Exception ex)
            {

                //throw;
            }
        }

        // Selection and Relation management for AutoList MultiSelect mode
        void lbAutoList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (sender != null)
            {
                FieldDetail field = (FieldDetail)((ListBox)sender).DataContext;
                if (((AutomatedListFieldSetting)field.Settings).SelectedItems == null)
                    ((AutomatedListFieldSetting)field.Settings).SelectedItems = new List<MasterListItem>();
                ((AutomatedListFieldSetting)field.Settings).SelectedItems.Clear();
                foreach (var item in ((ListBox)sender).SelectedItems)
                {
                    ((AutomatedListFieldSetting)field.Settings).SelectedItems.Add((MasterListItem)item);
                }

                try
                {
                    if (((FrameworkElement)(((FieldDetail)(((Control)sender).DataContext))).Control).Visibility == Visibility.Visible)
                    {
                        if (((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList != null)
                            foreach (var item in ((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList)
                            {
                                if (item.Control is FrameworkElement && item.RelationCondition is CheckListExpression<bool>)
                                {
                                    switch (((CheckListExpression<bool>)item.RelationCondition).Operation)
                                    {
                                        case ComboOperations.EqualTo:
                                            try
                                            {
                                                if (((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems != null && ((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID)) != null)
                                                {
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            }
                                            //if(((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.Contains(((CheckListExpression<bool>)item.RelationCondition).SelectedItem))
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            //}
                                            //else
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            //}

                                            break;
                                        case ComboOperations.NotEqualTo:
                                            try
                                            {
                                                if (((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems != null && ((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID)) != null)
                                                {
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            }
                                            //if (!(((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.Contains(((CheckListExpression<bool>)item.RelationCondition).SelectedItem)))
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            //}
                                            //else
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            //}                                            
                                            break;
                                    }

                                    if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                        CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                                }
                            }
                    }

                }
                catch (Exception ex)
                {

                    //throw;
                }
            }
        }

        void lbInvestAutoList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (sender != null)
            {
                FieldDetail field = (FieldDetail)((ListBox)sender).DataContext;
                if (((InvestigationFieldSetting)field.Settings).SelectedItems == null)
                    ((InvestigationFieldSetting)field.Settings).SelectedItems = new List<MasterListItem>();
                ((InvestigationFieldSetting)field.Settings).SelectedItems.Clear();
                foreach (var item in ((ListBox)sender).SelectedItems)
                {
                    ((InvestigationFieldSetting)field.Settings).SelectedItems.Add((MasterListItem)item);
                }

                try
                {
                    if (((FrameworkElement)(((FieldDetail)(((Control)sender).DataContext))).Control).Visibility == Visibility.Visible)
                    {
                        if (((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList != null)
                            foreach (var item in ((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList)
                            {
                                if (item.Control is FrameworkElement && item.RelationCondition is CheckListExpression<bool>)
                                {
                                    switch (((CheckListExpression<bool>)item.RelationCondition).Operation)
                                    {
                                        case ComboOperations.EqualTo:
                                            try
                                            {
                                                if (((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems != null && ((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID)) != null)
                                                {
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            }
                                            //if(((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.Contains(((CheckListExpression<bool>)item.RelationCondition).SelectedItem))
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            //}
                                            //else
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            //}

                                            break;
                                        case ComboOperations.NotEqualTo:
                                            try
                                            {
                                                if (((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems != null && ((InvestigationFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID)) != null)
                                                {
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            }
                                            //if (!(((AutomatedListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItems.Contains(((CheckListExpression<bool>)item.RelationCondition).SelectedItem)))
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            //}
                                            //else
                                            //{
                                            //    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            //}                                            
                                            break;
                                    }

                                    if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                        CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                                }
                            }
                    }

                }
                catch (Exception ex)
                {

                    //throw;
                }
            }
        }

        void mrci_btnContradictionSideEffectClick(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();
            if (((Medication)((ToggleButton)sender).DataContext).Drug != null)
            {
                clsGetItemMasterOtherDetailsBizActionVO BizAction = new clsGetItemMasterOtherDetailsBizActionVO();
                BizAction.ItemID = ((Medication)((ToggleButton)sender).DataContext).Drug.ID;
                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                PalashServiceClient client = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                client.ProcessCompleted += (s, arg) =>
                {
                    if (arg.Error == null)
                    {
                        if (arg.Result != null)
                        {
                            if (((clsGetItemMasterOtherDetailsBizActionVO)arg.Result).ItemOtherDetails != null)
                            {
                                DrugOtherDetails win = new DrugOtherDetails();
                                win.URL = ((clsGetItemMasterOtherDetailsBizActionVO)arg.Result).ItemOtherDetails.URL;
                                if ((string)((ToggleButton)sender).Tag == "Contradiction")
                                    win.Message = "Contra indication:\n" + ((clsGetItemMasterOtherDetailsBizActionVO)arg.Result).ItemOtherDetails.Contradiction;
                                else if ((string)((ToggleButton)sender).Tag == "SideEffects")
                                    win.Message = "Side Effects:\n" + ((clsGetItemMasterOtherDetailsBizActionVO)arg.Result).ItemOtherDetails.SideEffect;
                                win.Show();
                            }
                            else
                            {
                                MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Contra indication and Side Effects are not Defined.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                                mgbox.Show();
                            }
                        }
                    }
                };
                client.ProcessAsync(BizAction, ((IApplicationConfiguration)App.Current).CurrentUser);


            }
            else
            {
                MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Drug is not Selected.\n Please Select a Drug then click on button.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                mgbox.Show();
            }
        }

        void Field_MouseEnter(object sender, MouseEventArgs e)
        {
            if (!pf.IsOpen)
            {
                //TextBlock tbl = new TextBlock();
                TextBox tbl = new TextBox();
                tbl.IsEnabled = false;
                //tbl.Background = new SolidColorBrush(Colors.Yellow);
                tbl.Text = ((FieldDetail)((FrameworkElement)sender).DataContext).ToolTipText;
                tbl.TextWrapping = TextWrapping.Wrap;

                //((Border)((ScrollViewer)pf.Child).Content).Child = null;
                ((Border)((ScrollViewer)pf.Child).Content).Child = tbl;
                GeneralTransform gt = ((FrameworkElement)sender).TransformToVisual(Application.Current.RootVisual as UIElement);
                Point offset = gt.Transform(new Point(0, 0));
                double controlTop = offset.Y + ((FrameworkElement)sender).ActualHeight;
                double controlLeft = offset.X;
                ((ScrollViewer)pf.Child).MaxWidth = this.ActualWidth - controlLeft + 10;
                //((ScrollViewer)pf.Child).MaxHeight = this.ActualHeight - controlTop + 10;
                ((ScrollViewer)pf.Child).MaxHeight = (Application.Current.RootVisual as UIElement).DesiredSize.Height - controlTop;
                pf.VerticalOffset = controlTop;
                pf.HorizontalOffset = controlLeft;
                pf.IsOpen = true;
            }
        }

        void lbList1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //throw new NotImplementedException();
            ((ComboBox)sender).SelectedItem = null;
        }

        void chk_Unchecked(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();
            unchecked
            {
                if (((CheckBox)sender).DataContext != null)
                {
                    ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).SelectedItems[(Int32)((CheckBox)sender).Tag] = false;

                    if (((CheckBox)sender).Name == "chkOtherN")
                    {
                        ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).IsOtherText = false;
                        ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).OtherText = "";
                        if ((TextBlock)Form.FindName("ONTitle") != null && (TextBox)Form.FindName("ONField") != null)
                        {
                            ((TextBlock)Form.FindName("ONTitle")).Visibility = Visibility.Collapsed;
                            ((TextBox)Form.FindName("ONField")).Visibility = Visibility.Collapsed;
                        }
                    }
                    if (((CheckBox)sender).Name == "chkOtherA")
                    {
                        ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).IsOtherText = false;
                        ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).OtherText = "";
                        if ((TextBlock)Form.FindName("OATitle") != null && (TextBox)Form.FindName("OAField") != null)
                        {
                            ((TextBlock)Form.FindName("OATitle")).Visibility = Visibility.Collapsed;
                            ((TextBox)Form.FindName("OAField")).Visibility = Visibility.Collapsed;
                        }
                    }
                }
            }
        }

        void chk_Checked(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();
            checked
            {
                if (((CheckBox)sender).DataContext != null)
                {
                    ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).SelectedItems[(Int32)((CheckBox)sender).Tag] = true;

                    if (((CheckBox)sender).Name == "chkOtherN")
                    {
                        ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).IsOtherText = true;

                        if ((TextBlock)Form.FindName("ONTitle") != null && (TextBox)Form.FindName("ONField") != null)
                        {
                            ((TextBlock)Form.FindName("ONTitle")).Visibility = Visibility.Visible;
                            ((TextBox)Form.FindName("ONField")).Visibility = Visibility.Visible;
                        }
                    }
                    if (((CheckBox)sender).Name == "chkOtherA")
                    {
                        ((ListOfCheckBoxesFieldSetting)(((FieldDetail)((CheckBox)sender).DataContext).Settings)).IsOtherText = true;
                        if ((TextBlock)Form.FindName("OATitle") != null && (TextBox)Form.FindName("OAField") != null)
                        {
                            ((TextBlock)Form.FindName("OATitle")).Visibility = Visibility.Visible;
                            ((TextBox)Form.FindName("OAField")).Visibility = Visibility.Visible;
                        }
                    }
                }
            }
        }

        //void irci_txtRemarksLostFocus(object sender, RoutedEventArgs e)
        //{
        //    ((OtherInvestigation)((TextBox)sender).DataContext).Remarks = (string)((TextBox)sender).Text;
        //}

        void irci_txtRemarksTextChanged(object sender, RoutedEventArgs e)
        {
            ((OtherInvestigation)((TextBox)sender).DataContext).Remarks = (string)((TextBox)sender).Text;
        }

        void irci_cmbSelectionChanged(object sender, RoutedEventArgs e)
        {
            ((OtherInvestigation)((ComboBox)sender).DataContext).Investigation = (string)((ComboBox)sender).SelectedValue;
        }

        void irci_OnAddRemoveClick(object sender, RoutedEventArgs e)
        {
            var lstBoxInvest = ((OtherInvestigation)((HyperlinkButton)sender).DataContext).Parent;
            var InvestSetting = ((OtherInvestigation)((HyperlinkButton)sender).DataContext).InvestigationSetting;
            if (((HyperlinkButton)sender).TargetName.ToString() == "Remove")
            {
                InvestSetting.ItemsSource.RemoveAt(((OtherInvestigation)((HyperlinkButton)sender).DataContext).Index);
            }

            if (((HyperlinkButton)sender).TargetName.ToString() == "Add")
            {
                InvestSetting.ItemsSource.Add(new OtherInvestigation() { InvestigationSource = Helpers.GetInvestigationList() });
            }

            lstBoxInvest.Items.Clear();
            for (int i = 0; i < InvestSetting.ItemsSource.Count; i++)
            {
                InvestigationRepetorControlItem irci = new InvestigationRepetorControlItem();
                irci.OnAddRemoveClick += new RoutedEventHandler(irci_OnAddRemoveClick);
                irci.cmbSelectionChanged += new RoutedEventHandler(irci_cmbSelectionChanged);
                //irci.txtRemarksLostFocus += new RoutedEventHandler(irci_txtRemarksLostFocus);
                irci.txtRemarksTextChanged += new RoutedEventHandler(irci_txtRemarksTextChanged);
                //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                InvestSetting.ItemsSource[i].Index = i;
                InvestSetting.ItemsSource[i].Command = ((i == InvestSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                InvestSetting.ItemsSource[i].Parent = lstBoxInvest;
                InvestSetting.ItemsSource[i].InvestigationSetting = InvestSetting;
                irci.DataContext = InvestSetting.ItemsSource[i];
                lstBoxInvest.Items.Add(irci);
            }
        }

        void lstBoxInvest_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //throw new NotImplementedException();
        }

        void dtp_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            //throw new NotImplementedException();
            string s = ((DatePicker)sender).SelectedDate.ToString();
        }

        private Grid GetGridHeading()
        {
            Grid grdAnti = new Grid();
            grdAnti.Margin = new Thickness(2, 2, 2, 2);
            RowDefinition r = new RowDefinition();
            r.Height = new GridLength(25, GridUnitType.Auto);
            grdAnti.RowDefinitions.Add(r);

            ColumnDefinition c = new ColumnDefinition();
            //c.Width = new GridLength();
            grdAnti.ColumnDefinitions.Add(c);

            //Used with Dose
            //ColumnDefinition c1 = new ColumnDefinition();          
            //grdAnti.ColumnDefinitions.Add(c1);

            int i = 0;
            while (i < 4)
            {
                ColumnDefinition c2 = new ColumnDefinition();
                c2.Width = new GridLength();
                grdAnti.ColumnDefinitions.Add(c2);
                i++;
            }


            LinearGradientBrush a = new LinearGradientBrush();
            GradientStop gs1 = new GradientStop();
            gs1.Offset = 0;
            gs1.Color = Color.FromArgb(20, 0, 0, 155);
            a.GradientStops.Add(gs1);

            TextBox txtName = new TextBox();
            txtName.Background = a;
            txtName.IsReadOnly = true;
            txtName.Text = "Drug Name";
            //txtName.HorizontalAlignment = HorizontalAlignment.Stretch;
            Grid.SetRow(txtName, 0);
            Grid.SetColumn(txtName, 0);
            grdAnti.Children.Add(txtName);

            //Used with Dose
            //TextBox txtdose = new TextBox();
            //txtdose.Background = a;
            //txtdose.IsReadOnly = true;
            //txtdose.Text = "Drug dose";
            ////txtdose.HorizontalAlignment = HorizontalAlignment.Stretch;
            //Grid.SetRow(txtdose, 0);
            //Grid.SetColumn(txtdose, 1);
            //grdAnti.Children.Add(txtdose);

            TextBox txtRoute = new TextBox();
            txtRoute.Background = a;
            txtRoute.IsReadOnly = true;
            txtRoute.Text = "Route";
            //txtRoute.HorizontalAlignment = HorizontalAlignment.Stretch;
            Grid.SetRow(txtRoute, 0);
            Grid.SetColumn(txtRoute, 1);
            grdAnti.Children.Add(txtRoute);

            TextBox txtFrequency = new TextBox();
            txtFrequency.Background = a;
            txtFrequency.IsReadOnly = true;
            txtFrequency.Text = "Frequency";
            //txtFrequency.HorizontalAlignment = HorizontalAlignment.Stretch;
            Grid.SetRow(txtFrequency, 0);
            Grid.SetColumn(txtFrequency, 2);
            grdAnti.Children.Add(txtFrequency);

            TextBox txtDays = new TextBox();
            txtDays.Background = a;
            txtDays.IsReadOnly = true;
            txtDays.Text = "Days";
            //txtRoute.HorizontalAlignment = HorizontalAlignment.Stretch;
            Grid.SetRow(txtDays, 0);
            Grid.SetColumn(txtDays, 3);
            grdAnti.Children.Add(txtDays);

            TextBox txtQty = new TextBox();
            txtQty.Background = a;
            txtQty.IsReadOnly = true;
            txtQty.Text = "Quantity";
            //txtRoute.HorizontalAlignment = HorizontalAlignment.Stretch;
            Grid.SetRow(txtQty, 0);
            Grid.SetColumn(txtQty, 4);
            grdAnti.Children.Add(txtQty);

            return grdAnti;
        }

        private Grid AddGridItem(Grid g, string s1, string s2, string s3, string s4, int s5, int s6)
        {
            RowDefinition r = new RowDefinition();
            r.Height = new GridLength(25, GridUnitType.Auto);
            g.RowDefinitions.Add(r);

            TextBox txtName = new TextBox();
            txtName.IsReadOnly = true;
            txtName.Text = s1 == null ? "" : s1;
            Grid.SetRow(txtName, g.RowDefinitions.Count - 1);
            Grid.SetColumn(txtName, 0);
            g.Children.Add(txtName);

            //used with Dose
            //TextBox txtdose = new TextBox();
            //txtdose.IsReadOnly = true;
            //txtdose.Text = s2 == null ? "" : s2;
            //Grid.SetRow(txtdose, g.RowDefinitions.Count - 1);
            //Grid.SetColumn(txtdose, 1);
            //g.Children.Add(txtdose);

            TextBox txtRoute = new TextBox();
            txtRoute.IsReadOnly = true;
            txtRoute.Text = s3 == null ? "" : s3;
            Grid.SetRow(txtRoute, g.RowDefinitions.Count - 1);
            Grid.SetColumn(txtRoute, 1);
            g.Children.Add(txtRoute);

            TextBox txtFrequency = new TextBox();
            txtFrequency.IsReadOnly = true;
            txtFrequency.Text = s4 == null ? "" : s4;
            Grid.SetRow(txtFrequency, g.RowDefinitions.Count - 1);
            Grid.SetColumn(txtFrequency, 2);
            g.Children.Add(txtFrequency);

            TextBox txtDays = new TextBox();
            txtDays.IsReadOnly = true;
            txtDays.Text = s5.ToString();
            Grid.SetRow(txtDays, g.RowDefinitions.Count - 1);
            Grid.SetColumn(txtDays, 3);
            g.Children.Add(txtDays);

            TextBox txtQty = new TextBox();
            txtQty.IsReadOnly = true;
            txtQty.Text = s6.ToString();
            Grid.SetRow(txtQty, g.RowDefinitions.Count - 1);
            Grid.SetColumn(txtQty, 4);
            g.Children.Add(txtQty);

            return g;
        }

        private Grid GetGridSchema(Grid MainGrid)
        {
            //Grid MainGrid=new Grid();
            MainGrid.Margin = new Thickness(2, 2, 2, 2);
            MainGrid.HorizontalAlignment = HorizontalAlignment.Stretch;
            int i = 0;

            ColumnDefinition col = new ColumnDefinition();
            col.Width = new GridLength(200, GridUnitType.Auto);
            MainGrid.ColumnDefinitions.Add(col);

            ColumnDefinition col1 = new ColumnDefinition();
            MainGrid.ColumnDefinitions.Add(col1);

            while (i < 4)
            {
                RowDefinition row = new RowDefinition();
                row.Height = new GridLength();
                MainGrid.RowDefinitions.Add(row);
                i++;
            }

            TextBlock tb1 = new TextBlock();
            //tb1.Text = "Antiemetics : ";
            tb1.Text = "Medication : ";
            Grid.SetRow(tb1, 0);
            MainGrid.Children.Add(tb1);

            TextBlock tb2 = new TextBlock();
            //Added at razi
            tb2.Visibility = Visibility.Collapsed;
            tb2.Text = "Antibiotics : ";
            Grid.SetRow(tb2, 1);
            MainGrid.Children.Add(tb2);

            TextBlock tb3 = new TextBlock();
            //Added at razi
            tb3.Visibility = Visibility.Collapsed;
            tb3.Text = "Antipyretic : ";
            Grid.SetRow(tb3, 2);
            MainGrid.Children.Add(tb3);

            TextBlock tb4 = new TextBlock();
            //Added at razi
            tb4.Visibility = Visibility.Collapsed;
            tb4.Text = "Antispasmodic : ";
            Grid.SetRow(tb4, 3);
            MainGrid.Children.Add(tb4);

            int k = 0;
            Grid g1 = GetGridHeading();
            //ListBox lst = (ListBox)Form.FindName("ManagementAntiemetics");
            ListBox lst = (ListBox)Form.FindName("GeneralMedication");
            if (lst != null)
            {
                PCRS.ItemsSource1 = new List<Medication>();
                while (k < lst.Items.Count)
                {
                    string s1, s2, s3, s4;
                    int s5, s6;
                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                        s1 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.Description);
                    else
                        s1 = "";
                    s2 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose);

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route != null)
                        s3 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description;
                    else
                        s3 = "";

                    s4 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString();
                    s5 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day);
                    s6 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity);
                    g1 = AddGridItem(g1, s1, s2, s3, s4, s5, s6);
                    PCRS.ItemsSource1.Add(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext));
                    k++;
                }
            }

            lst = null;
            Grid g2 = GetGridHeading();
            //Added at razi
            g2.Visibility = Visibility.Collapsed;
            lst = (ListBox)Form.FindName("ManagementAntibiotics");
            if (lst != null)
            {
                PCRS.ItemsSource2 = new List<Medication>();
                k = 0;
                while (k < lst.Items.Count)
                {
                    string s1, s2, s3, s4;
                    int s5, s6;
                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                        s1 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.Description);
                    else
                        s1 = "";
                    s2 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose);

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route != null)
                        s3 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description;
                    else
                        s3 = "";

                    s4 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString();
                    s5 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day);
                    s6 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity);
                    g2 = AddGridItem(g2, s1, s2, s3, s4, s5, s6);
                    PCRS.ItemsSource2.Add(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext));
                    k++;
                }
            }

            lst = null;
            Grid g3 = GetGridHeading();
            //Added at razi
            g3.Visibility = Visibility.Collapsed;
            lst = (ListBox)Form.FindName("ManagementAntipyretic");
            if (lst != null)
            {
                PCRS.ItemsSource3 = new List<Medication>();
                k = 0;
                while (k < lst.Items.Count)
                {
                    string s1, s2, s3, s4;
                    int s5, s6;
                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                        s1 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.Description);
                    else
                        s1 = "";
                    s2 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose);

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route != null)
                        s3 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description;
                    else
                        s3 = "";

                    s4 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString();
                    s5 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day);
                    s6 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity);
                    g3 = AddGridItem(g3, s1, s2, s3, s4, s5, s6);
                    PCRS.ItemsSource3.Add(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext));
                    k++;
                }
            }

            lst = null;
            Grid g4 = GetGridHeading();
            //Added at razi
            g4.Visibility = Visibility.Collapsed;
            lst = (ListBox)Form.FindName("ManagementAntispasmodic");

            if (lst != null)
            {
                PCRS.ItemsSource4 = new List<Medication>();
                k = 0;
                while (k < lst.Items.Count)
                {
                    string s1, s2, s3, s4;
                    int s5, s6;
                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                        s1 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.Description);
                    else
                        s1 = "";
                    s2 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose);

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route != null)
                        s3 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description;
                    else
                        s3 = "";

                    s4 = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString();
                    s5 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day);
                    s6 = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity);
                    g4 = AddGridItem(g4, s1, s2, s3, s4, s5, s6);
                    PCRS.ItemsSource4.Add(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext));
                    k++;
                }
            }

            Grid.SetRow(g1, 0);
            Grid.SetColumn(g1, 1);
            MainGrid.Children.Add(g1);

            Grid.SetRow(g2, 1);
            Grid.SetColumn(g2, 1);
            MainGrid.Children.Add(g2);

            Grid.SetRow(g3, 2);
            Grid.SetColumn(g3, 1);
            MainGrid.Children.Add(g3);

            Grid.SetRow(g4, 3);
            Grid.SetColumn(g4, 1);
            MainGrid.Children.Add(g4);

            return MainGrid;
        }

        void HyperBtn_Click(object sender, RoutedEventArgs e)
        {

            if (((HyperlinkButton)sender).TargetName == "Razi_Case Referral Sheet_31_08_2010.doc")
            {

                PrintDocument Pd = new PrintDocument();
                Pd.PrintPage += new EventHandler<PrintPageEventArgs>(Pd_PrintPage);
                Pd.Print("CaseReferral");

            }
            else
            {
                //HtmlPage.PopupWindow(new Uri(file), "_blank", op);
                HtmlPage.Window.Invoke("alertText", new string[] { ((HyperlinkButton)sender).TargetName });
            }
            //HtmlPage.Window.Invoke("open", new object[] { "../Images/" + ((HyperlinkButton)sender).TargetName});
        }

        void Pd_PrintPage(object sender, PrintPageEventArgs e)
        {
            //throw new NotImplementedException();
            CaseReferralSheet CRS = new CaseReferralSheet();
            string CC = "";
            try
            {
                //    try
                //{
                //    PCReferral.Name = this.SelectedPatient.Name;
                //    PCReferral.Age = this.SelectedPatient.Age.ToString();
                //    PCReferral.Gender = this.SelectedPatient.Gender;
                //    PCReferral.Add = this.SelectedPatient.Address;
                //    PCReferral.Occupation = this.SelectedPatient.Occupation;
                //    PCReferral.Phone = this.SelectedPatient.Phone;
                //    PCReferral.Date = DateTime.Now.ToString();
                //    PCReferral.ClinicRefNo= this.SelectedPatient.ClinicRegNo;

                //    //PCReferral.ReferredByDoctor = "Dr. Asthana";
                //    PCReferral.ReferredByDoctor = "";
                //    if(Form.FindName("RMTo")!=null)
                //        PCReferral.ReferredToDoctor = (DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem).Title : "";
                //    //PCReferral.ClinicNo1 = "1";
                //    PCReferral.ClinicNo1 = "";
                //    if(Form.FindName("RMAt")!=null)
                //        PCReferral.ClinicNo2 = (DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem).Title : "";
                //    //PCReferral.MobileNo1 = "8956138567";
                //    PCReferral.MobileNo1 = "";
                //    //PCReferral.MobileNo2 = "9867543215";
                //    PCReferral.MobileNo2 = "";
                //    PCReferral.ProDiag = "";
                //    if(Form.FindName("RMProvisionalDiagnosis")!=null)
                //        PCReferral.ProDiag = ((TextBox)Form.FindName("RMProvisionalDiagnosis")).Text;
                //    //PCReferral.ProDiag = "Pediatric-Diarrhea";

                //    if (Form.FindName("RMFor") != null && ((DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem) != null && Form.FindName("RMSpecificRequest") != null && (TextBox)Form.FindName("RMSpecificRequest") != null)
                //    {
                //        PCReferral.Summary = "\t\tReason of Referring : " + (DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem).Title : "" + "\r\t\tSpecific Request : " + ((TextBox)Form.FindName("RMSpecificRequest")).Text;
                //    }
                //}


                CRS.SetParticulars(this.SelectedPatient.Name, this.SelectedPatient.Age.ToString(), this.SelectedPatient.Gender, this.SelectedPatient.Address, this.SelectedPatient.Occupation, this.SelectedPatient.Phone, DateTime.Now.ToString(), this.SelectedPatient.ClinicRegNo);
                CRS.SetReferralDetails("", (DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem).Title : "", "", (DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem).Title : "", "", "");
                if (cmbComplaint.SelectedItem != null)
                    CC = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).Title;
                CRS.SetProDiagChiefComplaint(((TextBox)Form.FindName("RMProvisionalDiagnosis")).Text, CC);

                if (Form.FindName("RMFor") != null && ((DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem) != null && Form.FindName("RMSpecificRequest") != null && (TextBox)Form.FindName("RMSpecificRequest") != null)
                {
                    CRS.TxtSummary.Text = "\t\tReason of Referring : " + (DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem).Title : "" + "\r\t\tSpecific Request : " + ((TextBox)Form.FindName("RMSpecificRequest")).Text;
                }
            }
            catch (Exception ex)
            {

            }
            Indicatior = new WaitIndicator();
            Indicatior.Show();
            e.PageVisual = CRS;
            Indicatior.Close();
        }

        string textBefore = null;
        int selectionStart = 0;
        int selectionLength = 0;

        void DecField_KeyDown(object sender, KeyEventArgs e)
        {
            //throw new NotImplementedException();
            textBefore = ((TextBox)sender).Text;
            selectionStart = ((TextBox)sender).SelectionStart;
            selectionLength = ((TextBox)sender).SelectionLength;
        }

        void DecField_TextChanged(object sender, TextChangedEventArgs e)
        {
            //throw new NotImplementedException();

            // Checking for Valid Decimal Number
            if (((TextBox)sender).Text != "" && !((TextBox)sender).Text.IsItDecimal())
            {
                ((TextBox)sender).Text = textBefore;
                ((TextBox)sender).SelectionStart = selectionStart;
                ((TextBox)sender).SelectionLength = selectionLength;
                textBefore = "";
                selectionStart = 0;
                selectionLength = 0;
            }


            if (((TextBox)sender).Name == "StuntingPercent" && IsFirstTime == false)
            {
                if (((TextBox)sender).Text != null && ((TextBox)sender).Text != "")
                {
                    double stun = double.Parse(((TextBox)sender).Text);
                    ComboBox cmbList = (ComboBox)Form.FindName("NutritionStatus");
                    cmbList.SelectedItem = null;
                    ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = null;
                    if (stun > 95)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Normal").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Normal").Single();
                    }
                    if (stun > 87.5 && stun <= 95)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Mildy impaired").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Mildy impaired").Single();
                    }
                    if (stun > 80 && stun <= 87.5)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Moderately impaired").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Moderately impaired").Single();
                    }
                    if (stun <= 80)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Severly impaired").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Severly impaired").Single();
                    }
                }
            }
            if (((TextBox)sender).Name == "WastingPercent")
            {
                if (((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && IsFirstTime == false)
                {
                    double wast = double.Parse(((TextBox)sender).Text);
                    ComboBox cmbList = (ComboBox)Form.FindName("NutritionStatus");
                    cmbList.SelectedItem = null;
                    ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = null;
                    if (wast > 90)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Normal").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Normal").Single();
                    }
                    if (wast > 80 && wast <= 90)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Mildy impaired").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Mildy impaired").Single();
                    }
                    if (wast > 70 && wast <= 80)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Moderately impaired").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Moderately impaired").Single();
                    }
                    if (wast <= 70)
                    {
                        ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Severly impaired").Single();
                        cmbList.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbList.DataContext).Settings).ItemSource.Where(i => i.Title == "Severly impaired").Single();
                    }
                }
            }
        }

        //void mrci_cmbSelectionChanged(object sender, RoutedEventArgs e)
        //{
        //    //throw new NotImplementedException();

        //    if (((AutoCompleteComboBox)sender).SelectedItem != null && IsFirstTime == false)
        //    {
        //        bool validItem = true;
        //        var lstBox = ((Medication)((AutoCompleteComboBox)sender).DataContext).Parent;
        //        var MedSetting = ((Medication)((AutoCompleteComboBox)sender).DataContext).MedicationSetting;
        //        int CurrentIndex = ((Medication)((AutoCompleteComboBox)sender).DataContext).Index;

        //        for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
        //        {
        //            if (i == CurrentIndex)
        //                continue;
        //            if (((Medication)MedSetting.ItemsSource[i]).Drug!=null && ((MasterListItem)((AutoCompleteComboBox)sender).SelectedItem).ID == ((Medication)MedSetting.ItemsSource[i]).Drug.ID)
        //            {
        //                ////((Medication)MedSetting.ItemsSource[i]).DrugSource = null;
        //                //((AutoCompleteComboBox)sender).SelectedValuePath = "abc";
        //                //((AutoCompleteComboBox)sender).SelectedValuePath = "ID";

        //                ////((Medication)MedSetting.ItemsSource[i]).DrugSource = MedSetting.ItemsSource[0].DrugSource;
        //                validItem = false;
        //                break;
        //            }
        //        }

        //        if (validItem == true)
        //        {
        //            ToolTip tt;
        //            TextBlock tbl = new TextBlock();
        //            tbl.TextWrapping = TextWrapping.Wrap;
        //            tbl.Text = "";

        //            if ((string)((AutoCompleteComboBox)sender).Tag == "Drug")
        //            {
        //                #region Code for ToolTip (Uncomment when use Combobox)
        //                //switch (((MasterListItem)((ComboBox)sender).SelectedItem).Description)
        //                //{
        //                //    case "Cotrimoxazole":
        //                //    case "Ciprofloxacin":
        //                //        tbl.Text = "indicated for Shigella  or Enteroinvasive E.coli or V. Cholerae";
        //                //        break;

        //                //    case "Doxycycline":
        //                //    case "Furazolidone":
        //                //        tbl.Text = "indicated for  V. Cholerae, ";
        //                //        break;

        //                //    case "Metronidazole":
        //                //        //if (((Medication)((ComboBox)sender).DataContext).Dose == "15mg/kg/day in 3 divided doses for 5 days")
        //                //        //    tbl.Text = "indicated for acute giardiasis";
        //                //        //else if (((Medication)((ComboBox)sender).DataContext).Dose == "35-50 mg/kg/day in 3 divided doses for 7-10days")
        //                //        //    tbl.Text = "indicated for Entamoeba histolytica";
        //                //        //else
        //                //        //    tbl.Text = "";
        //                //        tbl.Text = "Indicated for diarrhea due to acute giardiasis and Entamoeba histolytica";
        //                //        break;

        //                //    case "Ampicillin":
        //                //        tbl.Text = "indicated for non typhoid salmonella";
        //                //        break;

        //                //    case "Tinidazole":
        //                //        tbl.Text = "indicated for acute giardiasis ";
        //                //        break;

        //                //    case "Dicylomine":
        //                //        tbl.Text = "indicated for children above 6 months in presence of spasmodic diarrhoea\rContraindicated in jaundice and acute abdomen of unknown etiology";
        //                //        break;

        //                //    case "Diloxanide Furoate":
        //                //        tbl.Text = "indicated for Entamoeba histolytica";
        //                //        break;

        //                //    default:
        //                //        tbl.Text = "";
        //                //        break;
        //                //}

        //                //if (tbl.Text != "")
        //                //{
        //                //    tt = new ToolTip();
        //                //    tt.Content = tbl;
        //                //    ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
        //                //}
        //                //else
        //                //{
        //                //    tt = null;
        //                //    ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
        //                //}
        //                #endregion
        //                //((Medication)((ComboBox)sender).DataContext).Drug = (MasterListItem)((ComboBox)sender).SelectedItem;
        //                ((Medication)((AutoCompleteComboBox)sender).DataContext).Drug = (MasterListItem)((AutoCompleteComboBox)sender).SelectedItem;
        //            }
        //            //if ((string)((ComboBox)sender).Tag == "Day")
        //            //{
        //            //    //((Medication)((ComboBox)sender).DataContext).Day = (int)((ComboBox)sender).SelectedValue;
        //            //    ((Medication)((TextBox)sender).DataContext).Day = Convert.ToInt32(((TextBox)sender).Text);
        //            //}
        //            //if ((string)((ComboBox)sender).Tag == "Quantity")
        //            //{
        //            //    //((Medication)((ComboBox)sender).DataContext).Quantity = (int)((ComboBox)sender).SelectedValue;
        //            //    ((Medication)((TextBox)sender).DataContext).Quantity = Convert.ToInt32(((TextBox)sender).Text);
        //            //}
        //            //if ((string)((ComboBox)sender).Tag == "Dose")
        //            //{
        //            //    #region Code for Tool Tip
        //            //    switch ((string)((ComboBox)sender).SelectedValue)
        //            //    {
        //            //        case "15mg/kg/day in 3 divided doses for 5 days":
        //            //            if (((Medication)((ComboBox)sender).DataContext).Drug.Description == "Metronidazole")
        //            //                tbl.Text = "indicated for acute giardiasis";
        //            //            break;

        //            //        case "35-50 mg/kg/day in 3 divided doses for 7-10days":
        //            //            if (((Medication)((ComboBox)sender).DataContext).Drug.Description == "Metronidazole")
        //            //                tbl.Text = "indicated for Entamoeba histolytica";
        //            //            break;
        //            //    }
        //            //    if (tbl.Text != "")
        //            //    {
        //            //        tt = new ToolTip();
        //            //        tt.Content = tbl;
        //            //        ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
        //            //    }
        //            //    else
        //            //    {
        //            //        tt = null;
        //            //        ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
        //            //    }

        //            //    #endregion
        //            //    ((Medication)((ComboBox)sender).DataContext).Dose = (string)((ComboBox)sender).SelectedValue;
        //            //}
        //            if ((string)((AutoCompleteComboBox)sender).Tag == "Route")
        //            {
        //                ((Medication)((AutoCompleteComboBox)sender).DataContext).Route = (MasterListItem)((AutoCompleteComboBox)sender).SelectedItem;
        //            }
        //            //if ((string)((ComboBox)sender).Tag == "Frequency")
        //            //{
        //            //    //((Medication)((ComboBox)sender).DataContext).Frequency = (string)((ComboBox)sender).SelectedValue;
        //            //    ((Medication)((TextBox)sender).DataContext).Frequency = ((TextBox)sender).Text;

        //            //}
        //        }
        //        else
        //        {
        //            MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Item '" + ((MasterListItem)((AutoCompleteComboBox)sender).SelectedItem).Description + "' is already added in list.\n Please select different item.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
        //            lstBox.Items.Clear();
        //            for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
        //            {
        //                MedicatioRepeterControlItem mrci = new MedicatioRepeterControlItem();
        //                mrci.OnAddRemoveClick += new RoutedEventHandler(mrci_OnAddRemoveClick);
        //                mrci.cmbSelectionChanged += new RoutedEventHandler(mrci_cmbSelectionChanged);
        //                mrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
        //                mrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
        //                mrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
        //                mrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

        //                mrci.btnContradictionSideEffectClick += new RoutedEventHandler(mrci_btnContradictionSideEffectClick);
        //                //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
        //                MedSetting.ItemsSource[i].Index = i;
        //                MedSetting.ItemsSource[i].Command = ((i == MedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
        //                MedSetting.ItemsSource[i].Parent = lstBox;
        //                MedSetting.ItemsSource[i].MedicationSetting = MedSetting;
        //                mrci.DataContext = MedSetting.ItemsSource[i];
        //                lstBox.Items.Add(mrci);
        //            }                    
        //            mgbox.Show();
        //        }
        //    }

        //    #region Code for follow up Medication
        //    Grid g = (Grid)Form.FindName("FollowUpMedication");
        //    if (g != null)
        //    {
        //        g.RowDefinitions.Clear();
        //        g.ColumnDefinitions.Clear();
        //        g.Children.Clear();
        //        g = GetGridSchema(g);
        //    }
        //    #endregion
        //}

        //Event code sent by Harish on 20-Apr-2011
        void mrci_cmbSelectionChanged(object sender, RoutedEventArgs e)
        {
            //throw new NotImplementedException();



            if (((AutoCompleteComboBox)sender).SelectedItem != null && IsFirstTime == false)
            {
                if ((string)((AutoCompleteComboBox)sender).Tag == "Route")
                {
                    ((Medication)((AutoCompleteComboBox)sender).DataContext).Route = (MasterListItem)((AutoCompleteComboBox)sender).SelectedItem;
                }
                else if ((string)((AutoCompleteComboBox)sender).Tag == "Drug")
                {
                    bool validItem = true;
                    var lstBox = ((Medication)((AutoCompleteComboBox)sender).DataContext).Parent;
                    var MedSetting = ((Medication)((AutoCompleteComboBox)sender).DataContext).MedicationSetting;
                    int CurrentIndex = ((Medication)((AutoCompleteComboBox)sender).DataContext).Index;

                    for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
                    {
                        if (i == CurrentIndex)
                            continue;
                        if (((Medication)MedSetting.ItemsSource[i]).Drug != null && ((MasterListItem)((AutoCompleteComboBox)sender).SelectedItem).ID == ((Medication)MedSetting.ItemsSource[i]).Drug.ID)
                        {
                            ////((Medication)MedSetting.ItemsSource[i]).DrugSource = null;
                            //((AutoCompleteComboBox)sender).SelectedValuePath = "abc";
                            //((AutoCompleteComboBox)sender).SelectedValuePath = "ID";

                            ////((Medication)MedSetting.ItemsSource[i]).DrugSource = MedSetting.ItemsSource[0].DrugSource;
                            validItem = false;
                            break;
                        }
                    }

                    if (validItem == true)
                    {
                        ToolTip tt;
                        TextBlock tbl = new TextBlock();
                        tbl.TextWrapping = TextWrapping.Wrap;
                        tbl.Text = "";

                        if ((string)((AutoCompleteComboBox)sender).Tag == "Drug")
                        {
                            #region Code for ToolTip (Uncomment when use Combobox)
                            //switch (((MasterListItem)((ComboBox)sender).SelectedItem).Description)
                            //{
                            //    case "Cotrimoxazole":
                            //    case "Ciprofloxacin":
                            //        tbl.Text = "indicated for Shigella  or Enteroinvasive E.coli or V. Cholerae";
                            //        break;

                            //    case "Doxycycline":
                            //    case "Furazolidone":
                            //        tbl.Text = "indicated for  V. Cholerae, ";
                            //        break;

                            //    case "Metronidazole":
                            //        //if (((Medication)((ComboBox)sender).DataContext).Dose == "15mg/kg/day in 3 divided doses for 5 days")
                            //        //    tbl.Text = "indicated for acute giardiasis";
                            //        //else if (((Medication)((ComboBox)sender).DataContext).Dose == "35-50 mg/kg/day in 3 divided doses for 7-10days")
                            //        //    tbl.Text = "indicated for Entamoeba histolytica";
                            //        //else
                            //        //    tbl.Text = "";
                            //        tbl.Text = "Indicated for diarrhea due to acute giardiasis and Entamoeba histolytica";
                            //        break;

                            //    case "Ampicillin":
                            //        tbl.Text = "indicated for non typhoid salmonella";
                            //        break;

                            //    case "Tinidazole":
                            //        tbl.Text = "indicated for acute giardiasis ";
                            //        break;

                            //    case "Dicylomine":
                            //        tbl.Text = "indicated for children above 6 months in presence of spasmodic diarrhoea\rContraindicated in jaundice and acute abdomen of unknown etiology";
                            //        break;

                            //    case "Diloxanide Furoate":
                            //        tbl.Text = "indicated for Entamoeba histolytica";
                            //        break;

                            //    default:
                            //        tbl.Text = "";
                            //        break;
                            //}

                            //if (tbl.Text != "")
                            //{
                            //    tt = new ToolTip();
                            //    tt.Content = tbl;
                            //    ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
                            //}
                            //else
                            //{
                            //    tt = null;
                            //    ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
                            //}
                            #endregion
                            //((Medication)((ComboBox)sender).DataContext).Drug = (MasterListItem)((ComboBox)sender).SelectedItem;
                            ((Medication)((AutoCompleteComboBox)sender).DataContext).Drug = (MasterListItem)((AutoCompleteComboBox)sender).SelectedItem;
                        }
                        //if ((string)((ComboBox)sender).Tag == "Day")
                        //{
                        //    //((Medication)((ComboBox)sender).DataContext).Day = (int)((ComboBox)sender).SelectedValue;
                        //    ((Medication)((TextBox)sender).DataContext).Day = Convert.ToInt32(((TextBox)sender).Text);
                        //}
                        //if ((string)((ComboBox)sender).Tag == "Quantity")
                        //{
                        //    //((Medication)((ComboBox)sender).DataContext).Quantity = (int)((ComboBox)sender).SelectedValue;
                        //    ((Medication)((TextBox)sender).DataContext).Quantity = Convert.ToInt32(((TextBox)sender).Text);
                        //}
                        //if ((string)((ComboBox)sender).Tag == "Dose")
                        //{
                        //    #region Code for Tool Tip
                        //    switch ((string)((ComboBox)sender).SelectedValue)
                        //    {
                        //        case "15mg/kg/day in 3 divided doses for 5 days":
                        //            if (((Medication)((ComboBox)sender).DataContext).Drug.Description == "Metronidazole")
                        //                tbl.Text = "indicated for acute giardiasis";
                        //            break;

                        //        case "35-50 mg/kg/day in 3 divided doses for 7-10days":
                        //            if (((Medication)((ComboBox)sender).DataContext).Drug.Description == "Metronidazole")
                        //                tbl.Text = "indicated for Entamoeba histolytica";
                        //            break;
                        //    }
                        //    if (tbl.Text != "")
                        //    {
                        //        tt = new ToolTip();
                        //        tt.Content = tbl;
                        //        ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
                        //    }
                        //    else
                        //    {
                        //        tt = null;
                        //        ToolTipService.SetToolTip((Grid)((ComboBox)sender).Parent, tt);
                        //    }

                        //    #endregion
                        //    ((Medication)((ComboBox)sender).DataContext).Dose = (string)((ComboBox)sender).SelectedValue;
                        //}
                        //if ((string)((AutoCompleteComboBox)sender).Tag == "Route")
                        //{
                        //    ((Medication)((AutoCompleteComboBox)sender).DataContext).Route = (MasterListItem)((AutoCompleteComboBox)sender).SelectedItem;
                        //}
                        //if ((string)((ComboBox)sender).Tag == "Frequency")
                        //{
                        //    //((Medication)((ComboBox)sender).DataContext).Frequency = (string)((ComboBox)sender).SelectedValue;
                        //    ((Medication)((TextBox)sender).DataContext).Frequency = ((TextBox)sender).Text;

                        //}
                    }
                    else
                    {
                        MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Item '" + ((MasterListItem)((AutoCompleteComboBox)sender).SelectedItem).Description + "' is already added in list.\n Please select different item.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                        lstBox.Items.Clear();
                        for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
                        {
                            MedicatioRepeterControlItem mrci = new MedicatioRepeterControlItem();
                            mrci.OnAddRemoveClick += new RoutedEventHandler(mrci_OnAddRemoveClick);
                            mrci.cmbSelectionChanged += new RoutedEventHandler(mrci_cmbSelectionChanged);
                            mrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
                            mrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
                            mrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
                            mrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

                            mrci.btnContradictionSideEffectClick += new RoutedEventHandler(mrci_btnContradictionSideEffectClick);
                            //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                            MedSetting.ItemsSource[i].Index = i;
                            MedSetting.ItemsSource[i].Command = ((i == MedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                            MedSetting.ItemsSource[i].Parent = lstBox;
                            MedSetting.ItemsSource[i].MedicationSetting = MedSetting;
                            mrci.DataContext = MedSetting.ItemsSource[i];
                            lstBox.Items.Add(mrci);
                        }
                        mgbox.Show();
                    }
                }
            }
            #region Code for follow up Medication
            Grid g = (Grid)Form.FindName("FollowUpMedication");
            if (g != null)
            {
                g.RowDefinitions.Clear();
                g.ColumnDefinitions.Clear();
                g.Children.Clear();
                g = GetGridSchema(g);
            }
            #endregion
        }

        void lstBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //if (((ListBox)sender).SelectedItem != null)
            //{
            //    ComboBox cmbDrug = (ComboBox)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).FindName("cmbDrug");
            //    ComboBox cmbDose = (ComboBox)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).FindName("cmbDose");
            //    ComboBox cmbRoute = (ComboBox)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).FindName("cmbRoute");
            //    ComboBox cmbFrequency = (ComboBox)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).FindName("cmbFrequency");

            //    ((Medication)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).DataContext).Drug.Value = (string)cmbDrug.SelectedValue;
            //    ((Medication)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).DataContext).Dose.Value = (string)cmbDose.SelectedValue;
            //    ((Medication)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).DataContext).Route.Value = (string)cmbRoute.SelectedValue;
            //    ((Medication)((MedicatioRepeterControlItem)((ListBox)sender).SelectedItem).DataContext).Frequency.Value = (string)cmbFrequency.SelectedValue;

            //}
        }

        void cmbList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //throw new NotImplementedException();

            try
            {
                if (((FrameworkElement)(((FieldDetail)(((Control)sender).DataContext))).Control).Visibility == Visibility.Visible)
                {
                    #region Dependent
                    //foreach (var item in ((FieldDetail)(((Control)sender).DataContext)).DependentFieldDetail)
                    //{
                    //    if (item.Control is FrameworkElement)
                    //    {
                    //        switch (((BooleanExpression<bool>)item.Condition).Operation)
                    //        {
                    //            case BooleanOperations.EqualTo:
                    //                if (((BooleanExpression<bool>)item.Condition).ReferenceValue == ((BooleanFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).Value)
                    //                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                    //                else
                    //                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                    //                break;
                    //            case BooleanOperations.NotEqualTo:
                    //                if (((BooleanExpression<bool>)item.Condition).ReferenceValue != ((BooleanFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).Value)
                    //                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                    //                else
                    //                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                    //                break;
                    //        }

                    //        if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                    //            CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                    //    }
                    //}
                    #endregion

                    if (((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((Control)sender).DataContext)).RelationalFieldList)
                        {
                            if (item.Control is FrameworkElement && item.RelationCondition is ComboExpression<bool>)
                            {
                                switch (((ComboExpression<bool>)item.RelationCondition).Operation)
                                {
                                    case ComboOperations.EqualTo:
                                        if (((ListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem != null && ((ComboExpression<bool>)item.RelationCondition).SelectedItem == ((ListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem.Title)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }
                                        else
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }
                                        break;
                                    case ComboOperations.NotEqualTo:
                                        if (((ListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem != null && ((ComboExpression<bool>)item.RelationCondition).SelectedItem != ((ListFieldSetting)((FieldDetail)((Control)sender).DataContext).Settings).SelectedItem.Title)
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        }
                                        else
                                        {
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        }
                                        break;
                                }

                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }
            }
            catch (Exception ex)
            {

                //throw;
            }

            if (IsFirstTime == false)
            {
                if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                {
                    if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                    {
                        if (sender is ComboBox && ((ComboBox)sender).Name == "CoughDuration")
                        {
                            if (((ComboBox)sender).SelectedItem != null)
                            {
                                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Less than 3 weeks")
                                {
                                    if (Form.FindName("PDAcuteCough") is CheckBox)
                                    {
                                        CheckBox chkAcuteCough = (CheckBox)Form.FindName("PDAcuteCough");
                                        chkAcuteCough.IsChecked = true;
                                        chk_Click(chkAcuteCough, new RoutedEventArgs());
                                    }
                                }
                                else
                                {
                                    if (Form.FindName("PDAcuteCough") is CheckBox)
                                    {
                                        CheckBox chkAcuteCough = (CheckBox)Form.FindName("PDAcuteCough");
                                        chkAcuteCough.IsChecked = false;
                                        chk_Click(chkAcuteCough, new RoutedEventArgs());
                                    }
                                }

                                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "3 weeks to 8 weeks")
                                {
                                    if (Form.FindName("PDPersistentCough") is CheckBox)
                                    {
                                        CheckBox chkPersistentCough = (CheckBox)Form.FindName("PDPersistentCough");
                                        chkPersistentCough.IsChecked = true;
                                        chk_Click(chkPersistentCough, new RoutedEventArgs());
                                    }
                                }
                                else
                                {
                                    if (Form.FindName("PDPersistentCough") is CheckBox)
                                    {
                                        CheckBox chkPersistentCough = (CheckBox)Form.FindName("PDPersistentCough");
                                        chkPersistentCough.IsChecked = false;
                                        chk_Click(chkPersistentCough, new RoutedEventArgs());
                                    }
                                }

                                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "More than 8 weeks")
                                {
                                    if (Form.FindName("PDChronicCough") is CheckBox)
                                    {
                                        CheckBox chkPDChronicCough = (CheckBox)Form.FindName("PDChronicCough");
                                        chkPDChronicCough.IsChecked = true;
                                        chk_Click(chkPDChronicCough, new RoutedEventArgs());
                                    }
                                }
                                else
                                {
                                    if (Form.FindName("PDChronicCough") is CheckBox)
                                    {
                                        CheckBox chkPDChronicCough = (CheckBox)Form.FindName("PDChronicCough");
                                        chkPDChronicCough.IsChecked = false;
                                        chk_Click(chkPDChronicCough, new RoutedEventArgs());
                                    }
                                }
                            }
                        }

                        if (sender is ComboBox && ((ComboBox)sender).Name == "CoughDuration")
                        {
                            if (Form.FindName("RiskCardiacProblemsCHF") is CheckBox && Form.FindName("AlarmPersistentCoughCardiovascularDisease") is CheckBox)
                            {
                                CheckBox chkCardiac = (CheckBox)Form.FindName("RiskCardiacProblemsCHF");
                                CheckBox chkAlarm = (CheckBox)Form.FindName("AlarmPersistentCoughCardiovascularDisease");
                                if (chkCardiac.IsChecked == true && ((ComboBox)sender).SelectedItem != null && (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "3 weeks to 8 weeks" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "More than 8 weeks"))
                                {
                                    chkAlarm.IsChecked = true;
                                    chkAlarm.Visibility = Visibility.Visible;
                                    ((FrameworkElement)((FieldDetail)chkAlarm.DataContext).LabelControl).Visibility = Visibility.Visible;
                                }
                                else
                                {
                                    chkAlarm.IsChecked = false;
                                    chkAlarm.Visibility = Visibility.Collapsed;
                                    ((FrameworkElement)((FieldDetail)chkAlarm.DataContext).LabelControl).Visibility = Visibility.Collapsed;
                                }
                            }
                        }

                        if (sender is ComboBox && ((ComboBox)sender).Name == "PERespiratory")
                        {
                            if (Form.FindName("Temprature") is TextBox && Form.FindName("PDCoughWithChestInfection") is CheckBox)
                            {
                                TextBox txtTemp = (TextBox)Form.FindName("Temprature");
                                CheckBox chkCoughChest = (CheckBox)Form.FindName("PDCoughWithChestInfection");
                                if (txtTemp.Text != null && txtTemp.Text != "" && Convert.ToDecimal(txtTemp.Text) > 101 && ((ComboBox)sender).SelectedItem != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Ronchi" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Crepts")
                                {
                                    chkCoughChest.IsChecked = true;
                                    chk_Click(chkCoughChest, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkCoughChest.IsChecked = false;
                                    chk_Click(chkCoughChest, new RoutedEventArgs());
                                }
                            }
                        }
                    }
                    else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                    {
                        if (sender is FrameworkElement && (((FrameworkElement)sender).Name == "HistUrineOutput" || ((FrameworkElement)sender).Name == "PEGeneralCondition" || ((FrameworkElement)sender).Name == "PEThirst" || ((FrameworkElement)sender).Name == "PEMucusMembrane" || ((FrameworkElement)sender).Name == "PESkinPinchAbdomen" || ((FrameworkElement)sender).Name == "PEUrineOutput"))
                        {
                            if (Form.FindName("HSHydrationStatus") is ComboBox && Form.FindName("HistUrineOutput") is ComboBox && Form.FindName("PEGeneralCondition") is ComboBox && Form.FindName("PEThirst") is ComboBox && Form.FindName("PEMucusMembrane") is ComboBox && Form.FindName("PESkinPinchAbdomen") is ComboBox && Form.FindName("PEUrineOutput") is ComboBox)
                            {
                                ComboBox cmbHSHydrationStatus = (ComboBox)Form.FindName("HSHydrationStatus");
                                ComboBox cmbHistUrineOutput = (ComboBox)Form.FindName("HistUrineOutput");
                                ComboBox cmbPEGeneralCondition = (ComboBox)Form.FindName("PEGeneralCondition");
                                ComboBox cmbPEThirst = (ComboBox)Form.FindName("PEThirst");
                                ComboBox cmbPEMucusMembrane = (ComboBox)Form.FindName("PEMucusMembrane");
                                ComboBox cmbPESkinPinchAbdomen = (ComboBox)Form.FindName("PESkinPinchAbdomen");
                                ComboBox cmbPEUrineOutput = (ComboBox)Form.FindName("PEUrineOutput");

                                if ((cmbHistUrineOutput.SelectedItem != null && ((DynamicListItem)cmbHistUrineOutput.SelectedItem).Title == "Absent") || (cmbPEGeneralCondition.SelectedItem != null && ((DynamicListItem)cmbPEGeneralCondition.SelectedItem).Title == "Very lethargic or drowsy") || (cmbPEThirst.SelectedItem != null && ((DynamicListItem)cmbPEThirst.SelectedItem).Title == "Intense") || (cmbPEMucusMembrane.SelectedItem != null && ((DynamicListItem)cmbPEMucusMembrane.SelectedItem).Title == "Parched") || (cmbPESkinPinchAbdomen.SelectedItem != null && ((DynamicListItem)cmbPESkinPinchAbdomen.SelectedItem).Title == "Retracts very slowly (>2 Sec)") || (cmbPEUrineOutput.SelectedItem != null && ((DynamicListItem)cmbPEUrineOutput.SelectedItem).Title == "Minimal"))
                                {
                                    if (((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource != null && ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Count > 0)
                                    {
                                        try
                                        {
                                            ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Where(i => i.Title == "Severe dehydration").Single();
                                            cmbHSHydrationStatus.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Where(i => i.Title == "Severe dehydration").Single();
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                    }
                                }
                                else if ((cmbHistUrineOutput.SelectedItem != null && ((DynamicListItem)cmbHistUrineOutput.SelectedItem).Title == "Decreased") || (cmbPEGeneralCondition.SelectedItem != null && ((DynamicListItem)cmbPEGeneralCondition.SelectedItem).Title == "Slightly lethargic") || (cmbPEThirst.SelectedItem != null && ((DynamicListItem)cmbPEThirst.SelectedItem).Title == "Moderate") || (cmbPEMucusMembrane.SelectedItem != null && ((DynamicListItem)cmbPEMucusMembrane.SelectedItem).Title == "Dry") || (cmbPESkinPinchAbdomen.SelectedItem != null && ((DynamicListItem)cmbPESkinPinchAbdomen.SelectedItem).Title == "Retracts slowly (1-2 Sec) ") || (cmbPEUrineOutput.SelectedItem != null && ((DynamicListItem)cmbPEUrineOutput.SelectedItem).Title == "Decreased"))
                                {
                                    if (((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource != null && ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Count > 0)
                                    {
                                        try
                                        {
                                            ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Where(i => i.Title == "Moderate dehydration").Single();
                                            cmbHSHydrationStatus.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Where(i => i.Title == "Moderate dehydration").Single();
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                    }
                                }
                                else if ((cmbPEThirst.SelectedItem != null && ((DynamicListItem)cmbPEThirst.SelectedItem).Title == "Mild") || (cmbPEMucusMembrane.SelectedItem != null && ((DynamicListItem)cmbPEMucusMembrane.SelectedItem).Title == "Slightly dry"))
                                {
                                    if (((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource != null && ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Count > 0)
                                    {
                                        try
                                        {
                                            ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).SelectedItem = ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Where(i => i.Title == "Mild dehydration").Single();
                                            cmbHSHydrationStatus.SelectedItem = ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).ItemSource.Where(i => i.Title == "Mild dehydration").Single();
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                    }
                                }
                                else
                                {
                                    ((ListFieldSetting)((FieldDetail)cmbHSHydrationStatus.DataContext).Settings).SelectedItem = null;
                                    cmbHSHydrationStatus.SelectedItem = null;
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PESkinColour")
                        {
                            if (Form.FindName("GEPallor") is CheckBox && Form.FindName("InvestLabs") is ListBox)
                            {
                                CheckBox chkGEPallor = (CheckBox)Form.FindName("GEPallor");
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");

                                if ((((ComboBox)sender).SelectedItem != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Pale") || (chkGEPallor.IsChecked == true))
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (IsFirstTime == false)
            {
                if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                {
                    if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                    {
                        switch (((ComboBox)sender).Name)
                        {
                            case "ProvisionalDiagnosis":
                                TextBox txtRMPD = (TextBox)Form.FindName("RMProvisionalDiagnosis");
                                if (txtRMPD != null)
                                    txtRMPD.Text = ((DynamicListItem)((ComboBox)sender).SelectedItem).Title;
                                break;
                        }
                    }
                }
            }

            #region Code For Validate Investigations According to Provisional Diagnosis & Hydration Status Version3
            if (IsFirstTime == false)
            {
                if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                {
                    if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                    {
                        switch (((ComboBox)sender).Name)
                        {
                            case "HydrationStatus":
                                ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
                                ComboBox cmbHyd4 = (ComboBox)Form.FindName("Hydration4StatusManagement");
                                ComboBox cmbZinc = (ComboBox)Form.FindName("ZincSupplementManagement");

                                IGetList src = null;

                                if (((ComboBox)sender).SelectedItem != null)
                                {
                                    ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");

                                    #region Code for Validating Investigations
                                    if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Moderate dehydration" && (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea")))
                                    {
                                        #region Set Investigations for Condition1 and Condition2 ((acute Watery Diarrhea or Dysentry or Persistent Diarrhea) and Moderate Hydration)
                                        if (Form.FindName("SerumElectro") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("SerumElectro")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("BUNCreatinine") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Disable Investigations when condition 1 & 2 are not satisfied
                                        if (Form.FindName("SerumElectro") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("BUNCreatinine") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }

                                    if ((((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Mild dehydration" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Moderate dehydration") && (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea")))
                                    {
                                        #region Set Investigations for Condition 4,5 and 6 ((Dysentry or Persistent Diarrhea) and (Mild or Moderate Hydration))
                                        if (Form.FindName("StoolME") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("StoolCulture") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("OvaParasiteTest") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("OvaParasiteTest")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("OvaParasiteTest"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Disable Investigations when condition 4,5 and 6 are not satisfied
                                        if (Form.FindName("StoolME") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("StoolCulture") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("OvaParasiteTest") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("OvaParasiteTest")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("OvaParasiteTest"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #region Set ItemsSource of cmbHyd

                                    if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Mild dehydration" && cmbHyd != null)
                                    {
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 1, Title = "Source1", Value = "Source1" };
                                        //cmbHyd.ItemsSource = null;
                                        //cmbHyd.SelectedItem = null;
                                        //src = new Source1();
                                        //cmbHyd.ItemsSource = src.GetList();

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
                                        listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source1", Value = "Source1" };
                                        src = new Source1();
                                        listSetting.ItemSource = src.GetList();
                                        cmbHyd.ItemsSource = listSetting.ItemSource;
                                        if (listSetting.SelectedItem != null)
                                        {
                                            var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                                            cmbHyd.SelectedItem = item;
                                        }
                                    }
                                    else if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Moderate dehydration" && cmbHyd != null)
                                    {
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 2, Title = "Source2", Value = "Source2" };
                                        //src = new Source2();
                                        //cmbHyd.ItemsSource = src.GetList();

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
                                        listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source2", Value = "Source2" };
                                        src = new Source2();
                                        listSetting.ItemSource = src.GetList();
                                        cmbHyd.ItemsSource = listSetting.ItemSource;
                                        if (listSetting.SelectedItem != null)
                                        {
                                            var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                                            cmbHyd.SelectedItem = item;
                                        }
                                    }
                                    else
                                    {
                                        #region Set ItemsSource of cmbHyd to NULL
                                        if (cmbHyd != null)
                                        {
                                            //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
                                            //cmbHyd.ItemsSource = null;             

                                            LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
                                            listSetting.SelectedSource = null;
                                            cmbHyd.ItemsSource = null;
                                            cmbHyd.SelectedItem = null;
                                        }
                                        #endregion
                                    }

                                    #endregion

                                    #region Set ItemSource of cmbHyd4 to NULL
                                    if (cmbHyd4 != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title != "Severe dehydration")
                                    {
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = null;
                                        //cmbHyd4.ItemsSource = null;             

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
                                        listSetting.SelectedSource = null;
                                        cmbHyd4.ItemsSource = null;
                                        cmbHyd4.SelectedItem = null;
                                    }
                                    #endregion


                                    #region Set ItemsSource of cmbHyd4
                                    if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Severe dehydration" && cmbHyd4 != null)
                                    {
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 3, Title = "Source3", Value = "Source3" };
                                        //src = new Source3();
                                        //cmbHyd4.ItemsSource = src.GetList();

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
                                        listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source3", Value = "Source3" };
                                        src = new Source3();
                                        listSetting.ItemSource = src.GetList();
                                        cmbHyd4.ItemsSource = listSetting.ItemSource;
                                        if (listSetting.SelectedItem != null)
                                        {
                                            var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                                            cmbHyd4.SelectedItem = item;
                                        }
                                    }
                                    else
                                    {
                                        if (cmbHyd4 != null)
                                        {
                                            //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = null;
                                            //cmbHyd4.ItemsSource = null;             

                                            LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
                                            listSetting.SelectedSource = null;
                                            cmbHyd4.ItemsSource = null;
                                            cmbHyd4.SelectedItem = null;
                                        }
                                    }
                                    #endregion

                                    #region Set ItemsSource of cmbHyd to NULL
                                    if (cmbHyd != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Severe dehydration")
                                    {
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
                                        //cmbHyd.ItemsSource = null;             

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
                                        listSetting.SelectedSource = null;
                                        cmbHyd.ItemsSource = null;
                                        cmbHyd.SelectedItem = null;
                                    }
                                    #endregion

                                }
                                else
                                {
                                    #region Set Hyd and Hyd4 to NULL
                                    if (Form.FindName("HydrationStatusManagement") is ComboBox)
                                    {
                                        cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
                                        //cmbHyd.ItemsSource = null;

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
                                        listSetting.SelectedSource = null;
                                        cmbHyd.ItemsSource = null;
                                        cmbHyd.SelectedItem = null;
                                    }
                                    if (Form.FindName("Hydration4StatusManagement") is ComboBox)
                                    {
                                        cmbHyd = (ComboBox)Form.FindName("Hydration4StatusManagement");
                                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
                                        //cmbHyd.ItemsSource = null;

                                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
                                        listSetting.SelectedSource = null;
                                        cmbHyd.ItemsSource = null;
                                        cmbHyd.SelectedItem = null;
                                    }
                                    #endregion
                                }

                                #region Set Zinc ItemsSource
                                //if (cmbZinc != null)
                                //{
                                //    //((LookUpFieldSetting)((FieldDetail)cmbZinc.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 3, Title = "Source4", Value = "Source4" };
                                //    //src = new Source4();
                                //    //cmbZinc.ItemsSource = src.GetList();

                                //    LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbZinc.DataContext).Settings;
                                //    listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source4", Value = "Source4" };
                                //    src = new Source4();

                                //    listSetting.ItemSource = src.GetList();
                                //    if (cmbZinc.ItemsSource == null)
                                //    {
                                //        cmbZinc.ItemsSource = listSetting.ItemSource;
                                //    }
                                //    if (listSetting.SelectedItem != null)
                                //    {
                                //        var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
                                //        cmbZinc.SelectedItem = item;
                                //    }
                                //}
                                #endregion
                                break;


                            case "ProvisionalDiagnosis":
                                if (((ComboBox)sender).SelectedItem != null)
                                {
                                    cmbHyd = (ComboBox)Form.FindName("HydrationStatus");
                                    ComboBox cmbSkin = (ComboBox)Form.FindName("SkinColour");

                                    if ((((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Acute watery diarrhea" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Persistent diarrhea" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Dysentry") && (cmbHyd != null && (DynamicListItem)cmbHyd.SelectedItem != null && ((DynamicListItem)cmbHyd.SelectedItem).Title == "Moderate dehydration"))
                                    {
                                        #region Set Investigations for Condition1 and Condition2 ((acute Watery Diarrhea or Dysentry or Persistent Diarrhea) and Moderate Hydration)
                                        if (Form.FindName("SerumElectro") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("SerumElectro")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("BUNCreatinine") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Disable Investigations when condition 1 & 2 are not satisfied
                                        if (Form.FindName("SerumElectro") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("BUNCreatinine") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }


                                    if ((((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Acute watery diarrhea" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Persistent diarrhea" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Dysentry") && (cmbSkin != null && (DynamicListItem)cmbSkin.SelectedItem != null && ((DynamicListItem)cmbSkin.SelectedItem).Title == "Pale"))
                                    {
                                        #region Set Investigations for Condition3 ((acute Watery Diarrhea or Dysentry or Persistent Diarrhea) and Skin Colour Pale)
                                        if (Form.FindName("CBC") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("CBC")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Disable Investigations when Condition 3 is not satisfied
                                        if (Form.FindName("CBC") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("CBC")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }


                                    if ((((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Persistent diarrhea" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Dysentry") && (cmbHyd != null && (DynamicListItem)cmbHyd.SelectedItem != null && (((DynamicListItem)cmbHyd.SelectedItem).Title == "Mild dehydration" || ((DynamicListItem)cmbHyd.SelectedItem).Title == "Moderate dehydration")))
                                    {
                                        #region Set Investigations for Condition 4,5 and 6 ((Dysentry or Persistent Diarrhea) and (Mild or Moderate Hydration))
                                        if (Form.FindName("StoolME") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("StoolCulture") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("OvaParasiteTest") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("OvaParasiteTest")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("OvaParasiteTest"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Disable Investigations when condition 4,5 and 6 are not satisfied
                                        if (Form.FindName("StoolME") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("StoolCulture") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
                                        }
                                        if (Form.FindName("OvaParasiteTest") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("OvaParasiteTest")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("OvaParasiteTest"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                }
                                break;

                            case "SkinColour":
                                if (((ComboBox)sender).SelectedItem != null)
                                {
                                    ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");

                                    if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Pale" && (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea")))
                                    {
                                        #region Set Investigations for Condition3 ((acute Watery Diarrhea or Dysentry or Persistent Diarrhea) and Skin Colour Pale)
                                        if (Form.FindName("CBC") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("CBC")).IsChecked = true;
                                            chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Disable Investigations when Condition 3 is not satisfied
                                        if (Form.FindName("CBC") is CheckBox)
                                        {
                                            ((CheckBox)Form.FindName("CBC")).IsChecked = false;
                                            chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
                                        }
                                        #endregion
                                    }
                                }
                                break;
                        }
                    }
                }
            }

            #endregion


            #region Code For Validate Investigations According to Provisional Diagnosis & Hydration Status Version2
            //if (IsFirstTime == false)
            //{
            //    switch (((ComboBox)sender).Name)
            //    {
            //        case "HydrationStatus":
            //            ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
            //            ComboBox cmbHyd4 = (ComboBox)Form.FindName("Hydration4StatusManagement");
            //            ComboBox cmbZinc = (ComboBox)Form.FindName("ZincSupplementManagement");
            //            IGetList src = null;

            //            if (((ComboBox)sender).SelectedItem != null)
            //            {
            //                ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
            //                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Mild dehydration" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Moderate dehydration" || (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && ((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea"))
            //                {
            //                    #region Set ItemsSource of cmbHyd
            //                    if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Mild dehydration" && cmbHyd != null)
            //                    {
            //                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 1, Title = "Source1", Value = "Source1" };
            //                        //cmbHyd.ItemsSource = null;
            //                        //cmbHyd.SelectedItem = null;
            //                        //src = new Source1();
            //                        //cmbHyd.ItemsSource = src.GetList();

            //                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                        listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source1", Value = "Source1" };
            //                        src = new Source1();
            //                        listSetting.ItemSource = src.GetList();
            //                        cmbHyd.ItemsSource = listSetting.ItemSource;
            //                        if (listSetting.SelectedItem != null)
            //                        {
            //                            var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                            cmbHyd.SelectedItem = item;
            //                        }
            //                    }
            //                    else if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Moderate dehydration" && cmbHyd != null)
            //                    {
            //                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 2, Title = "Source2", Value = "Source2" };
            //                        //src = new Source2();
            //                        //cmbHyd.ItemsSource = src.GetList();

            //                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                        listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source2", Value = "Source2" };
            //                        src = new Source2();
            //                        listSetting.ItemSource = src.GetList();
            //                        cmbHyd.ItemsSource = listSetting.ItemSource;
            //                        if (listSetting.SelectedItem != null)
            //                        {
            //                            var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                            cmbHyd.SelectedItem = item;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        #region Set ItemsSource of cmbHyd to NULL
            //                        if (cmbHyd != null)
            //                        {
            //                            //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
            //                            //cmbHyd.ItemsSource = null;             

            //                            LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                            listSetting.SelectedSource = null;
            //                            cmbHyd.ItemsSource = null;
            //                            cmbHyd.SelectedItem = null;
            //                        }
            //                        #endregion
            //                    }

            //                    #endregion

            //                    #region Set ItemSource of cmbHyd4 to NULL
            //                    if (cmbHyd4 != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title != "Severe dehydration")
            //                    {
            //                        //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = null;
            //                        //cmbHyd4.ItemsSource = null;             

            //                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
            //                        listSetting.SelectedSource = null;
            //                        cmbHyd4.ItemsSource = null;
            //                        cmbHyd4.SelectedItem = null;
            //                    }
            //                    #endregion

            //                    #region Set Investigations for Mild,Moderate Hydration and acute Watery Diarrhea
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }
            //                else
            //                {
            //                    #region Disable All Non-Severe Investigations
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }

            //                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Severe dehydration" || (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea")))
            //                {
            //                    #region Set ItemsSource of cmbHyd4
            //                    if (cmbHyd4 != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Severe dehydration")
            //                    {
            //                        //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 3, Title = "Source3", Value = "Source3" };
            //                        //src = new Source3();
            //                        //cmbHyd4.ItemsSource = src.GetList();

            //                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
            //                        listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source3", Value = "Source3" };
            //                        src = new Source3();
            //                        listSetting.ItemSource = src.GetList();
            //                        cmbHyd4.ItemsSource = listSetting.ItemSource;
            //                        if (listSetting.SelectedItem != null)
            //                        {
            //                            var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                            cmbHyd4.SelectedItem = item;
            //                        }
            //                    }
            //                    else
            //                    {
            //                        if (cmbHyd4 != null)
            //                        {
            //                            //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = null;
            //                            //cmbHyd4.ItemsSource = null;             

            //                            LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
            //                            listSetting.SelectedSource = null;
            //                            cmbHyd4.ItemsSource = null;
            //                            cmbHyd4.SelectedItem = null;
            //                        }
            //                    }
            //                    #endregion

            //                    #region Set ItemsSource of cmbHyd to NULL
            //                    if (cmbHyd != null && ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Severe dehydration")
            //                    {
            //                        //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
            //                        //cmbHyd.ItemsSource = null;             

            //                        LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                        listSetting.SelectedSource = null;
            //                        cmbHyd.ItemsSource = null;
            //                        cmbHyd.SelectedItem = null;
            //                    }
            //                    #endregion

            //                    #region Set Investigations for Severe DeHydration and Dysentry & Persistent Diarrhea
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }
            //                else
            //                {
            //                    #region Disable All Non-Mild and Non-Moderate Investigations
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }
            //            }
            //            else
            //            {
            //                #region Set Hyd and Hyd4 to NULL
            //                if (Form.FindName("HydrationStatusManagement") is ComboBox)
            //                {
            //                    cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
            //                    //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
            //                    //cmbHyd.ItemsSource = null;

            //                    LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                    listSetting.SelectedSource = null;
            //                    cmbHyd.ItemsSource = null;
            //                    cmbHyd.SelectedItem = null;
            //                }
            //                if (Form.FindName("Hydration4StatusManagement") is ComboBox)
            //                {
            //                    cmbHyd = (ComboBox)Form.FindName("Hydration4StatusManagement");
            //                    //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
            //                    //cmbHyd.ItemsSource = null;

            //                    LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                    listSetting.SelectedSource = null;
            //                    cmbHyd.ItemsSource = null;
            //                    cmbHyd.SelectedItem = null;
            //                }
            //                #endregion
            //            }

            //            #region Set Zinc ItemsSource
            //            if (cmbZinc != null)
            //            {
            //                //((LookUpFieldSetting)((FieldDetail)cmbZinc.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 3, Title = "Source4", Value = "Source4" };
            //                //src = new Source4();
            //                //cmbZinc.ItemsSource = src.GetList();

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbZinc.DataContext).Settings;
            //                listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source4", Value = "Source4" };
            //                src = new Source4();

            //                listSetting.ItemSource = src.GetList();
            //                if (cmbZinc.ItemsSource == null)
            //                {
            //                    cmbZinc.ItemsSource = listSetting.ItemSource;
            //                }
            //                if (listSetting.SelectedItem != null)
            //                {
            //                    var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                    cmbZinc.SelectedItem = item;
            //                }
            //            }
            //            #endregion
            //            break;


            //        case "ProvisionalDiagnosis":
            //            if (((ComboBox)sender).SelectedItem != null)
            //            {
            //                cmbHyd = (ComboBox)Form.FindName("HydrationStatus");
            //                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Acute watery diarrhea" || (cmbHyd != null && (DynamicListItem)cmbHyd.SelectedItem != null && (((DynamicListItem)cmbHyd.SelectedItem).Title == "Mild dehydration" || ((DynamicListItem)cmbHyd.SelectedItem).Title == "Moderate dehydration")))
            //                {
            //                    #region Set Investigations for Mild,Moderate Hydration and acute Watery Diarrhea
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }
            //                else
            //                {
            //                    #region Disable All Non-Severe Investigations
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }


            //                if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Dysentry" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Persistent diarrhea" || (cmbHyd != null && (DynamicListItem)cmbHyd.SelectedItem != null && (((DynamicListItem)cmbHyd.SelectedItem).Title == "Severe dehydration")))
            //                {
            //                    #region Set Investigations for Severe DeHydration and Dysentry & Persistent Diarrhea
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }
            //                else
            //                {
            //                    #region Disable All Non-Mild and Non-Moderate Investigations
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }
            //                    #endregion
            //                }
            //            }
            //            break;
            //    }
            //}
            #endregion


            #region Code For Validate Investigations According to Provisional Diagnosis & Hydration Status

            //if (((ComboBox)sender).Name == "HydrationStatus" && IsFirstTime==false)
            //{
            //    if (((ComboBox)sender).SelectedItem != null)
            //    {
            //        ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
            //        ComboBox cmbHyd4 = (ComboBox)Form.FindName("Hydration4StatusManagement");
            //        ComboBox cmbZinc = (ComboBox)Form.FindName("ZincSupplementManagement");
            //        IGetList src=null;
            //        if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Mild dehydration")
            //        {
            //            if (Form.FindName("CBC") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("BUNCreatinine") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("SerumElectro") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("XRayChest") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("BloodGases") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //            }

            //            if (cmbHyd != null)
            //            {
            //                //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 1, Title = "Source1", Value = "Source1" };
            //                //cmbHyd.ItemsSource = null;
            //                //cmbHyd.SelectedItem = null;
            //                //src = new Source1();
            //                //cmbHyd.ItemsSource = src.GetList();

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source1", Value = "Source1" };
            //                src = new Source1();
            //                listSetting.ItemSource = src.GetList();
            //                cmbHyd.ItemsSource = listSetting.ItemSource;
            //                if (listSetting.SelectedItem != null)
            //                {
            //                    var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                    cmbHyd.SelectedItem = item;
            //                }
            //            }

            //            if (cmbHyd4 != null)
            //            {
            //                //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = null;
            //                //cmbHyd4.ItemsSource = null;             

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
            //                listSetting.SelectedSource = null;
            //                cmbHyd4.ItemsSource = null;
            //                cmbHyd4.SelectedItem = null;
            //            }
            //            ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
            //            if (cmbPro != null)
            //            {
            //                if ((DynamicListItem)cmbPro.SelectedItem !=null && ((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea")
            //                {
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                }
            //                else
            //                {
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                }
            //            }
            //        }
            //        if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Moderate dehydration")
            //        {
            //            if (Form.FindName("CBC") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("BUNCreatinine") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("SerumElectro") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("XRayChest") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("BloodGases") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //            }

            //            if (cmbHyd != null)
            //            {
            //                //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 2, Title = "Source2", Value = "Source2" };
            //                //src = new Source2();
            //                //cmbHyd.ItemsSource = src.GetList();

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source2", Value = "Source2" };
            //                src = new Source2();
            //                listSetting.ItemSource = src.GetList();
            //                cmbHyd.ItemsSource = listSetting.ItemSource;
            //                if (listSetting.SelectedItem != null)
            //                {
            //                    var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                    cmbHyd.SelectedItem = item;
            //                }
            //            }

            //            if (cmbHyd4 != null)
            //            {
            //                //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = null;
            //                //cmbHyd4.ItemsSource = null;             

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
            //                listSetting.SelectedSource = null;
            //                cmbHyd4.ItemsSource = null;
            //                cmbHyd4.SelectedItem = null;
            //            }

            //            ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
            //            if (cmbPro != null)
            //            {
            //                if ((DynamicListItem)cmbPro.SelectedItem!=null &&  ((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea")
            //                {
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                }
            //                else
            //                {
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }
            //                }
            //            }
            //        }

            //        if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Severe dehydration")
            //        {
            //            if (Form.FindName("StoolME") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("StoolCulture") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //            }

            //            if (cmbHyd4 != null)
            //            {
            //                //((LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 3, Title = "Source3", Value = "Source3" };
            //                //src = new Source3();
            //                //cmbHyd4.ItemsSource = src.GetList();

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd4.DataContext).Settings;
            //                listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source3", Value = "Source3" };
            //                src = new Source3();
            //                listSetting.ItemSource = src.GetList();
            //                cmbHyd4.ItemsSource = listSetting.ItemSource;
            //                if (listSetting.SelectedItem != null)
            //                {
            //                    var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                    cmbHyd4.SelectedItem = item;
            //                }
            //            }
            //            if (cmbHyd != null)
            //            {                            
            //                //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
            //                //cmbHyd.ItemsSource = null;             

            //                LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //                listSetting.SelectedSource = null;
            //                cmbHyd.ItemsSource = null;
            //                cmbHyd.SelectedItem = null;                            
            //            }

            //            ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
            //            if (cmbPro != null)
            //            {
            //                if ((DynamicListItem)cmbPro.SelectedItem!=null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry"  || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea"))
            //                {
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }

            //                }
            //                else
            //                {
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }
            //                }
            //            }


            //        }

            //        if (cmbZinc != null)
            //        {
            //            //((LookUpFieldSetting)((FieldDetail)cmbZinc.DataContext).Settings).SelectedSource = new DynamicListItem() { Id = 3, Title = "Source4", Value = "Source4" };
            //            //src = new Source4();
            //            //cmbZinc.ItemsSource = src.GetList();

            //            LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbZinc.DataContext).Settings;
            //            listSetting.SelectedSource = new DynamicListItem() { Id = 1, Title = "Source4", Value = "Source4" };
            //            src = new Source4();

            //            listSetting.ItemSource = src.GetList();
            //            if (listSetting.ItemSource == null)
            //            {    
            //                cmbZinc.ItemsSource = listSetting.ItemSource;
            //            }
            //            if (listSetting.SelectedItem != null)
            //            {
            //                var item = listSetting.ItemSource.Where(i => i.Title == listSetting.SelectedItem.Title).Single();
            //                cmbZinc.SelectedItem = item;
            //            }

            //        }
            //    }
            //    else
            //    {
            //        if(Form.FindName("HydrationStatusManagement") is ComboBox)
            //        {
            //            ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
            //            //((LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings).SelectedSource = null;
            //            //cmbHyd.ItemsSource = null;

            //            LookUpFieldSetting listSetting = (LookUpFieldSetting)((FieldDetail)cmbHyd.DataContext).Settings;
            //            listSetting.SelectedSource = null;
            //            cmbHyd.ItemsSource = null;
            //            cmbHyd.SelectedItem = null;
            //        }
            //    }
            //}


            //if(((ComboBox)sender).Name=="ProvisionalDiagnosis" && IsFirstTime==false)
            //{
            //    if (((ComboBox)sender).SelectedItem != null)
            //    {
            //        if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Acute watery diarrhea")
            //        {

            //            if (Form.FindName("CBC") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("BUNCreatinine") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("SerumElectro") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("XRayChest") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("BloodGases") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //            }

            //            ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatus");
            //            if (cmbHyd != null)
            //            {
            //                if ((DynamicListItem)cmbHyd.SelectedItem != null && (((DynamicListItem)cmbHyd.SelectedItem).Title == "Mild dehydration" || ((DynamicListItem)cmbHyd.SelectedItem).Title == "Moderate dehydration"))
            //                {
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }


            //                }
            //                else
            //                {
            //                    if (Form.FindName("StoolME") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("StoolCulture") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //                    }

            //                }
            //            }
            //        }

            //        if (((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Dysentry" || ((DynamicListItem)((ComboBox)sender).SelectedItem).Title == "Persistent diarrhea")
            //        {

            //            if (Form.FindName("StoolME") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("StoolME")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("StoolME"), new RoutedEventArgs());
            //            }
            //            if (Form.FindName("StoolCulture") is CheckBox)
            //            {
            //                ((CheckBox)Form.FindName("StoolCulture")).IsChecked = false;
            //                chk_Click((CheckBox)Form.FindName("StoolCulture"), new RoutedEventArgs());
            //            }

            //            ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatus");
            //            if (cmbHyd != null)
            //            {
            //                if ((DynamicListItem)cmbHyd.SelectedItem !=null && ((DynamicListItem)cmbHyd.SelectedItem).Title == "Severe dehydration")
            //                {
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = true;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }                           
            //                }
            //                else
            //                {
            //                    if (Form.FindName("CBC") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("CBC")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("CBC"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BUNCreatinine") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BUNCreatinine"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("SerumElectro") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("SerumElectro"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("XRayChest") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("XRayChest"), new RoutedEventArgs());
            //                    }
            //                    if (Form.FindName("BloodGases") is CheckBox)
            //                    {
            //                        ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
            //                        chk_Click((CheckBox)Form.FindName("BloodGases"), new RoutedEventArgs());
            //                    }
            //                }
            //            }
            //        }
            //    }
            //}
            #endregion
        }

        void lbList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (sender != null)
            {
                FieldDetail field = (FieldDetail)((ListBox)sender).DataContext;
                if (((ListFieldSetting)field.Settings).SelectedItems == null)
                    ((ListFieldSetting)field.Settings).SelectedItems = new List<DynamicListItem>();
                ((ListFieldSetting)field.Settings).SelectedItems.Clear();
                foreach (var item in ((ListBox)sender).SelectedItems)
                {
                    ((ListFieldSetting)field.Settings).SelectedItems.Add((DynamicListItem)item);
                }
            }
        }

        void TextField_GotFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((TextBox)sender) != null && ((TextBox)sender).DataContext != null)
                {
                    if (((FieldDetail)((TextBox)sender).DataContext).IsRequired)
                    {
                        ((TextBox)sender).SetValidation(((FieldDetail)((TextBox)sender).DataContext).Title + " required.");
                        ((TextBox)sender).RaiseValidationError();
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        void TextField_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((TextBox)sender) != null && ((TextBox)sender).DataContext != null)
                {
                    if (((FieldDetail)((TextBox)sender).DataContext).IsRequired && string.IsNullOrEmpty(((TextBox)sender).Text))
                    {
                        ((TextBox)sender).SetValidation(((FieldDetail)((TextBox)sender).DataContext).Title + " required.");
                        ((TextBox)sender).RaiseValidationError();
                    }
                    else
                    {
                        ((TextBox)sender).ClearValidationError();
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        string log = "";

        void decUnit_LostFocus(object sender, RoutedEventArgs e)
        {

            log = "Starting....";
            try
            {
                if (sender is TextBox && ((FrameworkElement)(((FieldDetail)(((TextBox)sender).DataContext))).Control).Visibility == Visibility.Visible)
                {
                    if (((TextBox)sender).Text == "")
                    {
                        ((DecimalFieldSetting)((FieldDetail)((TextBox)sender).DataContext).Settings).Value = null;
                    }
                    log += ("\r" + ((FieldDetail)(((TextBox)sender).DataContext)).Title);
                    foreach (var item in ((FieldDetail)(((TextBox)sender).DataContext)).DependentFieldDetail)
                    {
                        log += ("\r" + item.Title);
                        if (item.Control is FrameworkElement)
                        {
                            if (((TextBox)sender).Text == "")
                            {
                                ((DecimalFieldSetting)((FieldDetail)((TextBox)sender).DataContext).Settings).Value = null;
                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                            }
                            else
                            {
                                if (item.Condition is DecimalExpression<decimal>)
                                    switch (((DecimalExpression<decimal>)item.Condition).Operation)
                                    {
                                        case DoubleOperations.EqualTo:
                                            if (((DecimalExpression<decimal>)item.Condition).ReferenceValue == decimal.Parse(((TextBox)sender).Text))
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            else
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            break;
                                        case DoubleOperations.NotEqualTo:
                                            if (((DecimalExpression<decimal>)item.Condition).ReferenceValue != decimal.Parse(((TextBox)sender).Text))
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            else
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            break;
                                        case DoubleOperations.GreterThan:
                                            if (((DecimalExpression<decimal>)item.Condition).ReferenceValue < decimal.Parse(((TextBox)sender).Text))
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            else
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            break;

                                        case DoubleOperations.GreterThanEqualTo:
                                            if (((DecimalExpression<decimal>)item.Condition).ReferenceValue <= decimal.Parse(((TextBox)sender).Text))
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            else
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            break;
                                        case DoubleOperations.LessThan:
                                            if (((DecimalExpression<decimal>)item.Condition).ReferenceValue > decimal.Parse(((TextBox)sender).Text))
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            else
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            break;
                                        case DoubleOperations.LessThanEqualTo:
                                            if (((DecimalExpression<decimal>)item.Condition).ReferenceValue >= decimal.Parse(((TextBox)sender).Text))
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                            else
                                                ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                            break;
                                    }
                            }


                            log += ((FrameworkElement)item.LabelControl).Visibility == Visibility.Collapsed ? Visibility.Collapsed.ToString() : Visibility.Visible.ToString();

                            if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                        }
                    }

                    if (((FieldDetail)(((TextBox)sender).DataContext)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((TextBox)sender).DataContext)).RelationalFieldList)
                        {
                            log += ("\r" + item.Title);
                            if (item.Control is FrameworkElement)
                            {
                                if (((TextBox)sender).Text == "")
                                {
                                    ((DecimalFieldSetting)((FieldDetail)((TextBox)sender).DataContext).Settings).Value = null;
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                }
                                else
                                {
                                    if (item.RelationCondition is DecimalExpression<decimal>)
                                        switch (((DecimalExpression<decimal>)item.RelationCondition).Operation)
                                        {
                                            case DoubleOperations.EqualTo:
                                                if (((DecimalExpression<decimal>)item.RelationCondition).ReferenceValue == decimal.Parse(((TextBox)sender).Text))
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                else
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                break;
                                            case DoubleOperations.NotEqualTo:
                                                if (((DecimalExpression<decimal>)item.RelationCondition).ReferenceValue != decimal.Parse(((TextBox)sender).Text))
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                else
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                break;
                                            case DoubleOperations.GreterThan:
                                                if (((DecimalExpression<decimal>)item.RelationCondition).ReferenceValue < decimal.Parse(((TextBox)sender).Text))
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                else
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                break;

                                            case DoubleOperations.GreterThanEqualTo:
                                                if (((DecimalExpression<decimal>)item.RelationCondition).ReferenceValue <= decimal.Parse(((TextBox)sender).Text))
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                else
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                break;
                                            case DoubleOperations.LessThan:
                                                if (((DecimalExpression<decimal>)item.RelationCondition).ReferenceValue > decimal.Parse(((TextBox)sender).Text))
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                else
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                break;
                                            case DoubleOperations.LessThanEqualTo:
                                                if (((DecimalExpression<decimal>)item.RelationCondition).ReferenceValue >= decimal.Parse(((TextBox)sender).Text))
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                                else
                                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                                break;
                                        }
                                }

                                log += ((FrameworkElement)item.LabelControl).Visibility == Visibility.Collapsed ? Visibility.Collapsed.ToString() : Visibility.Visible.ToString();

                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }
            }
            catch (Exception ex)
            {

                //throw;
            }

            if (IsFirstTime == false)
            {
                if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                {
                    if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                    {
                        if (sender is TextBox && ((TextBox)sender).Name == "Temprature")
                        {

                            if (Form.FindName("PERespiratory") is ComboBox && Form.FindName("PDCoughWithChestInfection") is CheckBox)
                            {
                                ComboBox chkRespiratory = (ComboBox)Form.FindName("PERespiratory");
                                CheckBox chkCoughChest = (CheckBox)Form.FindName("PDCoughWithChestInfection");
                                if (((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Double.Parse(((TextBox)sender).Text) > 101 && chkRespiratory.SelectedItem != null && (((DynamicListItem)chkRespiratory.SelectedItem).Title == "Ronchi" || ((DynamicListItem)chkRespiratory.SelectedItem).Title == "Crepts"))
                                {
                                    chkCoughChest.IsChecked = true;
                                    chk_Click(chkCoughChest, new RoutedEventArgs());
                                }
                            }
                        }
                    }
                    else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                    {
                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "ObserveTemperature")
                        {
                            if (Form.FindName("AlarmDiarrheaFever") is CheckBox && Form.FindName("PresFreqWateryLooseStool") is CheckBox)
                            {
                                CheckBox chkAlarmDiarrheaFever = (CheckBox)Form.FindName("AlarmDiarrheaFever");
                                CheckBox chkPresFreqWateryLooseStool = (CheckBox)Form.FindName("PresFreqWateryLooseStool");

                                if (chkPresFreqWateryLooseStool.IsChecked == true && ((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) > 102.2)
                                {
                                    chkAlarmDiarrheaFever.IsChecked = true;
                                    chk_Click(chkAlarmDiarrheaFever, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkAlarmDiarrheaFever.IsChecked = false;
                                    chk_Click(chkAlarmDiarrheaFever, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "HistSinceDays")
                        {
                            if (Form.FindName("PDPersistentDiarrhea") is CheckBox)
                            {
                                CheckBox chkPDPersistentDiarrhea = (CheckBox)Form.FindName("PDPersistentDiarrhea");

                                if (((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 14.0)
                                {
                                    chkPDPersistentDiarrhea.IsChecked = true;
                                    chk_Click(chkPDPersistentDiarrhea, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDPersistentDiarrhea.IsChecked = false;
                                    chk_Click(chkPDPersistentDiarrhea, new RoutedEventArgs());
                                }
                            }
                        }
                    }
                    else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                    {
                        if (sender is TextBox && ((TextBox)sender).Name == "ObserveSystolic")
                        {
                            if (Form.FindName("AlarmHypertensionNauseaVomiting") is CheckBox && Form.FindName("PresNauseaVomiting") is CheckBox)
                            {
                                CheckBox chkAlarmHypertensionNauseaVomiting = (CheckBox)Form.FindName("AlarmHypertensionNauseaVomiting");
                                CheckBox chkPresNauseaVomiting = (CheckBox)Form.FindName("PresNauseaVomiting");

                                if (chkPresNauseaVomiting.IsChecked == true && ((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) > 140.0)
                                {
                                    chkAlarmHypertensionNauseaVomiting.IsChecked = true;
                                    //chkAlarmHypertensionNauseaVomiting.Visibility = Visibility.Visible;
                                    chk_Click(chkAlarmHypertensionNauseaVomiting, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkAlarmHypertensionNauseaVomiting.IsChecked = false;
                                    //chkAlarmHypertensionNauseaVomiting.Visibility = Visibility.Collapsed;
                                    chk_Click(chkAlarmHypertensionNauseaVomiting, new RoutedEventArgs());
                                }
                            }
                        }
                        if (sender is TextBox && ((TextBox)sender).Name == "ObserveSystolic")
                        {
                            if (Form.FindName("PDPrehypertension") is CheckBox && Form.FindName("ObserveDiastolic") is TextBox)
                            {
                                CheckBox chkPDPrehypertension = (CheckBox)Form.FindName("PDPrehypertension");
                                TextBox txtObserveDiastolic = (TextBox)Form.FindName("ObserveDiastolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 120.0 && Convert.ToDouble(((TextBox)sender).Text) <= 139.0) || (txtObserveDiastolic.Text != null && txtObserveDiastolic.Text != "" && Convert.ToDouble(txtObserveDiastolic.Text) >= 80.0 && Convert.ToDouble(txtObserveDiastolic.Text) <= 89.0))
                                {
                                    chkPDPrehypertension.IsChecked = true;
                                    chk_Click(chkPDPrehypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDPrehypertension.IsChecked = false;
                                    chk_Click(chkPDPrehypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("PDStageIhypertensionMildhypertension") is CheckBox && Form.FindName("ObserveDiastolic") is TextBox)
                            {
                                CheckBox chkPDStageIhypertensionMildhypertension = (CheckBox)Form.FindName("PDStageIhypertensionMildhypertension");
                                TextBox txtObserveDiastolic = (TextBox)Form.FindName("ObserveDiastolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 140.0 && Convert.ToDouble(((TextBox)sender).Text) <= 159.0) || (txtObserveDiastolic.Text != null && txtObserveDiastolic.Text != "" && Convert.ToDouble(txtObserveDiastolic.Text) >= 90.0 && Convert.ToDouble(txtObserveDiastolic.Text) <= 99.0))
                                {
                                    chkPDStageIhypertensionMildhypertension.IsChecked = true;
                                    chk_Click(chkPDStageIhypertensionMildhypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDStageIhypertensionMildhypertension.IsChecked = false;
                                    chk_Click(chkPDStageIhypertensionMildhypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("PDStageIIhypertensionModeratehypertension") is CheckBox && Form.FindName("ObserveDiastolic") is TextBox)
                            {
                                CheckBox chkPDStageIIhypertensionModeratehypertension = (CheckBox)Form.FindName("PDStageIIhypertensionModeratehypertension");
                                TextBox txtObserveDiastolic = (TextBox)Form.FindName("ObserveDiastolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 160.0 && Convert.ToDouble(((TextBox)sender).Text) <= 179.0) || (txtObserveDiastolic.Text != null && txtObserveDiastolic.Text != "" && Convert.ToDouble(txtObserveDiastolic.Text) >= 100.0 && Convert.ToDouble(txtObserveDiastolic.Text) <= 109.0))
                                {
                                    chkPDStageIIhypertensionModeratehypertension.IsChecked = true;
                                    chk_Click(chkPDStageIIhypertensionModeratehypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDStageIIhypertensionModeratehypertension.IsChecked = false;
                                    chk_Click(chkPDStageIIhypertensionModeratehypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("PDStageIIIhypertensionSeverehypertension") is CheckBox && Form.FindName("ObserveDiastolic") is TextBox)
                            {
                                CheckBox chkPDStageIIIhypertensionSeverehypertension = (CheckBox)Form.FindName("PDStageIIIhypertensionSeverehypertension");
                                TextBox txtObserveDiastolic = (TextBox)Form.FindName("ObserveDiastolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 180.0) || (txtObserveDiastolic.Text != null && txtObserveDiastolic.Text != "" && Convert.ToDouble(txtObserveDiastolic.Text) >= 110.0))
                                {
                                    chkPDStageIIIhypertensionSeverehypertension.IsChecked = true;
                                    chk_Click(chkPDStageIIIhypertensionSeverehypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDStageIIIhypertensionSeverehypertension.IsChecked = false;
                                    chk_Click(chkPDStageIIIhypertensionSeverehypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("AlarmPersistentsystolic200aftermedication") is CheckBox && Form.FindName("HistSystolic") is TextBox && Form.FindName("DHistAntihypertensivesYes") is RadioButton && Form.FindName("DHistAntihypertensivesNo") is RadioButton)
                            {
                                CheckBox chkAlarmPersistentsystolic200aftermedication = (CheckBox)Form.FindName("AlarmPersistentsystolic200aftermedication");
                                TextBox txtHistSystolic = (TextBox)Form.FindName("HistSystolic");
                                RadioButton rdbDHistAntihypertensivesYes = (RadioButton)Form.FindName("DHistAntihypertensivesYes");
                                RadioButton rdbDHistAntihypertensivesNo = (RadioButton)Form.FindName("DHistAntihypertensivesNo");

                                if (((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 200.0 && txtHistSystolic.Text != null && txtHistSystolic.Text != "" && Convert.ToDouble(txtHistSystolic.Text) >= 200.0 && rdbDHistAntihypertensivesYes.IsChecked == true)
                                {
                                    chkAlarmPersistentsystolic200aftermedication.IsChecked = true;
                                    chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkAlarmPersistentsystolic200aftermedication.IsChecked = false;
                                    chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is TextBox && ((TextBox)sender).Name == "ObserveDiastolic")
                        {
                            if (Form.FindName("PDPrehypertension") is CheckBox && Form.FindName("ObserveSystolic") is TextBox)
                            {
                                CheckBox chkPDPrehypertension = (CheckBox)Form.FindName("PDPrehypertension");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 80.0 && Convert.ToDouble(((TextBox)sender).Text) <= 89.0) || (txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 120.0 && Convert.ToDouble(txtObserveSystolic.Text) <= 139.0))
                                {
                                    chkPDPrehypertension.IsChecked = true;
                                    chk_Click(chkPDPrehypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDPrehypertension.IsChecked = false;
                                    chk_Click(chkPDPrehypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("PDStageIhypertensionMildhypertension") is CheckBox && Form.FindName("ObserveSystolic") is TextBox)
                            {
                                CheckBox chkPDStageIhypertensionMildhypertension = (CheckBox)Form.FindName("PDStageIhypertensionMildhypertension");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 90.0 && Convert.ToDouble(((TextBox)sender).Text) <= 99.0) || (txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 140.0 && Convert.ToDouble(txtObserveSystolic.Text) <= 159.0))
                                {
                                    chkPDStageIhypertensionMildhypertension.IsChecked = true;
                                    chk_Click(chkPDStageIhypertensionMildhypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDStageIhypertensionMildhypertension.IsChecked = false;
                                    chk_Click(chkPDStageIhypertensionMildhypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("PDStageIIhypertensionModeratehypertension") is CheckBox && Form.FindName("ObserveSystolic") is TextBox)
                            {
                                CheckBox chkPDStageIIhypertensionModeratehypertension = (CheckBox)Form.FindName("PDStageIIhypertensionModeratehypertension");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 100.0 && Convert.ToDouble(((TextBox)sender).Text) <= 109.0) || (txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 160.0 && Convert.ToDouble(txtObserveSystolic.Text) <= 179.0))
                                {
                                    chkPDStageIIhypertensionModeratehypertension.IsChecked = true;
                                    chk_Click(chkPDStageIIhypertensionModeratehypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDStageIIhypertensionModeratehypertension.IsChecked = false;
                                    chk_Click(chkPDStageIIhypertensionModeratehypertension, new RoutedEventArgs());
                                }
                            }

                            if (Form.FindName("PDStageIIIhypertensionSeverehypertension") is CheckBox && Form.FindName("ObserveSystolic") is TextBox)
                            {
                                CheckBox chkPDStageIIIhypertensionSeverehypertension = (CheckBox)Form.FindName("PDStageIIIhypertensionSeverehypertension");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");

                                if ((((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 110.0) || (txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 180.0))
                                {
                                    chkPDStageIIIhypertensionSeverehypertension.IsChecked = true;
                                    chk_Click(chkPDStageIIIhypertensionSeverehypertension, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDStageIIIhypertensionSeverehypertension.IsChecked = false;
                                    chk_Click(chkPDStageIIIhypertensionSeverehypertension, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is TextBox && ((TextBox)sender).Name == "HistSystolic")
                        {
                            if (Form.FindName("AlarmPersistentsystolic200aftermedication") is CheckBox && Form.FindName("ObserveSystolic") is TextBox && Form.FindName("DHistAntihypertensivesYes") is RadioButton && Form.FindName("DHistAntihypertensivesNo") is RadioButton)
                            {
                                CheckBox chkAlarmPersistentsystolic200aftermedication = (CheckBox)Form.FindName("AlarmPersistentsystolic200aftermedication");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");
                                RadioButton rdbDHistAntihypertensivesYes = (RadioButton)Form.FindName("DHistAntihypertensivesYes");
                                RadioButton rdbDHistAntihypertensivesNo = (RadioButton)Form.FindName("DHistAntihypertensivesNo");

                                if (((TextBox)sender).Text != null && ((TextBox)sender).Text != "" && Convert.ToDouble(((TextBox)sender).Text) >= 200.0 && txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 200.0 && rdbDHistAntihypertensivesYes.IsChecked == true)
                                {
                                    chkAlarmPersistentsystolic200aftermedication.IsChecked = true;
                                    chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkAlarmPersistentsystolic200aftermedication.IsChecked = false;
                                    chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                }
                            }
                        }
                    }
                }
            }
            if ((((TextBox)sender).Name == "Weight" || ((TextBox)sender).Name == "Height") && IsFirstTime == false)
            {
                if (Form.FindName("Weight") is TextBox && Form.FindName("Height") is TextBox)
                {
                    TextBox txtWeight = (TextBox)Form.FindName("Weight");
                    TextBox txtHeight = (TextBox)Form.FindName("Height");
                    if (Form.FindName("StuntingPercent") is TextBox && Form.FindName("WastingPercent") is TextBox)
                    {
                        TextBox txtStuning = (TextBox)Form.FindName("StuntingPercent");
                        TextBox txtWasting = (TextBox)Form.FindName("WastingPercent");

                        if (txtHeight.Text != null && txtHeight.Text != "")
                        {
                            double stun = (double.Parse(txtHeight.Text) / 80) * 100;
                            stun = Math.Round(stun * 100) / 100;
                            txtStuning.Text = stun.ToString();
                        }
                        if (txtWeight.Text != null && txtWeight.Text != "")
                        {
                            double wast = (double.Parse(txtWeight.Text) / 15) * 100;
                            wast = Math.Round(wast * 100) / 100;
                            txtWasting.Text = wast.ToString();
                        }
                    }
                }
            }

            #region Hard Coded
            //if (((TextBox)sender).Name == "Weight" || ((TextBox)sender).Name == "Height")
            //{
            //    IEnumerator<UIElement> lst = (IEnumerator<UIElement>)Form.Children.GetEnumerator();

            //    int index = 0;
            //    while (index < Form.Children.Count - 1)
            //    {
            //        Grid sec = (Grid)Form.Children[index];
            //        if ((string)sec.Tag == "Observations")
            //        {
            //            Grid cont = (Grid)((Border)sec.Children[0]).Child;

            //            IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)cont.Children.GetEnumerator();

            //            while (lst1.MoveNext())
            //            {
            //                if (lst1.Current is StackPanel)
            //                {
            //                    StackPanel st = (StackPanel)lst1.Current;
            //                    IEnumerator<UIElement> lst2 = (IEnumerator<UIElement>)st.Children.GetEnumerator();

            //                    while (lst2.MoveNext())
            //                    {
            //                        if (lst2.Current is TextBox)
            //                        {
            //                            TextBox txt = (TextBox)lst2.Current;                                        
            //                            if (txt.Name == "Height")
            //                            {
            //                                if (txt.Text != null && txt.Text != "")
            //                                {
            //                                    TextBox txtwght=(TextBox)cont.FindName("Weight");
            //                                    if (txtwght.Text != null && txtwght.Text != "")
            //                                    {

            //                                    }
            //                                }
            //                            }


            //                        }
            //                    }

            //                }

            //            }
            //        }
            //        index++;
            //    }
            //}
            #endregion

        }

        private void CheckChildElements(FieldDetail pitem, bool Override)
        {
            if (!Override)
            {
                foreach (var item in pitem.DependentFieldDetail)
                {
                    if (item.Control is FrameworkElement)
                    {
                        ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                    }
                    if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                        CheckChildElements(item, Override);
                }
            }
            else
            {
                CheckChildWithOverRide(pitem, Override);

            }
        }

        private void CheckChildWithOverRide(FieldDetail pitem, bool Override)
        {
            foreach (var item in pitem.DependentFieldDetail)
            {
                if (item.Control is FrameworkElement)
                {
                    if (pitem.Settings is DecimalFieldSetting)
                    {
                        switch (((DecimalExpression<decimal>)item.Condition).Operation)
                        {
                            case DoubleOperations.EqualTo:
                                if (((DecimalExpression<decimal>)item.Condition).ReferenceValue == ((DecimalFieldSetting)pitem.Settings).Value)
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                break;
                            case DoubleOperations.NotEqualTo:
                                if (((DecimalExpression<decimal>)item.Condition).ReferenceValue != ((DecimalFieldSetting)pitem.Settings).Value)
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                break;
                            case DoubleOperations.GreterThan:
                                if (((DecimalExpression<decimal>)item.Condition).ReferenceValue < ((DecimalFieldSetting)pitem.Settings).Value)
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                break;

                            case DoubleOperations.GreterThanEqualTo:
                                if (((DecimalExpression<decimal>)item.Condition).ReferenceValue <= ((DecimalFieldSetting)pitem.Settings).Value)
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                break;
                            case DoubleOperations.LessThan:
                                if (((DecimalExpression<decimal>)item.Condition).ReferenceValue > ((DecimalFieldSetting)pitem.Settings).Value)
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                break;
                            case DoubleOperations.LessThanEqualTo:
                                if (((DecimalExpression<decimal>)item.Condition).ReferenceValue >= ((DecimalFieldSetting)pitem.Settings).Value)
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                break;
                        }
                    }

                    if (pitem.Settings is BooleanFieldSetting)
                    {
                        switch (((BooleanExpression<bool>)item.Condition).Operation)
                        {
                            case BooleanOperations.EqualTo:
                                if ((bool)((BooleanExpression<bool>)item.Condition).ReferenceValue == ((BooleanFieldSetting)pitem.Settings).Mode)
                                    ((TextBox)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((TextBox)item.Control).Visibility = Visibility.Collapsed;
                                break;
                            case BooleanOperations.NotEqualTo:
                                if ((bool)((BooleanExpression<bool>)item.Condition).ReferenceValue != ((BooleanFieldSetting)pitem.Settings).Mode)
                                    ((TextBox)item.Control).Visibility = Visibility.Visible;
                                else
                                    ((TextBox)item.Control).Visibility = Visibility.Collapsed;
                                break;
                        }
                    }

                    if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                        CheckChildElements(item, Override);

                }
            }
        }

        void mrci_OnAddRemoveClick(object sender, RoutedEventArgs e)
        {

            var lstBox = ((Medication)((HyperlinkButton)sender).DataContext).Parent;
            var MedSetting = ((Medication)((HyperlinkButton)sender).DataContext).MedicationSetting;
            if (((HyperlinkButton)sender).TargetName.ToString() == "Remove")
            {
                MedSetting.ItemsSource.RemoveAt(((Medication)((HyperlinkButton)sender).DataContext).Index);
            }

            if (((HyperlinkButton)sender).TargetName.ToString() == "Add")
            {
                MedSetting.ItemsSource.Add(new Medication() { DrugSource = MedSetting.ItemsSource[0].DrugSource, DaySource = Helpers.GetDayList(), QuantitySource = Helpers.GetDayList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() });
                //switch ((string)MedSetting.MedicationDrugType)
                //{
                //    case "Antibiotics":
                //        //MedSetting.MedicationDrugType = "Antibiotics";
                //        MedSetting.ItemsSource.Add(new Medication() { DrugSource = Helpers.GetAntibioticsList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() });
                //        break;

                //    case "Antiemetics":
                //        //medSet.MedicationDrugType = "Antiemetics";
                //        MedSetting.ItemsSource.Add(new Medication() { DrugSource = Helpers.GetAntiemeticsList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() });
                //        break;

                //    case "Antipyretic":
                //        //medSet.MedicationDrugType = "Antipyretic";
                //        MedSetting.ItemsSource.Add(new Medication() { DrugSource = Helpers.GetAntipyreticList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() });
                //        break;

                //    case "Antispasmodic":
                //        //medSet.MedicationDrugType = "Antispasmodic";
                //        MedSetting.ItemsSource.Add(new Medication() { DrugSource = Helpers.GetAntispasmodicList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() });
                //        break;
                //}
                //MedSetting.ItemsSource.Add(new Medication() { DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() });
            }
            lstBox.Items.Clear();
            for (int i = 0; i < MedSetting.ItemsSource.Count; i++)
            {
                MedicatioRepeterControlItem mrci = new MedicatioRepeterControlItem();
                mrci.OnAddRemoveClick += new RoutedEventHandler(mrci_OnAddRemoveClick);
                mrci.cmbSelectionChanged += new RoutedEventHandler(mrci_cmbSelectionChanged);
                mrci.txtKeyDown += new KeyEventHandler(DecField_KeyDown);
                mrci.txtDayChanged += new TextChangedEventHandler(mrci_txtDayChanged);
                mrci.txtFreqChanged += new TextChangedEventHandler(mrci_txtFreqChanged);
                mrci.txtQtyChanged += new TextChangedEventHandler(mrci_txtQtyChanged);

                mrci.btnContradictionSideEffectClick += new RoutedEventHandler(mrci_btnContradictionSideEffectClick);

                //Medication m = new Medication() { Command = "Add", Index = lstBox.Items.Count, Parent = lstBox, DrugSource = Helpers.GetDrugList(), DosageSource = Helpers.GetDosageList(), RouteSource = Helpers.GetRouteList(), FrequencySource = Helpers.GetFrequencyList() };
                MedSetting.ItemsSource[i].Index = i;
                MedSetting.ItemsSource[i].Command = ((i == MedSetting.ItemsSource.Count - 1) ? "Add" : "Remove");
                MedSetting.ItemsSource[i].Parent = lstBox;
                MedSetting.ItemsSource[i].MedicationSetting = MedSetting;
                mrci.DataContext = MedSetting.ItemsSource[i];
                lstBox.Items.Add(mrci);
            }


            //#region Code for follow up Medication

            //Grid g = (Grid)Form.FindName("FollowUpMedication");
            //g=GetGridSchema();
            //#endregion
        }

        void chk_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((FrameworkElement)(((FieldDetail)(((FrameworkElement)sender).DataContext))).Control).Visibility == Visibility.Visible)
                {
                    foreach (var item in ((FieldDetail)(((FrameworkElement)sender).DataContext)).DependentFieldDetail)
                    {
                        if (item.Control is FrameworkElement && item.Condition is BooleanExpression<bool>)
                        {
                            switch (((BooleanExpression<bool>)item.Condition).Operation)
                            {
                                case BooleanOperations.EqualTo:
                                    if (((BooleanExpression<bool>)item.Condition).ReferenceValue == ((BooleanFieldSetting)((FieldDetail)((FrameworkElement)sender).DataContext).Settings).Value)
                                        ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                    else
                                        ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                    break;
                                case BooleanOperations.NotEqualTo:
                                    if (((BooleanExpression<bool>)item.Condition).ReferenceValue != ((BooleanFieldSetting)((FieldDetail)((FrameworkElement)sender).DataContext).Settings).Value)
                                        ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                    else
                                        ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                    break;
                            }

                            if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                        }
                    }

                    if (((FieldDetail)(((FrameworkElement)sender).DataContext)).RelationalFieldList != null)
                        foreach (var item in ((FieldDetail)(((FrameworkElement)sender).DataContext)).RelationalFieldList)
                        {
                            if (item.Control is FrameworkElement && item.RelationCondition is BooleanExpression<bool>)
                            {
                                switch (((BooleanExpression<bool>)item.RelationCondition).Operation)
                                {
                                    case BooleanOperations.EqualTo:
                                        if (((BooleanExpression<bool>)item.RelationCondition).ReferenceValue == ((BooleanFieldSetting)((FieldDetail)((FrameworkElement)sender).DataContext).Settings).Value)
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        else
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        break;
                                    case BooleanOperations.NotEqualTo:
                                        if (((BooleanExpression<bool>)item.RelationCondition).ReferenceValue != ((BooleanFieldSetting)((FieldDetail)((FrameworkElement)sender).DataContext).Settings).Value)
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Visible;
                                        else
                                            ((FrameworkElement)item.LabelControl).Visibility = ((FrameworkElement)item.Control).Visibility = Visibility.Collapsed;
                                        break;
                                }


                                if (item.DependentFieldDetail != null && item.DependentFieldDetail.Count > 0)
                                    CheckChildElements(item, ((FrameworkElement)item.Control).Visibility == Visibility.Visible ? true : false);
                            }
                        }
                }


            }
            catch (Exception ex)
            {

                //throw;
            }


            if (IsFirstTime == false)
            {
                if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
                {
                    if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                    {
                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PrsntHeartBurn")
                        {
                            if (Form.FindName("PDCoughWithGERD") is CheckBox)
                            {
                                CheckBox chkCoughWithGERD = (CheckBox)Form.FindName("PDCoughWithGERD");
                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    chkCoughWithGERD.IsChecked = true;
                                    chk_Click(chkCoughWithGERD, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkCoughWithGERD.IsChecked = false;
                                    chk_Click(chkCoughWithGERD, new RoutedEventArgs());
                                }
                            }
                        }

                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "HistRunnyNoseRhinitis")
                        {
                            if (Form.FindName("PDCoughWithRhinitis") is CheckBox)
                            {
                                CheckBox chkPDCoughWithRhinitis = (CheckBox)Form.FindName("PDCoughWithRhinitis");
                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    chkPDCoughWithRhinitis.IsChecked = true;
                                    chk_Click(chkPDCoughWithRhinitis, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDCoughWithRhinitis.IsChecked = false;
                                    chk_Click(chkPDCoughWithRhinitis, new RoutedEventArgs());
                                }
                            }
                        }

                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "HistPostNasalDrip")
                        {
                            if (Form.FindName("PDCoughWithPostNasalDrips") is CheckBox)
                            {
                                CheckBox chkPDCoughWithPostNasalDrips = (CheckBox)Form.FindName("PDCoughWithPostNasalDrips");
                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    chkPDCoughWithPostNasalDrips.IsChecked = true;
                                    chk_Click(chkPDCoughWithPostNasalDrips, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDCoughWithPostNasalDrips.IsChecked = false;
                                    chk_Click(chkPDCoughWithPostNasalDrips, new RoutedEventArgs());
                                }
                            }
                        }

                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "RiskCardiacProblemsCHF")
                        {
                            if (Form.FindName("AlarmPersistentCoughCardiovascularDisease") is CheckBox && Form.FindName("CoughDuration") is ComboBox)
                            {
                                CheckBox chkAlarm = (CheckBox)Form.FindName("AlarmPersistentCoughCardiovascularDisease");
                                ComboBox cmbCough = (ComboBox)Form.FindName("CoughDuration");
                                if (((CheckBox)sender).IsChecked == true && cmbCough.SelectedItem != null && (((DynamicListItem)cmbCough.SelectedItem).Title == "3 weeks to 8 weeks" || ((DynamicListItem)cmbCough.SelectedItem).Title == "More than 8 weeks"))
                                {
                                    //chkAlarm.Visibility = Visibility.Visible;
                                    //((FrameworkElement)((FieldDetail)chkAlarm.DataContext).LabelControl).Visibility = Visibility.Visible;
                                    chkAlarm.IsChecked = true;
                                    chk_Click(chkAlarm, new RoutedEventArgs());
                                }
                                else
                                {
                                    //chkAlarm.Visibility = Visibility.Collapsed;
                                    //((FrameworkElement)((FieldDetail)chkAlarm.DataContext).LabelControl).Visibility = Visibility.Collapsed;
                                    chkAlarm.IsChecked = false;
                                    chk_Click(chkAlarm, new RoutedEventArgs());
                                }
                            }
                        }

                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PDPersistentCough")
                        {
                            if (Form.FindName("InvestSinusImaging") is CheckBox && Form.FindName("InvestSpirometry") is RadioButton && Form.FindName("InvestLabs") is ListBox && Form.FindName("InvestRadiology") is ListBox)
                            {
                                CheckBox chkInvestSinusImaging = (CheckBox)Form.FindName("InvestSinusImaging");
                                RadioButton chkInvestSpirometry = (RadioButton)Form.FindName("InvestSpirometry");
                                ListBox chkInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                ListBox chkInvestRadiology = (ListBox)Form.FindName("InvestRadiology");

                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    chkInvestSinusImaging.IsChecked = true;
                                    chk_Click(chkInvestSinusImaging, new RoutedEventArgs());

                                    chkInvestSpirometry.IsChecked = true;
                                    chk_Click(chkInvestSpirometry, new RoutedEventArgs());

                                    //(((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource != null && ((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID && f.Status == true)) != null)
                                    if (((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(chkInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }

                                    if (((InvestigationFieldSetting)((FieldDetail)chkInvestRadiology.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)chkInvestRadiology.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Chest X - Ray")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(chkInvestRadiology, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    chkInvestSinusImaging.IsChecked = false;
                                    chk_Click(chkInvestSinusImaging, new RoutedEventArgs());

                                    chkInvestSpirometry.IsChecked = false;
                                    chk_Click(chkInvestSpirometry, new RoutedEventArgs());

                                    //(((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource != null && ((InvestigationFieldSetting)((FieldDetail)((Control)sender).Tag).Settings).ItemSource.First(f => (f.ID == ((CheckListExpression<bool>)item.RelationCondition).SelectedItem.ID && f.Status == true)) != null)
                                    if (((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(chkInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }

                                    if (((InvestigationFieldSetting)((FieldDetail)chkInvestRadiology.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)chkInvestRadiology.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Chest X - Ray")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(chkInvestRadiology, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                    {
                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PresFreqWateryLooseStool")
                        {
                            if (Form.FindName("AlarmDiarrheaFever") is CheckBox && Form.FindName("ObserveTemperature") is TextBox)
                            {
                                CheckBox chkAlarmDiarrheaFever = (CheckBox)Form.FindName("AlarmDiarrheaFever");
                                TextBox txtTemp = (TextBox)Form.FindName("ObserveTemperature");

                                if (((CheckBox)sender).IsChecked == true && txtTemp.Text != null && txtTemp.Text != "" && Convert.ToDouble(txtTemp.Text) > 102.2)
                                {
                                    chkAlarmDiarrheaFever.IsChecked = true;
                                    chk_Click(chkAlarmDiarrheaFever, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkAlarmDiarrheaFever.IsChecked = false;
                                    chk_Click(chkAlarmDiarrheaFever, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && (((FrameworkElement)sender).Name == "PresMucusStool" || ((FrameworkElement)sender).Name == "PresBloodStool"))
                        {
                            if (Form.FindName("PDDysentry") is CheckBox && Form.FindName("PDDysentry") is CheckBox && Form.FindName("PresBloodStool") is CheckBox)
                            {
                                CheckBox chkPDDysentry = (CheckBox)Form.FindName("PDDysentry");
                                CheckBox chkPresMucusStool = (CheckBox)Form.FindName("PresMucusStool");
                                CheckBox chkPresBloodStool = (CheckBox)Form.FindName("PresBloodStool");

                                if (chkPresMucusStool.IsChecked == true || chkPresBloodStool.IsChecked == true)
                                {
                                    chkPDDysentry.IsChecked = true;
                                    chk_Click(chkPDDysentry, new RoutedEventArgs());
                                }
                                else if (chkPresMucusStool.IsChecked == false && chkPresBloodStool.IsChecked == false)
                                {
                                    chkPDDysentry.IsChecked = false;
                                    chk_Click(chkPDDysentry, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && (((FrameworkElement)sender).Name == "PresDecreasedUrination" || ((FrameworkElement)sender).Name == "PresSunkenEyes" || ((FrameworkElement)sender).Name == "PresDryMouthOrSkin"))
                        {
                            if (Form.FindName("AlarmSevereDehydration") is CheckBox && Form.FindName("PresDecreasedUrination") is CheckBox && Form.FindName("PresSunkenEyes") is CheckBox && Form.FindName("PresDryMouthOrSkin") is CheckBox)
                            {
                                CheckBox chkAlarmSevereDehydration = (CheckBox)Form.FindName("AlarmSevereDehydration");
                                CheckBox chkPresDecreasedUrination = (CheckBox)Form.FindName("PresDecreasedUrination");
                                CheckBox chkPresSunkenEyes = (CheckBox)Form.FindName("PresSunkenEyes");
                                CheckBox chkPresDryMouthOrSkin = (CheckBox)Form.FindName("PresDryMouthOrSkin");

                                if (chkPresDecreasedUrination.IsChecked == true || chkPresSunkenEyes.IsChecked == true || chkPresDryMouthOrSkin.IsChecked == true)
                                {
                                    chkAlarmSevereDehydration.IsChecked = true;
                                    chk_Click(chkAlarmSevereDehydration, new RoutedEventArgs());
                                }
                                else if (chkPresDecreasedUrination.IsChecked == false && chkPresSunkenEyes.IsChecked == false && chkPresDryMouthOrSkin.IsChecked == false)
                                {
                                    chkAlarmSevereDehydration.IsChecked = false;
                                    chk_Click(chkAlarmSevereDehydration, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && (((FrameworkElement)sender).Name == "HistRecentAntibioticUseYes" || ((FrameworkElement)sender).Name == "HistRecentAntibioticUseNo"))
                        {
                            if (Form.FindName("InvestCDifficileAssay") is CheckBox && Form.FindName("HistRecentAntibioticUseYes") is RadioButton && Form.FindName("HistRecentAntibioticUseNo") is RadioButton)
                            {
                                CheckBox chkInvestCDifficileAssay = (CheckBox)Form.FindName("InvestCDifficileAssay");
                                RadioButton rdbHistRecentAntibioticUseYes = (RadioButton)Form.FindName("HistRecentAntibioticUseYes");
                                RadioButton rdbHistRecentAntibioticUseNo = (RadioButton)Form.FindName("HistRecentAntibioticUseNo");

                                if (rdbHistRecentAntibioticUseYes.IsChecked == true)
                                {
                                    chkInvestCDifficileAssay.IsChecked = true;
                                    chk_Click(chkInvestCDifficileAssay, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkInvestCDifficileAssay.IsChecked = false;
                                    chk_Click(chkInvestCDifficileAssay, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "GEPallor")
                        {
                            if (Form.FindName("PESkinColour") is ComboBox && Form.FindName("InvestLabs") is ListBox)
                            {
                                ComboBox cmbPESkinColour = (ComboBox)Form.FindName("PESkinColour");
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");

                                if ((cmbPESkinColour.SelectedItem != null && ((DynamicListItem)cmbPESkinColour.SelectedItem).Title == "Pale") || (((CheckBox)sender).IsChecked == true))
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PDDysentry")
                        {
                            if (Form.FindName("InvestLabs") is ListBox)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");

                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Stool Examination" || a.Description == "Stool for Occult Blood")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Stool Examination" || a.Description == "Stool for Occult Blood")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PDPersistentDiarrhea")
                        {
                            if (Form.FindName("InvestLabs") is ListBox)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");

                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Stool Culture and sensitivity")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Stool Culture and sensitivity")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                    {
                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PresNauseaVomiting")
                        {
                            if (Form.FindName("AlarmHypertensionNauseaVomiting") is CheckBox && Form.FindName("ObserveSystolic") is TextBox)
                            {
                                CheckBox chkAlarmAlarmHypertensionNauseaVomiting = (CheckBox)Form.FindName("AlarmHypertensionNauseaVomiting");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");

                                if (((CheckBox)sender).IsChecked == true && txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) > 140.0)
                                {
                                    chkAlarmAlarmHypertensionNauseaVomiting.IsChecked = true;
                                    //chkAlarmAlarmHypertensionNauseaVomiting.Visibility = Visibility.Visible;
                                    chk_Click(chkAlarmAlarmHypertensionNauseaVomiting, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkAlarmAlarmHypertensionNauseaVomiting.IsChecked = false;
                                    //chkAlarmAlarmHypertensionNauseaVomiting.Visibility = Visibility.Collapsed;
                                    chk_Click(chkAlarmAlarmHypertensionNauseaVomiting, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "DHistAntihypertensivesYes") || (((FrameworkElement)sender).Name == "DHistAntihypertensivesNo")))
                        {
                            if (Form.FindName("HistSystolic") is TextBox && Form.FindName("AlarmPersistentsystolic200aftermedication") is CheckBox && Form.FindName("ObserveSystolic") is TextBox)
                            {
                                CheckBox chkAlarmPersistentsystolic200aftermedication = (CheckBox)Form.FindName("AlarmPersistentsystolic200aftermedication");
                                TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");
                                TextBox txtHistSystolic = (TextBox)Form.FindName("HistSystolic");

                                if (((RadioButton)sender).Name == "DHistAntihypertensivesYes")
                                {
                                    if (txtHistSystolic.Text != null && txtHistSystolic.Text != "" && Convert.ToDouble(txtHistSystolic.Text) >= 200.0 && txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 200.0 && ((RadioButton)sender).IsChecked == true)
                                    {
                                        chkAlarmPersistentsystolic200aftermedication.IsChecked = true;
                                        chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                    }
                                    else
                                    {
                                        chkAlarmPersistentsystolic200aftermedication.IsChecked = false;
                                        chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                    }
                                }
                                else if (((RadioButton)sender).Name == "DHistAntihypertensivesNo")
                                {
                                    if (txtHistSystolic.Text != null && txtHistSystolic.Text != "" && Convert.ToDouble(txtHistSystolic.Text) >= 200.0 && txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 200.0 && ((RadioButton)sender).IsChecked == true)
                                    {
                                        chkAlarmPersistentsystolic200aftermedication.IsChecked = false;
                                        chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                    }
                                    else
                                    {
                                        chkAlarmPersistentsystolic200aftermedication.IsChecked = true;
                                        chk_Click(chkAlarmPersistentsystolic200aftermedication, new RoutedEventArgs());
                                    }
                                }

                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "RFDiabetesYes") || (((FrameworkElement)sender).Name == "RFDiabetesNo") || (((FrameworkElement)sender).Name == "FHDiabetesYes") || (((FrameworkElement)sender).Name == "FHDiabetesNo")))
                        {
                            if (Form.FindName("InvestLabServices") is ListBox)
                            {
                                ListBox lstInvestLabServices = (ListBox)Form.FindName("InvestLabServices");

                                RadioButton rdRFDiabetesYes = (RadioButton)Form.FindName("RFDiabetesYes");
                                RadioButton rdRFDiabetesNo = (RadioButton)Form.FindName("RFDiabetesNo");
                                RadioButton rdFHDiabetesYes = (RadioButton)Form.FindName("FHDiabetesYes");
                                RadioButton rdFHDiabetesNo = (RadioButton)Form.FindName("FHDiabetesNo");

                                if (((RadioButton)sender).Name == "RFDiabetesYes" || ((RadioButton)sender).Name == "FHDiabetesYes")
                                {
                                    if (rdRFDiabetesYes.IsChecked == true || rdFHDiabetesYes.IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Random Blood Sugar (RBS)")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Random Blood Sugar (RBS)")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (((RadioButton)sender).Name == "RFDiabetesNo" || ((RadioButton)sender).Name == "FHDiabetesNo")
                                {
                                    if (rdRFDiabetesNo.IsChecked == true && rdFHDiabetesNo.IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Random Blood Sugar (RBS)")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Random Blood Sugar (RBS)")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && (((FrameworkElement)sender).Name == "PHRenalKidneyDiseaseYes") || (((FrameworkElement)sender).Name == "PHRenalKidneyDiseaseNo"))
                        {
                            if (Form.FindName("InvestUltrasoundAbdomen") is CheckBox && Form.FindName("InvestDopplerFlowStudy") is CheckBox && Form.FindName("InvestLabs") is ListBox)
                            {
                                CheckBox chkInvestUltrasoundAbdomen = (CheckBox)Form.FindName("InvestUltrasoundAbdomen");
                                CheckBox chkInvestInvestDopplerFlowStudy = (CheckBox)Form.FindName("InvestDopplerFlowStudy");
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");

                                if (((RadioButton)sender).Name == "PHRenalKidneyDiseaseYes")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        chkInvestUltrasoundAbdomen.IsChecked = true;
                                        chk_Click(chkInvestUltrasoundAbdomen, new RoutedEventArgs());

                                        chkInvestInvestDopplerFlowStudy.IsChecked = true;
                                        chk_Click(chkInvestInvestDopplerFlowStudy, new RoutedEventArgs());

                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine Clearence Test ")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        chkInvestUltrasoundAbdomen.IsChecked = false;
                                        chk_Click(chkInvestUltrasoundAbdomen, new RoutedEventArgs());

                                        chkInvestInvestDopplerFlowStudy.IsChecked = false;
                                        chk_Click(chkInvestInvestDopplerFlowStudy, new RoutedEventArgs());

                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine Clearence Test ")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (((RadioButton)sender).Name == "PHRenalKidneyDiseaseNo")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        chkInvestUltrasoundAbdomen.IsChecked = false;
                                        chk_Click(chkInvestUltrasoundAbdomen, new RoutedEventArgs());

                                        chkInvestInvestDopplerFlowStudy.IsChecked = false;
                                        chk_Click(chkInvestInvestDopplerFlowStudy, new RoutedEventArgs());

                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine Clearence Test ")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        chkInvestUltrasoundAbdomen.IsChecked = true;
                                        chk_Click(chkInvestUltrasoundAbdomen, new RoutedEventArgs());

                                        chkInvestInvestDopplerFlowStudy.IsChecked = true;
                                        chk_Click(chkInvestInvestDopplerFlowStudy, new RoutedEventArgs());

                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine Clearence Test ")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabs, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "FHHyperlipidemiaYes") || (((FrameworkElement)sender).Name == "FHHyperlipidemiaNo")))
                        {
                            if (Form.FindName("InvestLabServices") is ListBox)
                            {
                                ListBox lstInvestLabServices = (ListBox)Form.FindName("InvestLabServices");

                                if (((RadioButton)sender).Name == "FHHyperlipidemiaYes")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "LIPID PROFILE : I")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "LIPID PROFILE : I")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (((RadioButton)sender).Name == "FHHyperlipidemiaNo")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "LIPID PROFILE : I")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "LIPID PROFILE : I")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "PEPedalEdemaYes") || (((FrameworkElement)sender).Name == "PEPedalEdemaNo")))
                        {
                            if (Form.FindName("InvestLabServices") is ListBox)
                            {
                                ListBox lstInvestLabServices = (ListBox)Form.FindName("InvestLabServices");

                                if (((RadioButton)sender).Name == "PEPedalEdemaYes")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine - Serum ")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                                if (a.Description == "ELECTROLYTE PROFILE")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine - Serum ")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                                if (a.Description == "ELECTROLYTE PROFILE")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (((RadioButton)sender).Name == "PEPedalEdemaNo")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine - Serum ")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                                if (a.Description == "ELECTROLYTE PROFILE")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Creatinine - Serum ")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                                if (a.Description == "ELECTROLYTE PROFILE")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "PESignsOfAnemiaYes") || (((FrameworkElement)sender).Name == "PESignsOfAnemiaNo")))
                        {
                            if (Form.FindName("InvestLabServices") is ListBox)
                            {
                                ListBox lstInvestLabServices = (ListBox)Form.FindName("InvestLabServices");

                                if (((RadioButton)sender).Name == "PESignsOfAnemiaYes")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Complete Blood Count (CBC)")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Complete Blood Count (CBC)")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (((RadioButton)sender).Name == "PESignsOfAnemiaNo")
                                {
                                    if (((RadioButton)sender).IsChecked == true)
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Complete Blood Count (CBC)")
                                                {
                                                    a.Status = false;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                        {
                                            foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                            {
                                                if (a.Description == "Complete Blood Count (CBC)")
                                                {
                                                    a.Status = true;
                                                    InvestCLBCI_chkItemClicked(lstInvestLabServices, new RoutedEventArgs());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                    {
                        if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "PresRefluxSymptomsHeartburnAcidRegurgitation")
                        {
                            if (Form.FindName("PDGastroEsophagealRefluxDiseaseGERD") is CheckBox)
                            {
                                CheckBox chkPDGastroEsophagealRefluxDiseaseGERD = (CheckBox)Form.FindName("PDGastroEsophagealRefluxDiseaseGERD");

                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    chkPDGastroEsophagealRefluxDiseaseGERD.IsChecked = true;
                                    chk_Click(chkPDGastroEsophagealRefluxDiseaseGERD, new RoutedEventArgs());
                                }
                                else
                                {
                                    chkPDGastroEsophagealRefluxDiseaseGERD.IsChecked = false;
                                    chk_Click(chkPDGastroEsophagealRefluxDiseaseGERD, new RoutedEventArgs());
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "HistBloodStoolYes") || (((FrameworkElement)sender).Name == "HistBloodStoolNo") || (((FrameworkElement)sender).Name == "HistBloodVomitusYes") || (((FrameworkElement)sender).Name == "HistBloodVomitusNo")))
                        {
                            if (Form.FindName("AlarmGastrointestinalBleedingVomitingStools") is CheckBox)
                            {
                                CheckBox chkAlarmGastrointestinalBleedingVomitingStools = (CheckBox)Form.FindName("AlarmGastrointestinalBleedingVomitingStools");

                                RadioButton rdHistBloodStoolYes = (RadioButton)Form.FindName("HistBloodStoolYes");
                                RadioButton rdHistBloodStoolNo = (RadioButton)Form.FindName("HistBloodStoolNo");
                                RadioButton rdHistBloodVomitusYes = (RadioButton)Form.FindName("HistBloodVomitusYes");
                                RadioButton rdHistBloodVomitusNo = (RadioButton)Form.FindName("HistBloodVomitusNo");

                                if (((RadioButton)sender).Name == "HistBloodStoolYes" || ((RadioButton)sender).Name == "HistBloodVomitusYes")
                                {
                                    if (rdHistBloodStoolYes.IsChecked == true || rdHistBloodVomitusYes.IsChecked == true)
                                    {
                                        chkAlarmGastrointestinalBleedingVomitingStools.IsChecked = true;
                                        chk_Click(chkAlarmGastrointestinalBleedingVomitingStools, new RoutedEventArgs());
                                    }
                                    else
                                    {
                                        chkAlarmGastrointestinalBleedingVomitingStools.IsChecked = false;
                                        chk_Click(chkAlarmGastrointestinalBleedingVomitingStools, new RoutedEventArgs());
                                    }
                                }
                                else if (((RadioButton)sender).Name == "HistBloodStoolNo" || ((RadioButton)sender).Name == "HistBloodVomitusNo")
                                {
                                    if (rdHistBloodStoolNo.IsChecked == true && rdHistBloodVomitusNo.IsChecked == true)
                                    {
                                        chkAlarmGastrointestinalBleedingVomitingStools.IsChecked = false;
                                        chk_Click(chkAlarmGastrointestinalBleedingVomitingStools, new RoutedEventArgs());
                                    }
                                    else
                                    {
                                        chkAlarmGastrointestinalBleedingVomitingStools.IsChecked = true;
                                        chk_Click(chkAlarmGastrointestinalBleedingVomitingStools, new RoutedEventArgs());
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((FrameworkElement)sender).Name == "GEPallor")
                        {
                            if (Form.FindName("InvestLabs") is ListBox)
                            {
                                ListBox chkInvestLabs = (ListBox)Form.FindName("InvestLabs");

                                if (((CheckBox)sender).IsChecked == true)
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = true;
                                                InvestCLBCI_chkItemClicked(chkInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource != null)
                                    {
                                        foreach (var a in ((InvestigationFieldSetting)((FieldDetail)chkInvestLabs.Tag).Settings).ItemSource)
                                        {
                                            if (a.Description == "Complete Blood Count (CBC)")
                                            {
                                                a.Status = false;
                                                InvestCLBCI_chkItemClicked(chkInvestLabs, new RoutedEventArgs());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sender is FrameworkElement && ((((FrameworkElement)sender).Name == "GEMassesYes") || (((FrameworkElement)sender).Name == "GEMassesNo") || (((FrameworkElement)sender).Name == "GELymphadenopathy")))
                        {
                            if (Form.FindName("AlarmPalpableMassLymphadenopathy") is CheckBox)
                            {
                                CheckBox chkAlarmPalpableMassLymphadenopathy = (CheckBox)Form.FindName("AlarmPalpableMassLymphadenopathy");

                                RadioButton rdGEMassesYes = (RadioButton)Form.FindName("GEMassesYes");
                                RadioButton rdGEMassesNo = (RadioButton)Form.FindName("GEMassesNo");
                                CheckBox chkGELymphadenopathy = (CheckBox)Form.FindName("GELymphadenopathy");

                                if (sender is CheckBox)
                                {
                                    if (((CheckBox)sender).IsChecked == true || rdGEMassesYes.IsChecked == true)
                                    {
                                        chkAlarmPalpableMassLymphadenopathy.IsChecked = true;
                                        chk_Click(chkAlarmPalpableMassLymphadenopathy, new RoutedEventArgs());
                                    }
                                    else
                                    {
                                        chkAlarmPalpableMassLymphadenopathy.IsChecked = false;
                                        chk_Click(chkAlarmPalpableMassLymphadenopathy, new RoutedEventArgs());
                                    }
                                }
                                else if (sender is RadioButton)
                                {
                                    if (((RadioButton)sender).Name == "GEMassesYes")
                                    {
                                        if (((RadioButton)sender).IsChecked == true || chkGELymphadenopathy.IsChecked == true)
                                        {
                                            chkAlarmPalpableMassLymphadenopathy.IsChecked = true;
                                            chk_Click(chkAlarmPalpableMassLymphadenopathy, new RoutedEventArgs());
                                        }
                                        else
                                        {
                                            chkAlarmPalpableMassLymphadenopathy.IsChecked = false;
                                            chk_Click(chkAlarmPalpableMassLymphadenopathy, new RoutedEventArgs());
                                        }
                                    }
                                    else if (((RadioButton)sender).Name == "GEMassesNo")
                                    {
                                        if (((RadioButton)sender).IsChecked == true && chkGELymphadenopathy.IsChecked == false)
                                        {
                                            chkAlarmPalpableMassLymphadenopathy.IsChecked = false;
                                            chk_Click(chkAlarmPalpableMassLymphadenopathy, new RoutedEventArgs());
                                        }
                                        else
                                        {
                                            chkAlarmPalpableMassLymphadenopathy.IsChecked = true;
                                            chk_Click(chkAlarmPalpableMassLymphadenopathy, new RoutedEventArgs());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private Grid GetSectionLayout(string Title)
        {
            Grid OverLayGrid = new Grid();
            OverLayGrid.Tag = Title;
            OverLayGrid.Margin = new Thickness(0, 0, 0, 5);
            Border ContentBorder = new Border();
            ContentBorder.BorderBrush = (Brush)this.Resources["BorderDefault"];
            ContentBorder.BorderThickness = new Thickness(1);
            ContentBorder.CornerRadius = new CornerRadius(5);
            ContentBorder.Padding = new Thickness(5);
            ContentBorder.Margin = new Thickness(0, 8, 0, 0);
            Grid ContentGrid = new Grid();
            ContentGrid.Margin = new Thickness(5, 15, 5, 5);
            ContentBorder.Child = ContentGrid;
            OverLayGrid.Children.Add(ContentBorder);
            Border groupBorder = new Border();
            groupBorder.HorizontalAlignment = HorizontalAlignment.Left;
            groupBorder.Margin = new Thickness(8, 0, 0, 0);
            groupBorder.VerticalAlignment = VerticalAlignment.Top;
            groupBorder.Background = (Brush)this.Resources["BackgroundDefault"];
            groupBorder.BorderBrush = (Brush)this.Resources["BorderDefault"];
            groupBorder.BorderThickness = new Thickness(1);
            groupBorder.CornerRadius = new CornerRadius(5);
            groupBorder.RenderTransformOrigin = new Point(0.5, 0.5);
            TransformGroup groupBorderTransform = new TransformGroup();
            var st = new ScaleTransform();
            st.ScaleY = 0.994;
            var skt = new SkewTransform();
            skt.AngleX = -20;
            var rt = new RotateTransform();
            var tt = new TranslateTransform();
            tt.X = 3.627;
            tt.Y = 0.063;
            groupBorderTransform.Children.Add(st);
            groupBorderTransform.Children.Add(skt);
            groupBorderTransform.Children.Add(rt);
            groupBorderTransform.Children.Add(tt);
            groupBorder.RenderTransform = groupBorderTransform;
            TextBlock tbl = new TextBlock();
            tbl.Text = Title;
            tbl.FontFamily = new FontFamily("Portable User Interface");
            tbl.Margin = new Thickness(10, 1, 10, 1);
            tbl.Foreground = this.Resources["Heading"] as Brush;
            tbl.FontWeight = FontWeights.Bold;
            groupBorder.Child = tbl;
            OverLayGrid.Children.Add(groupBorder);
            return OverLayGrid;

        }

        private int itemIndex;
        private int fieldItemIndex;
        private Grid documentBodyItem;
        private bool flag = false;

        private void PrintItemButton_Click(object sender, RoutedEventArgs e)
        {
            IsSavedBeforePrint = true;

            //Old 

            if (SaveClicked == false)
                SaveTemplateItemButton_Click(SaveItemButton, new RoutedEventArgs());
            else
                PrintPCR();
            //PrintPCR();
            //Object ob = App.pcr;
            //App.strpcr= ob.XmlSerilze();
            //App.pcr = null;
        }

        private void PrintPCR()
        {
            IsSavedBeforePrint = false;

            HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=3&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID + "&PatientUnitID=" + ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId + "&TemplateID=" + GlobalTemplateID), "_blank");
            //HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=2&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID + "&PatientUnitID=" + ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId + "&TemplateID=" + GlobalTemplateID), "_blank");
            //HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=1&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + this.SelectedPatient.PatientId + "&PatientUnitID=" + this.SelectedPatient.patientUnitID + "&TemplateID=" + ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID), "_blank");
            //HtmlPage.Window.Navigate(new Uri(Application.Current.Host.Source, "../Reports/Patient/PatientCaseRecord.aspx?Type=2&UnitID=" + CurrentVisit.UnitId + "&VisitID=" + CurrentVisit.ID + "&PatientID=" + this.SelectedPatient.PatientId + "&PatientUnitID=" + this.SelectedPatient.patientUnitID + "&TemplateID=" + ((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID), "_blank");

            //Old PCR Printing that works with XAML

            //itemIndex = 0;
            //fieldItemIndex = 0;
            //documentBodyItem = Form;

            //PrintDocument document = new PrintDocument();

            //document.BeginPrint += new EventHandler<BeginPrintEventArgs>(document_BeginPrint);
            //document.EndPrint += new EventHandler<EndPrintEventArgs>(document_EndPrint);
            //document.PrintPage += new EventHandler<PrintPageEventArgs>(document_PrintPage);
            //document.Print("Template");            
        }

        private void document_PrintPage(object sender, PrintPageEventArgs e)
        {

            PatientCaseRecord PCR = GetPCR("PrintPCR");


            //PatientCaseRecord PCR = new PatientCaseRecord();



            e.PageVisual = PCR;
        }

        PatientCaseRecordSetting PCRS = new PatientCaseRecordSetting();
        private PatientCaseRecord GetPCR(string str)
        {

            PatientCaseRecord PCR = new PatientCaseRecord();

            string ComplaintReported = "";
            string ChiefComplaint = "";
            string PastMedicalHistory = "";
            string DrugHistory = "";
            string Allergies = "";
            string CC = "";
            string Alarm = "";

            if (cmbComplaint.SelectedItem != null)
                CC = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).Title;


            IEnumerator<UIElement> list = (IEnumerator<UIElement>)Form.Children.GetEnumerator();
            while (list.MoveNext())
            {
                Grid sec = (Grid)list.Current;
                if ((string)sec.Tag == "Alarm Features")
                {
                    //Grid cont = (Grid)((Border)sec.Children[0]).Child;
                    IEnumerator<UIElement> lst1 = (IEnumerator<UIElement>)((Grid)((Border)sec.Children[0]).Child).Children.GetEnumerator();

                    while (lst1.MoveNext())
                    {
                        if (lst1.Current is CheckBox)
                        {
                            CheckBox chk = (CheckBox)lst1.Current;
                            if (chk.Visibility == Visibility.Visible)
                            {
                                Alarm += ((FieldDetail)chk.DataContext).Title + ",\t";
                            }
                        }
                    }
                    break;
                }
            }
            if (((TextBox)Form.FindName("ComplaintReported")) != null)
                ComplaintReported = ((TextBox)Form.FindName("ComplaintReported")).Text == null ? "" : ((TextBox)Form.FindName("ComplaintReported")).Text;
            if (((TextBox)Form.FindName("RMChiefComplaints")) != null)
                ChiefComplaint = ((TextBox)Form.FindName("RMChiefComplaints")).Text == null ? "" : ((TextBox)Form.FindName("RMChiefComplaints")).Text;
            if (((TextBox)Form.FindName("PastMedicalHistory")) != null)
                PastMedicalHistory = ((TextBox)Form.FindName("PastMedicalHistory")).Text == null ? "" : ((TextBox)Form.FindName("PastMedicalHistory")).Text;
            if (((TextBox)Form.FindName("DrugHistory")) != null)
                DrugHistory = ((TextBox)Form.FindName("DrugHistory")).Text == null ? "" : ((TextBox)Form.FindName("DrugHistory")).Text;


            //string StoolME,StoolCulture;
            //string CBC;
            //string BUNC;
            //string Serum;
            //string XRay;
            //string BloodGases;

            string Investigations = "";
            int i = 0;
            if ((CheckBox)Form.FindName("StoolME") != null && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked == true)
            {
                Investigations += "Stool ME \t\t\t\t";
                i++;
            }
            if ((CheckBox)Form.FindName("StoolCulture") != null && (bool)((CheckBox)Form.FindName("StoolCulture")).IsChecked == true)
            {
                Investigations += "Stool Culture \t\t\t\t";
                i++;
            }
            if ((CheckBox)Form.FindName("CBC") != null && (bool)((CheckBox)Form.FindName("CBC")).IsChecked == true)
            {
                Investigations += "CBC \t\t\t\t";
                i++;
            }
            if ((CheckBox)Form.FindName("BUNCreatinine") != null && (bool)((CheckBox)Form.FindName("BUNCreatinine")).IsChecked == true)
            {
                Investigations += "BUN Creatinine \t\t\t\t";
                i++;
            }
            if ((CheckBox)Form.FindName("SerumElectro") != null && (bool)((CheckBox)Form.FindName("SerumElectro")).IsChecked == true)
            {
                Investigations += "Serum Electroytes \t\t\t\t";
                i++;
            }
            if ((CheckBox)Form.FindName("XRayChest") != null && (bool)((CheckBox)Form.FindName("XRayChest")).IsChecked == true)
            {
                Investigations += "XRay Chest \t\t\t\t";
                i++;
            }
            if ((CheckBox)Form.FindName("BloodGases") != null && (bool)((CheckBox)Form.FindName("BloodGases")).IsChecked == true)
            {
                Investigations += "Blood Gases \t\t\t\t";
                i++;
            }



            Grid Medication = new Grid();
            Medication.Margin = new Thickness(2, 2, 2, 2);
            Medication.HorizontalAlignment = HorizontalAlignment.Stretch;
            int j = 0;

            ColumnDefinition col = new ColumnDefinition();
            col.Width = new GridLength(200, GridUnitType.Auto);
            Medication.ColumnDefinitions.Add(col);

            ColumnDefinition col1 = new ColumnDefinition();
            Medication.ColumnDefinitions.Add(col1);

            while (j < 4)
            {
                RowDefinition row = new RowDefinition();
                row.Height = new GridLength();
                Medication.RowDefinitions.Add(row);
                j++;
            }


            TextBlock tb1 = new TextBlock();
            tb1.Text = "Hydration : ";
            Grid.SetRow(tb1, 0);
            Medication.Children.Add(tb1);

            TextBox txtHydration = new TextBox();
            txtHydration.IsReadOnly = true;
            txtHydration.Text = "";
            ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatusManagement");
            if (cmbHyd != null && cmbHyd.ItemsSource != null && cmbHyd.SelectedItem != null)
            {
                txtHydration.Text = ((DynamicListItem)cmbHyd.SelectedItem).Title == null ? "" : ((DynamicListItem)cmbHyd.SelectedItem).Title;
            }
            Grid.SetRow(txtHydration, 0);
            Grid.SetColumn(txtHydration, 1);
            Medication.Children.Add(txtHydration);

            TextBlock tb2 = new TextBlock();
            tb2.Text = "Hydration4 : ";
            Grid.SetRow(tb2, 1);
            Medication.Children.Add(tb2);

            TextBox txtHydration4 = new TextBox();
            txtHydration4.IsReadOnly = true;
            txtHydration4.Text = "";
            ComboBox cmbHyd4 = (ComboBox)Form.FindName("Hydration4StatusManagement");
            if (cmbHyd4 != null && cmbHyd4.ItemsSource != null && cmbHyd4.SelectedItem != null)
            {
                txtHydration4.Text = ((DynamicListItem)cmbHyd4.SelectedItem).Title == null ? "" : ((DynamicListItem)cmbHyd4.SelectedItem).Title;
            }

            Grid.SetRow(txtHydration4, 1);
            Grid.SetColumn(txtHydration4, 1);
            Medication.Children.Add(txtHydration4);


            TextBlock tb3 = new TextBlock();
            tb3.Text = "Zinc Supplement : ";
            Grid.SetRow(tb3, 2);
            Medication.Children.Add(tb3);

            TextBox txtZinc = new TextBox();
            txtZinc.IsReadOnly = true;
            txtZinc.Text = "";
            ComboBox cmbZinc = (ComboBox)Form.FindName("ZincSupplementManagement");
            if (cmbZinc != null && cmbZinc.ItemsSource != null && cmbZinc.SelectedItem != null)
            {
                txtZinc.Text = ((DynamicListItem)cmbZinc.SelectedItem).Title == null ? "" : ((DynamicListItem)cmbZinc.SelectedItem).Title;
            }
            Grid.SetRow(txtZinc, 2);
            Grid.SetColumn(txtZinc, 1);
            Medication.Children.Add(txtZinc);

            TextBlock tb4 = new TextBlock();
            tb4.Text = "Nutritions : ";
            Grid.SetRow(tb4, 3);
            Medication.Children.Add(tb4);

            TextBox txtNutrition = new TextBox();
            txtNutrition.AcceptsReturn = true;
            txtNutrition.TextWrapping = TextWrapping.Wrap;
            txtNutrition.IsReadOnly = true;
            txtNutrition.Text = "";
            ComboBox cmbNutrition = (ComboBox)Form.FindName("NutritionAdvise");
            if (cmbNutrition != null && cmbNutrition.Items.Count != 0)
            {
                int k = 0;
                while (k < cmbNutrition.Items.Count)
                {
                    if (((CheckBox)cmbNutrition.Items[k]).IsChecked == true)
                    {
                        txtNutrition.Text += ((CheckBox)cmbNutrition.Items[k]).Content + ",\t";
                        if ((string)(((CheckBox)cmbNutrition.Items[k]).Content) == "Other")
                        {
                            txtNutrition.Text += "Others : \t\t";
                            TextBox txtOt = (TextBox)Form.FindName("ONField");
                            if (txtOt.Text != null && txtOt.Text != "")
                                txtNutrition.Text += txtOt.Text;
                        }
                    }
                    k++;
                }
            }

            Grid.SetRow(txtNutrition, 3);
            Grid.SetColumn(txtNutrition, 1);
            Medication.Children.Add(txtNutrition);

            Grid Therapy = new Grid();
            Therapy.HorizontalAlignment = HorizontalAlignment.Stretch;
            RowDefinition row1 = new RowDefinition();
            row1.Height = new GridLength();
            Therapy.RowDefinitions.Add(row1);
            RowDefinition row2 = new RowDefinition();
            row2.Height = new GridLength();
            Therapy.RowDefinitions.Add(row2);

            Grid Drugs = new Grid();
            Drugs.Name = "FollowUpMedication";
            Drugs = GetGridSchema(Drugs);

            Grid.SetRow(Medication, 0);
            Therapy.Children.Add(Medication);
            Grid.SetRow(Drugs, 1);
            Therapy.Children.Add(Drugs);


            #region RMProvisionalDiagnosis
            string RMProvisionalDiagnosis = "";
            if (((TextBox)Form.FindName("RMProvisionalDiagnosis")) != null && ((TextBox)Form.FindName("RMProvisionalDiagnosis")).Text != null)
                RMProvisionalDiagnosis = ((TextBox)Form.FindName("RMProvisionalDiagnosis")).Text;
            #endregion

            #region FinalDiagnosis
            string FinalDiagnosis = "";
            if (((TextBox)Form.FindName("FinalDiagnosis")) != null && ((TextBox)Form.FindName("FinalDiagnosis")).Text != null)
                FinalDiagnosis = ((TextBox)Form.FindName("FinalDiagnosis")).Text;
            #endregion

            #region HospitalDate
            string HospitalDate = "";
            if (((DatePicker)Form.FindName("HospitalDate")) != null && ((DatePicker)Form.FindName("HospitalDate")).SelectedDate != null)
                HospitalDate = ((DateTime)((DatePicker)Form.FindName("HospitalDate")).SelectedDate).ToString();
            #endregion

            #region RMAt
            string RMAt = "";
            if (Form.FindName("RMAt") != null && ((ComboBox)Form.FindName("RMAt")).SelectedItem != null)
                RMAt = ((DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem).Title;
            #endregion

            #region RMTo
            string RMTo = "";
            if (Form.FindName("RMTo") != null && ((ComboBox)Form.FindName("RMTo")).SelectedItem != null)
                RMTo = ((DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem).Title;
            #endregion

            #region FUMFor(Reason for follow up)
            string FUMFor = "";
            if (((TextBox)Form.FindName("FUMFor")) != null && ((TextBox)Form.FindName("FUMFor")).Text != null)
                FUMFor = ((TextBox)Form.FindName("FUMFor")).Text;
            #endregion

            #region FUMInstructions(Instructions)
            string FUMInstructions = "";
            if (((TextBox)Form.FindName("FUMInstructions")) != null && ((TextBox)Form.FindName("FUMInstructions")).Text != null)
                FUMInstructions = ((TextBox)Form.FindName("FUMInstructions")).Text;
            #endregion

            try
            {
                if (str == "SavePCR")
                {
                    PCRS.Name = this.SelectedPatient.Name;
                    PCRS.Age = this.SelectedPatient.Age.ToString();
                    PCRS.Gender = this.SelectedPatient.Gender;
                    PCRS.Add = this.SelectedPatient.Address;
                    PCRS.Phone = this.SelectedPatient.Phone;
                    PCRS.Occupation = this.SelectedPatient.Occupation;
                    PCRS.Date = DateTime.Now.ToString();
                    PCRS.ClinicRefNo = this.SelectedPatient.ClinicRegNo;


                    PCRS.ComplaintReported = ComplaintReported;
                    PCRS.ChiefComplaint = CC + ",\t" + Alarm;
                    PCRS.PastHistory = PastMedicalHistory;
                    PCRS.DrugHistory = DrugHistory;
                    PCRS.Allergies = Allergies;


                    PCRS.Investigations = Investigations;
                    PCRS.ProvisionalDiagnosis = RMProvisionalDiagnosis;
                    PCRS.FinalDiagnosis = FinalDiagnosis;

                    PCRS.AdvisoryAttached = "";
                    PCRS.WhenToVisit = "";
                    PCRS.SpecificInstructions = "Reason :" + FUMFor + "\rInstructions :" + FUMInstructions;


                    PCRS.FollowUpDate = HospitalDate;
                    PCRS.FollowUpAt = RMAt;
                    PCRS.ReferralTo = RMTo;

                    PCRS.HydrationStatusManagement = txtHydration.Text;
                    PCRS.Hydration4StatusManagement = txtHydration4.Text;
                    PCRS.ZincSupplementManagement = txtZinc.Text;
                    PCRS.NutritionAdvise = txtNutrition.Text;


                    //PCR.SetTherapy(Therapy);

                }
                else if (str == "PrintPCR")
                {
                    PCR.SetParticulars(this.SelectedPatient.Name, this.SelectedPatient.Age.ToString(), this.SelectedPatient.Gender, this.SelectedPatient.Address, this.SelectedPatient.Occupation, this.SelectedPatient.Phone, DateTime.Now.ToString(), this.SelectedPatient.ClinicRegNo);
                    PCR.SetIllnessSummary(ComplaintReported, CC + ",\t" + Alarm + ChiefComplaint, PastMedicalHistory, DrugHistory, Allergies);
                    PCR.SetObservation(Investigations, RMProvisionalDiagnosis, FinalDiagnosis);
                    PCR.SetEducation("", "", "Reason :" + FUMFor + "\rInstructions :" + FUMInstructions);
                    PCR.SetTherapy(Therapy);
                    PCR.SetOthers(HospitalDate, RMAt, RMTo);
                }
            }
            catch (Exception ex)
            {
                return PCR;
            }

            return PCR;

        }
        #region Print By FieldType
        //void document_PrintPage(object sender, PrintPageEventArgs e)
        //{
        //    //throw new NotImplementedException();

        //    //GenratePreview();
        //    documentBodyItem = Form;

        //    PrintPage page = new PrintPage();
        //    page.SetHeaderAndFooterText("Patient : "+(string)this.SelectedPatient.Name,"Template : "+(string)this.SelectedFormStructure.Title);

        //    int numberOfItemsAdded = 0;

        //    while (itemIndex < documentBodyItem.Children.Count)
        //    {
        //        Grid Section=(Grid)documentBodyItem.Children[itemIndex];
        //        Grid Container = (Grid)((Border)Section.Children[0]).Child;

        //        page.SetSectionHeader("Section : "+(string)Section.Tag);
        //        page.Measure(new Size(e.PrintableArea.Width, double.PositiveInfinity));

        //        if (page.DesiredSize.Height > e.PrintableArea.Height
        //            && numberOfItemsAdded > 0)
        //        {
        //            ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count-1);

        //            e.HasMorePages = true;
        //            break;
        //        }
        //        int id=0;
        //        while (fieldItemIndex < Container.Children.Count)
        //        {
        //            string field="";
        //            string fieldValue="";

        //            if ((Int32)((FrameworkElement)Container.Children[fieldItemIndex]).GetValue(Grid.ColumnProperty) %2 ==0)
        //            {
        //                id = (Int32)((TextBlock)Container.Children[fieldItemIndex]).Tag;
        //                if (((TextBlock)Container.Children[fieldItemIndex]).Visibility == Visibility.Visible)
        //                {
        //                    field = ((TextBlock)Container.Children[fieldItemIndex]).Text;                            
        //                    page.SetFieldText(field);
        //                }
        //                else
        //                {
        //                    flag = false;
        //                    fieldItemIndex++;
        //                    numberOfItemsAdded++;
        //                    continue;
        //                }
        //            }
        //            else
        //            {       
        //                switch (id)
        //                {
        //                    case 1:
        //                        if (((TextBox)Container.Children[fieldItemIndex]).Visibility == Visibility.Visible)
        //                            fieldValue = ((TextBox)Container.Children[fieldItemIndex]).Text;
        //                        else
        //                        {
        //                            flag = false;
        //                            fieldItemIndex++;
        //                            numberOfItemsAdded++;
        //                            continue;
        //                        }
        //                        break;

        //                    case 2:
        //                        if(Container.Children[fieldItemIndex] is CheckBox)
        //                        {
        //                            if (((CheckBox)Container.Children[fieldItemIndex]).Visibility == Visibility.Visible)
        //                                fieldValue = ((CheckBox)Container.Children[fieldItemIndex]).IsChecked.ToString();
        //                            else
        //                            {
        //                                flag = false;
        //                                fieldItemIndex++;
        //                                numberOfItemsAdded++;
        //                                continue;
        //                            }
        //                        }
        //                        else if (Container.Children[fieldItemIndex] is StackPanel)
        //                        {
        //                            if ((bool)((RadioButton)((StackPanel)Container.Children[fieldItemIndex]).Children[0]).IsChecked)
        //                                fieldValue = ((bool)((RadioButton)((StackPanel)Container.Children[fieldItemIndex]).Children[0]).IsChecked).ToString();
        //                            else
        //                                fieldValue = bool.FalseString;
        //                        }
        //                        break;

        //                    case 3:
        //                        if (((DatePicker)Container.Children[fieldItemIndex]).SelectedDate == null)
        //                            fieldValue = "Null";
        //                        else
        //                            fieldValue = ((DateTime)((DatePicker)Container.Children[fieldItemIndex]).SelectedDate).ToString();
        //                        break;

        //                    case 4:
        //                        if (Container.Children[fieldItemIndex] is ComboBox)
        //                        {
        //                            if ((DynamicListItem)((ComboBox)Container.Children[fieldItemIndex]).SelectedItem == null)
        //                                fieldValue = "Null";
        //                            else
        //                                fieldValue = ((DynamicListItem)((ComboBox)Container.Children[fieldItemIndex]).SelectedItem).Title;
        //                        }
        //                        else if (Container.Children[fieldItemIndex] is ListBox)
        //                        {
        //                            if ((IEnumerator<DynamicListItem>)((ListBox)Container.Children[fieldItemIndex]).SelectedItems == null)
        //                                fieldValue = "Null";
        //                            else
        //                            {
        //                                IEnumerator<DynamicListItem> list = (IEnumerator<DynamicListItem>)((ListBox)Container.Children[fieldItemIndex]).SelectedItems.GetEnumerator();
        //                                while (list.MoveNext())
        //                                {
        //                                    DynamicListItem li = (DynamicListItem)list.Current;
        //                                    fieldValue = fieldValue + " , " + li.Title;
        //                                }
        //                            }
        //                        }
        //                        break;

        //                    case 5:
        //                        fieldValue = ((TextBox)((StackPanel)Container.Children[fieldItemIndex]).Children[0]).Text + " (" + ((TextBlock)((StackPanel)Container.Children[fieldItemIndex]).Children[1]).Text + ")";
        //                        break;

        //                    case 6:
        //                        fieldValue = (string)((HyperlinkButton)Container.Children[fieldItemIndex]).Content;
        //                        break;

        //                    case 7:
        //                        break;

        //                    case 8:
        //                        if (Container.Children[fieldItemIndex] is ComboBox)
        //                        {
        //                            if ((DynamicListItem)((ComboBox)Container.Children[fieldItemIndex]).SelectedItem == null)
        //                                fieldValue = "null";
        //                            else
        //                                fieldValue = ((DynamicListItem)((ComboBox)Container.Children[fieldItemIndex]).SelectedItem).Title;
        //                        }
        //                        else if (Container.Children[fieldItemIndex] is Grid)
        //                        {
        //                            if ((DynamicListItem)((ComboBox)((Grid)Container.Children[fieldItemIndex]).Children[0]).SelectedItem == null)
        //                                fieldValue = "Null";
        //                            else
        //                                fieldValue = ((DynamicListItem)((ComboBox)((Grid)Container.Children[fieldItemIndex]).Children[0]).SelectedItem).Title + "   or  " + ((TextBox)((Grid)Container.Children[fieldItemIndex]).Children[2]).Text;
        //                        }
        //                        else if (Container.Children[fieldItemIndex] is ListBox)
        //                        {
        //                            if ((IEnumerator<DynamicListItem>)((ListBox)Container.Children[fieldItemIndex]).SelectedItems == null)
        //                                fieldValue = "Null";
        //                            else
        //                            {
        //                                IEnumerator<DynamicListItem> list = (IEnumerator<DynamicListItem>)((ListBox)Container.Children[fieldItemIndex]).SelectedItems.GetEnumerator();
        //                                while (list.MoveNext())
        //                                {
        //                                    DynamicListItem li = (DynamicListItem)list.Current;
        //                                    fieldValue = fieldValue + " , " + li.Title;
        //                                }
        //                            }
        //                        }
        //                        break;

        //                    case 9:

        //                        break;
        //                    case 10:
        //                        break;
        //                }
        //                if(id==9)
        //                {
        //                    ListBox lst = (ListBox)Container.Children[fieldItemIndex];
        //                    double m = page.DesiredSize.Height + (100 * lst.Items.Count);
        //                    if (m < e.PrintableArea.Height)
        //                    {
        //                        int k = 0;
        //                        while (k < lst.Items.Count)
        //                        {
        //                            page.SetFieldText("Drug :");
        //                            page.SetFieldValue(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug);
        //                            page.SetFieldText("Dose :");
        //                            page.SetFieldValue(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose);
        //                            page.SetFieldText("Route :");
        //                            page.SetFieldValue(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route);
        //                            page.SetFieldText("Frequency :");
        //                            page.SetFieldValue(((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency);
        //                            k++;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count - 1);
        //                        fieldItemIndex--;
        //                        e.HasMorePages = true;
        //                        flag = true;
        //                        break;
        //                    }
        //                    flag = false;
        //                }
        //                else
        //                    page.SetFieldValue(fieldValue==null?"":fieldValue);
        //            }
        //            page.Measure(new Size(e.PrintableArea.Width, double.PositiveInfinity));
        //            if (page.DesiredSize.Height > e.PrintableArea.Height
        //            && numberOfItemsAdded > 0)
        //            {
        //                int i = (Int32)(((FrameworkElement)((Grid)page.PageBody).Children[((Grid)page.PageBody).Children.Count - 1]).GetValue(Grid.RowProperty));
        //                int j = (Int32)(((FrameworkElement)((Grid)page.PageBody).Children[((Grid)page.PageBody).Children.Count - 2]).GetValue(Grid.RowProperty));

        //                //if ((Int32)(((FrameworkElement)Container.Children[((Grid)page.PageBody).Children.Count - 1]).GetValue(Grid.RowProperty)) == (Int32)(((FrameworkElement)Container.Children[((Grid)page.PageBody).Children.Count - 2]).GetValue(Grid.RowProperty)))
        //                //{
        //                //    ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count - 1);
        //                //    ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count - 2);
        //                //}
        //                if (i == j)
        //                {
        //                    ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count - 1);
        //                    ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count - 2);                            
        //                }
        //                else
        //                    ((Grid)page.PageBody).Children.RemoveAt(((Grid)page.PageBody).Children.Count - 1);

        //                e.HasMorePages = true;
        //                flag = true;
        //                break ;
        //            }
        //            flag = false;
        //            fieldItemIndex++;
        //            numberOfItemsAdded++;
        //        }
        //        if (flag == true)
        //        {
        //            flag = false;
        //            break;
        //        }
        //        fieldItemIndex = 0;
        //        itemIndex++;
        //        #region Comment
        //        //RowDefinition r = new RowDefinition();
        //        //page.PageBody.RowDefinitions.Add(r);

        //        //Grid section = new Grid();


        //        //section = (Grid)documentBodyItem.Children[itemIndex];

        //        //documentBodyItem.Children.Remove(section);


        //        //Grid.SetRow(section, page.PageBody.RowDefinitions.Count - 1);
        //        //page.PageBody.Children.Add(section);

        //        //GenratePreview();
        //        //MapRelations();

        //        //page.Measure(new Size(e.PrintableArea.Width, double.PositiveInfinity));
        //        //itemIndex++;
        //        //numberOfItemsAdded++;

        //        //if (page.DesiredSize.Height > section.ActualHeight - 1
        //        //    && numberOfItemsAdded > 0 && itemIndex != documentBodyItem.Children.Count 
        //        //    && section.Visibility==Visibility.Visible)
        //        //{

        //        //    e.HasMorePages = true;
        //        //    break;
        //        //}
        //        #endregion
        //    }
        //    e.PageVisual = page;           

        //}
        #endregion
        void document_EndPrint(object sender, EndPrintEventArgs e)
        {
            //throw new NotImplementedException();
        }

        void document_BeginPrint(object sender, BeginPrintEventArgs e)
        {
            //throw new NotImplementedException();
        }

        private void cmbUser_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //IsFirstTime = true;
            if (SelectedFormStructure != null)
            {
                FrequencyFlag = false;
                ForFlag = false;

                IsFirstTime = true;
                GenratePreview();
                MapRelations();
                IsFirstTime = false;
            }
        }

        private Grid GetHeadingRow(Grid container)
        {
            RowDefinition row1 = new RowDefinition();
            container.RowDefinitions.Add(row1);

            TextBox tblField = new TextBox();
            tblField.Height = 60;
            tblField.IsEnabled = false;
            tblField.Text = "Field";
            tblField.FontFamily = new FontFamily("Portable User Interface");
            tblField.Foreground = this.Resources["Heading"] as Brush;
            tblField.FontWeight = FontWeights.Bold;
            tblField.FontStyle = FontStyles.Italic;
            Grid.SetRow(tblField, container.RowDefinitions.Count - 1);
            Grid.SetColumn(tblField, 0);
            container.Children.Add(tblField);

            TextBox tblRuleValue = new TextBox();
            tblRuleValue.Height = 60;
            tblRuleValue.IsEnabled = false;
            tblRuleValue.Text = "Value According to Rules";
            tblRuleValue.FontFamily = new FontFamily("Portable User Interface");
            tblRuleValue.Foreground = this.Resources["Heading"] as Brush;
            tblRuleValue.FontWeight = FontWeights.Bold;
            tblRuleValue.FontStyle = FontStyles.Italic;
            Grid.SetRow(tblRuleValue, container.RowDefinitions.Count - 1);
            Grid.SetColumn(tblRuleValue, 1);
            container.Children.Add(tblRuleValue);

            TextBox tblDoctorValue = new TextBox();
            tblDoctorValue.Height = 60;
            tblDoctorValue.IsEnabled = false;
            tblDoctorValue.Text = "Value According to Doctor";
            tblDoctorValue.FontFamily = new FontFamily("Portable User Interface");
            tblDoctorValue.Foreground = this.Resources["Heading"] as Brush;
            tblDoctorValue.FontWeight = FontWeights.Bold;
            tblDoctorValue.FontStyle = FontStyles.Italic;
            Grid.SetRow(tblDoctorValue, container.RowDefinitions.Count - 1);
            Grid.SetColumn(tblDoctorValue, 2);
            container.Children.Add(tblDoctorValue);

            return container;
        }

        private Grid GetGridBody(Grid container, string Field, string RuleValue, string DoctorValue)
        {
            RowDefinition row2 = new RowDefinition();
            container.RowDefinitions.Add(row2);

            TextBox tblFieldStoolME = new TextBox();
            tblFieldStoolME.Height = 40;
            tblFieldStoolME.IsEnabled = false;
            tblFieldStoolME.Text = Field;
            Grid.SetRow(tblFieldStoolME, container.RowDefinitions.Count - 1);
            Grid.SetColumn(tblFieldStoolME, 0);
            container.Children.Add(tblFieldStoolME);

            TextBox tblStoolMERuleValue = new TextBox();
            tblStoolMERuleValue.Height = 40;
            tblStoolMERuleValue.IsEnabled = false;
            tblStoolMERuleValue.Text = RuleValue;
            Grid.SetRow(tblStoolMERuleValue, container.RowDefinitions.Count - 1);
            Grid.SetColumn(tblStoolMERuleValue, 1);
            container.Children.Add(tblStoolMERuleValue);

            TextBox tblStoolMEDoctorValue = new TextBox();
            tblStoolMEDoctorValue.Height = 40;
            tblStoolMEDoctorValue.IsEnabled = false;
            tblStoolMEDoctorValue.Text = DoctorValue;
            Grid.SetRow(tblStoolMEDoctorValue, container.RowDefinitions.Count - 1);
            Grid.SetColumn(tblStoolMEDoctorValue, 2);
            container.Children.Add(tblStoolMEDoctorValue);

            return container;
        }

        private void VarianceItemButton_Click(object sender, RoutedEventArgs e)
        {

            Grid section = GetSectionLayout("Investigation Variance");

            Grid container = (Grid)((Border)section.Children[0]).Child;
            ColumnDefinition column1 = new ColumnDefinition();
            column1.Width = new GridLength(200, GridUnitType.Auto);
            ColumnDefinition column2 = new ColumnDefinition();
            column2.Width = new GridLength(200, GridUnitType.Auto);
            ColumnDefinition column3 = new ColumnDefinition();
            column3.Width = new GridLength(200, GridUnitType.Auto);
            //column1.Width = new GridLength(200, GridUnitType.Auto);
            container.ColumnDefinitions.Add(column1);
            container.ColumnDefinitions.Add(column2);
            container.ColumnDefinitions.Add(column3);

            container = GetHeadingRow(container);

            if (Form.FindName("HydrationStatus") is ComboBox)
            {
                ComboBox cmbHydSt = (ComboBox)Form.FindName("HydrationStatus");
                if (cmbHydSt.SelectedItem != null)
                {
                    if (((DynamicListItem)cmbHydSt.SelectedItem).Title == "Mild dehydration")
                    {
                        ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
                        if (cmbPro != null)
                        {
                            if ((DynamicListItem)cmbPro.SelectedItem != null && ((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea")
                            {
                                if (Form.FindName("StoolME") is CheckBox && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked)
                                {
                                    container = GetGridBody(container, "StoolME", "True", "True");
                                }
                                else
                                {
                                    container = GetGridBody(container, "StoolME", "True", "False");
                                }
                                if (Form.FindName("StoolCulture") is CheckBox)
                                {
                                    container = GetGridBody(container, "StoolCulture", "True", "True");
                                }
                                else
                                {
                                    container = GetGridBody(container, "StoolCulture", "True", "False");
                                }
                            }

                        }
                    }
                    if (((DynamicListItem)cmbHydSt.SelectedItem).Title == "Moderate dehydration")
                    {
                        ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
                        if (cmbPro != null)
                        {
                            if ((DynamicListItem)cmbPro.SelectedItem != null && ((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea")
                            {
                                if (Form.FindName("StoolME") is CheckBox && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked)
                                {
                                    container = GetGridBody(container, "StoolME", "True", "True");
                                }
                                else
                                {
                                    container = GetGridBody(container, "StoolME", "True", "False");
                                }
                                if (Form.FindName("StoolCulture") is CheckBox)
                                {
                                    container = GetGridBody(container, "StoolCulture", "True", "True");
                                }
                                else
                                {
                                    container = GetGridBody(container, "StoolCulture", "True", "False");
                                }
                            }
                        }
                    }

                    if (((DynamicListItem)cmbHydSt.SelectedItem).Title == "Severe dehydration")
                    {
                        ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");
                        if (cmbPro != null)
                        {
                            if ((DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea"))
                            {
                                if (Form.FindName("CBC") is CheckBox && (bool)((CheckBox)Form.FindName("CBC")).IsChecked)
                                    container = GetGridBody(container, "CBC", "True", "True");
                                else
                                    container = GetGridBody(container, "CBC", "True", "False");

                                if (Form.FindName("BUNCreatinine") is CheckBox && (bool)((CheckBox)Form.FindName("BUNCreatinine")).IsChecked)
                                    container = GetGridBody(container, "BUNCreatinine", "True", "True");
                                else
                                    container = GetGridBody(container, "BUNCreatinine", "True", "False");

                                if (Form.FindName("SerumElectro") is CheckBox && (bool)((CheckBox)Form.FindName("SerumElectro")).IsChecked)
                                    container = GetGridBody(container, "SerumElectro", "True", "True");
                                else
                                    container = GetGridBody(container, "SerumElectro", "True", "False");

                                if (Form.FindName("XRayChest") is CheckBox && (bool)((CheckBox)Form.FindName("XRayChest")).IsChecked)
                                    container = GetGridBody(container, "XRayChest", "True", "True");
                                else
                                    container = GetGridBody(container, "XRayChest", "True", "False");

                                if (Form.FindName("BloodGases") is CheckBox && (bool)((CheckBox)Form.FindName("BloodGases")).IsChecked)
                                    container = GetGridBody(container, "BloodGases", "True", "True");
                                else
                                    container = GetGridBody(container, "BloodGases", "True", "False");
                            }
                            //else
                            //{
                            //    if (Form.FindName("CBC") is CheckBox)
                            //        ((CheckBox)Form.FindName("CBC")).IsChecked = false;
                            //    if (Form.FindName("BUNCreatinine") is CheckBox)
                            //        ((CheckBox)Form.FindName("BUNCreatinine")).IsChecked = false;
                            //    if (Form.FindName("SerumElectro") is CheckBox)
                            //        ((CheckBox)Form.FindName("SerumElectro")).IsChecked = false;
                            //    if (Form.FindName("XRayChest") is CheckBox)
                            //        ((CheckBox)Form.FindName("XRayChest")).IsChecked = false;
                            //    if (Form.FindName("BloodGases") is CheckBox)
                            //        ((CheckBox)Form.FindName("BloodGases")).IsChecked = false;
                            //}
                        }


                    }
                }
            }

            //BorderForm.Visibility = Visibility.Collapsed;
            //BorderVariance.Visibility = Visibility.Visible;
            //GrdVariance.Children.Add(section);
        }

        private void GetVariance()
        {
            variance.ListVariance1 = "";
            variance.ListVariance2 = "";
            variance.ListVariance3 = "";
            variance.ListVariance4 = "";
            variance.ListVariance5 = "";
            variance.ListVariance6 = "";
            if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
            {
                if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                {
                    ComboBox cmbHyd = (ComboBox)Form.FindName("HydrationStatus");
                    ComboBox cmbPro = (ComboBox)Form.FindName("ProvisionalDiagnosis");

                    #region Calculation for Variance1 Version1
                    //if ((cmbHyd!=null && cmbHyd.SelectedItem!=null && (((DynamicListItem)cmbHyd.SelectedItem).Title == "Mild dehydration" || ((DynamicListItem)cmbHyd.SelectedItem).Title == "Moderate dehydration")) || (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && ((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea"))
                    //{
                    //    if (Form.FindName("StoolME") is CheckBox && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked==false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "StoolME,";
                    //    }
                    //    if (Form.FindName("StoolCulture") is CheckBox && (bool)((CheckBox)Form.FindName("StoolCulture")).IsChecked == false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "StoolCulture,";
                    //    }
                    //}

                    //if (cmbHyd != null && cmbHyd.SelectedItem != null && ((DynamicListItem)cmbHyd.SelectedItem).Title == "Severe dehydration" || (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea")))
                    //{
                    //    if (Form.FindName("CBC") is CheckBox && (bool)((CheckBox)Form.FindName("CBC")).IsChecked==false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "StoolCulture,";
                    //    }
                    //    if (Form.FindName("BUNCreatinine") is CheckBox && (bool)((CheckBox)Form.FindName("BUNCreatinine")).IsChecked == false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "BUNCreatinine,";
                    //    }
                    //    if (Form.FindName("SerumElectro") is CheckBox && (bool)((CheckBox)Form.FindName("SerumElectro")).IsChecked == false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "SerumElectro,";
                    //    }
                    //    if (Form.FindName("XRayChest") is CheckBox && (bool)((CheckBox)Form.FindName("XRayChest")).IsChecked == false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "XRayChest,";
                    //    }
                    //    if (Form.FindName("BloodGases") is CheckBox && (bool)((CheckBox)Form.FindName("BloodGases")).IsChecked == false)
                    //    {
                    //        variance.Variance1 = "Standard investigations non compliance flag";
                    //        variance.ListVariance1 += "BloodGases,";
                    //    }
                    //}
                    #endregion

                    #region Calculation for Variance1 Version2
                    if (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea"))
                    {
                        if (Form.FindName("StoolME") is CheckBox && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked == false)
                        {
                            variance.Variance1 = "Standard investigations non compliance flag";
                            variance.ListVariance1 += "StoolME,";
                        }
                        if (Form.FindName("StoolCulture") is CheckBox && (bool)((CheckBox)Form.FindName("StoolCulture")).IsChecked == false)
                        {
                            variance.Variance1 = "Standard investigations non compliance flag";
                            variance.ListVariance1 += "StoolCulture,";
                        }
                    }
                    #endregion

                    #region Calculation for Variance2 Version1
                    //if ((cmbHyd != null && cmbHyd.SelectedItem != null && (((DynamicListItem)cmbHyd.SelectedItem).Title != "Mild dehydration" || ((DynamicListItem)cmbHyd.SelectedItem).Title != "Moderate dehydration")) || (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && ((DynamicListItem)cmbPro.SelectedItem).Title != "Acute watery diarrhea"))
                    //{
                    //    if (Form.FindName("StoolME") is CheckBox && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "StoolME,";
                    //    }
                    //    if (Form.FindName("StoolCulture") is CheckBox && (bool)((CheckBox)Form.FindName("StoolCulture")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "StoolCulture,";
                    //    }
                    //}

                    //if (cmbHyd != null && cmbHyd.SelectedItem != null && ((DynamicListItem)cmbHyd.SelectedItem).Title != "Severe dehydration" || (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title != "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title != "Persistent diarrhea")))
                    //{
                    //    if (Form.FindName("CBC") is CheckBox && (bool)((CheckBox)Form.FindName("CBC")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "StoolCulture,";
                    //    }
                    //    if (Form.FindName("BUNCreatinine") is CheckBox && (bool)((CheckBox)Form.FindName("BUNCreatinine")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "BUNCreatinine,";
                    //    }
                    //    if (Form.FindName("SerumElectro") is CheckBox && (bool)((CheckBox)Form.FindName("SerumElectro")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "SerumElectro,";
                    //    }
                    //    if (Form.FindName("XRayChest") is CheckBox && (bool)((CheckBox)Form.FindName("XRayChest")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "XRayChest,";
                    //    }
                    //    if (Form.FindName("BloodGases") is CheckBox && (bool)((CheckBox)Form.FindName("BloodGases")).IsChecked)
                    //    {
                    //        variance.Variance2 = "Additional investigations ordered flag";
                    //        variance.ListVariance2 += "BloodGases,";
                    //    }
                    //}
                    #endregion

                    #region Calculation for Variance2 Version2
                    if (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && ((DynamicListItem)cmbPro.SelectedItem).Title != "Acute watery diarrhea")
                    {
                        if (Form.FindName("StoolME") is CheckBox && (bool)((CheckBox)Form.FindName("StoolME")).IsChecked)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                            variance.ListVariance2 += "StoolME,";
                        }
                        if (Form.FindName("StoolCulture") is CheckBox && (bool)((CheckBox)Form.FindName("StoolCulture")).IsChecked)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                            variance.ListVariance2 += "StoolCulture,";
                        }
                        if (Form.FindName("OvaParasiteTest") is CheckBox && (bool)((CheckBox)Form.FindName("OvaParasiteTest")).IsChecked)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                            variance.ListVariance2 += "OvaParasiteTest,";
                        }
                    }

                    #endregion

                    #region Calculation for Variance3
                    if (cmbPro != null && (DynamicListItem)cmbPro.SelectedItem != null && (((DynamicListItem)cmbPro.SelectedItem).Title == "Acute watery diarrhea" || (!IsSaved && (((DynamicListItem)cmbPro.SelectedItem).Title == "Dysentry" || ((DynamicListItem)cmbPro.SelectedItem).Title == "Persistent diarrhea"))))
                    {
                        ListBox lstbox = (ListBox)Form.FindName("ManagementAntibiotics");
                        if (lstbox != null && lstbox.Items.Count > 0)
                        {
                            string cmb = "";
                            if (((Medication)((MedicatioRepeterControlItem)lstbox.Items[0]).DataContext).Drug != null)
                            {
                                cmb = ((Medication)((MedicatioRepeterControlItem)lstbox.Items[0]).DataContext).Drug.Description;
                            }
                            if (cmb != null && cmb != "")
                            {
                                variance.Variance3 = "Unwarranted Antibiotics prescription flag";
                                int i = 0;
                                while (i < lstbox.Items.Count)
                                {
                                    if (((Medication)((MedicatioRepeterControlItem)lstbox.Items[i]).DataContext).Drug != null)
                                    {
                                        cmb = ((Medication)((MedicatioRepeterControlItem)lstbox.Items[i]).DataContext).Drug.Description;
                                    }

                                    if (cmb != null && cmb != "")
                                    {
                                        variance.ListVariance3 += cmb + ",";
                                    }
                                    i++;
                                }
                            }
                        }
                    }

                    #endregion

                    #region Calculation for Variance4
                    if (cmbHyd != null && cmbHyd.SelectedItem != null && ((DynamicListItem)cmbHyd.SelectedItem).Title == "Severe dehydration")
                    {
                        ComboBox cmbRefTo = (ComboBox)Form.FindName("RMTo");
                        if (cmbRefTo != null && cmbRefTo.SelectedItem == null)
                        {
                            variance.Variance4 = "Referral not made flag";
                            variance.ListVariance4 = "Referral not made";
                        }
                    }
                    #endregion

                    #region Calculation for Variance5

                    // Will be Applied after Confirmation By Nilesh Sir

                    #endregion

                    #region Calculation for Variance6

                    // Will be Applied after Masters Received

                    #endregion

                    #region Calculation for Variance7

                    //Exists In SaveTemplate Event

                    #endregion

                }
                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 4)
                {
                    #region Calculation for Variance1 Version1

                    bool tempflag = false;

                    if (Form.FindName("PDPersistentCough") is FrameworkElement)
                    {
                        CheckBox chkPDPersistentCough = (CheckBox)Form.FindName("PDPersistentCough");
                        if (chkPDPersistentCough.IsChecked == true)
                        {
                            //Sinus Imaging
                            //if (Form.FindName("InvestSinusImaging") is CheckBox && (bool)((CheckBox)Form.FindName("InvestSinusImaging")).IsChecked == false)
                            //{
                            //    tempflag = true;
                            //    variance.ListVariance1 += "Sinus Imaging,";
                            //}
                            //Spirometry
                            //if (Form.FindName("InvestSpirometry") is RadioButton && (bool)((RadioButton)Form.FindName("InvestSpirometry")).IsChecked == false)
                            //{
                            //    tempflag = true;
                            //    variance.ListVariance1 += "Spirometry,";
                            //}

                            //CBC,Spirometry
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Complete Blood Count (CBC)" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Complete Blood Count (CBC),";
                                        }
                                        if (a.Description == "Spirometry" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Spirometry,";
                                        }
                                    }
                                }
                            }
                            //Chest X-Ray,Sinus Imaging
                            if (Form.FindName("InvestRadiology") is FrameworkElement)
                            {
                                ListBox lstInvestRadiology = (ListBox)Form.FindName("InvestRadiology");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Chest X - Ray" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Chest X - Ray,";
                                        }
                                        if (a.Description == "SINUS IMAGING" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "SINUS IMAGING,";
                                        }
                                    }
                                }
                            }

                        }

                        if (tempflag == true)
                        {
                            variance.Variance1 = "Standard investigations non compliance flag";
                        }
                    }

                    #endregion

                    #region Calculation for Variance2 Version1

                    //Other Tests
                    tempflag = false;

                    if (Form.FindName("PDAcuteCough") is FrameworkElement)
                    {
                        CheckBox chkPDAcuteCough = (CheckBox)Form.FindName("PDAcuteCough");
                        if (chkPDAcuteCough.IsChecked == true)
                        {
                            //InvestAdditionalInvestigations
                            if (Form.FindName("InvestAdditionalInvestigations") is FrameworkElement)
                            {
                                ListBox lstInvestAdditionalInvestigations = (ListBox)Form.FindName("InvestAdditionalInvestigations");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestAdditionalInvestigations.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestAdditionalInvestigations.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }

                            //InvestPertussisInfectionNasopharyngealCulture
                            if (Form.FindName("InvestPertussisInfectionNasopharyngealCulture") is CheckBox && (bool)((CheckBox)Form.FindName("InvestPertussisInfectionNasopharyngealCulture")).IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance2 += "Pertussis infection nasopharyngeal culture,";
                            }
                            //InvestOtherTests
                            if (Form.FindName("InvestOtherTests") is TextBox && ((TextBox)Form.FindName("InvestOtherTests")).Text != null && ((TextBox)Form.FindName("InvestOtherTests")).Text != "")
                            {
                                tempflag = true;
                                variance.ListVariance2 += ((TextBox)Form.FindName("InvestOtherTests")).Text;
                            }


                            //if (Form.FindName("InvestOtherTests") is FrameworkElement && ((FrameworkElement)Form.FindName("InvestOtherTests")).DataContext != null)
                            //{
                            //    ListBox lstInvestOtherTests = (ListBox)Form.FindName("InvestOtherTests");

                            //    OtherInvestigationFieldSetting InvestSetting = (OtherInvestigationFieldSetting)((FieldDetail)lstInvestOtherTests.DataContext).Settings;
                            //    for (int i = 0; i < InvestSetting.ItemsSource.Count; i++)
                            //    {
                            //        if (((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation != null && ((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation != "--Select--")
                            //        {
                            //            tempflag = true;
                            //            variance.ListVariance2 += ((OtherInvestigation)InvestSetting.ItemsSource[i]).Investigation.ToString() + ",";
                            //        }
                            //    }
                            //}


                            //InvestSputumCultureSensitivity
                            //if (Form.FindName("InvestSputumCultureSensitivity") is CheckBox && (bool)((CheckBox)Form.FindName("InvestSputumCultureSensitivity")).IsChecked == true)
                            //{
                            //    tempflag = true;
                            //    variance.ListVariance2 += "Sputum culture & sensitivity,";
                            //}
                            //InvestMantouxTest
                            //if (Form.FindName("InvestMantouxTest") is CheckBox && (bool)((CheckBox)Form.FindName("InvestMantouxTest")).IsChecked == true)
                            //{
                            //    tempflag = true;
                            //    variance.ListVariance2 += "Mantoux test,";
                            //}

                        }

                        if (tempflag == true)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                        }
                    }

                    #endregion

                    #region Calculation for Variance3

                    tempflag = false;
                    if ((FrameworkElement)Form.FindName("RMToHospital") != null && ((ComboBox)Form.FindName("RMToHospital")).SelectedItem == null)
                    {
                        //AlarmCoughWithDyspneaAtRest
                        if (Form.FindName("AlarmCoughWithDyspneaAtRest") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithDyspneaAtRest = (CheckBox)Form.FindName("AlarmCoughWithDyspneaAtRest");
                            if (chkAlarmCoughWithDyspneaAtRest.IsChecked == true && chkAlarmCoughWithDyspneaAtRest.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with dyspnea at rest, ";
                            }
                        }
                        //AlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus
                        if (Form.FindName("AlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus = (CheckBox)Form.FindName("AlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus");
                            if (chkAlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus.IsChecked == true && chkAlarmCoughAccompaniedWithBreathlessnessAndCoughingUpPinkFrothyMucus.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough accompanied with breathlessness and coughing up pink frothy mucus, ";
                            }
                        }
                        //AlarmIntractableCough
                        if (Form.FindName("AlarmIntractableCough") is FrameworkElement)
                        {
                            CheckBox chkAlarmIntractableCough = (CheckBox)Form.FindName("AlarmIntractableCough");
                            if (chkAlarmIntractableCough.IsChecked == true && chkAlarmIntractableCough.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Intractable cough, ";
                            }
                        }
                        //AlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease
                        if (Form.FindName("AlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease") is FrameworkElement)
                        {
                            CheckBox chkAlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease = (CheckBox)Form.FindName("AlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease");
                            if (chkAlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease.IsChecked == true && chkAlarmPersistentCoughInPatientsWithCoExistingRespiratoryDisease.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Persistent cough in patients with co-existing respiratory disease, ";
                            }
                        }
                        //AlarmCoughWithBloodHemoptysis
                        if (Form.FindName("AlarmCoughWithBloodHemoptysis") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithBloodHemoptysis = (CheckBox)Form.FindName("AlarmCoughWithBloodHemoptysis");
                            if (chkAlarmCoughWithBloodHemoptysis.IsChecked == true && chkAlarmCoughWithBloodHemoptysis.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with blood (hemoptysis), ";
                            }
                        }
                        //AlarmCoughWithTachycardia
                        if (Form.FindName("AlarmCoughWithTachycardia") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithTachycardia = (CheckBox)Form.FindName("AlarmCoughWithTachycardia");
                            if (chkAlarmCoughWithTachycardia.IsChecked == true && chkAlarmCoughWithTachycardia.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with tachycardia, ";
                            }
                        }
                        //AlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills
                        if (Form.FindName("AlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills = (CheckBox)Form.FindName("AlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills");
                            if (chkAlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills.IsChecked == true && chkAlarmCoughWithUnexplainedWeightLossWithFeversAndNightChills.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with unexplained weight loss with fevers and  night chills, ";
                            }
                        }
                        //AlarmCoughWithAssociatedCyanosis
                        if (Form.FindName("AlarmCoughWithAssociatedCyanosis") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithAssociatedCyanosis = (CheckBox)Form.FindName("AlarmCoughWithAssociatedCyanosis");
                            if (chkAlarmCoughWithAssociatedCyanosis.IsChecked == true && chkAlarmCoughWithAssociatedCyanosis.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with associated cyanosis, ";
                            }
                        }
                        //AlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment
                        if (Form.FindName("AlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment") is FrameworkElement)
                        {
                            CheckBox chkAlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment = (CheckBox)Form.FindName("AlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment");
                            if (chkAlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment.IsChecked == true && chkAlarmPersistentCoughNotResponsiveToEmpiricalTherapyDrugTreatment.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Persistent cough not responsive to empirical therapy/ drug treatment, ";
                            }
                        }
                        //AlarmCoughWithDyspneaWithMildActivity
                        if (Form.FindName("AlarmCoughWithDyspneaWithMildActivity") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithDyspneaWithMildActivity = (CheckBox)Form.FindName("AlarmCoughWithDyspneaWithMildActivity");
                            if (chkAlarmCoughWithDyspneaWithMildActivity.IsChecked == true && chkAlarmCoughWithDyspneaWithMildActivity.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with dyspnea with mild activity, ";
                            }
                        }
                        //AlarmCoughWithTachypnea
                        if (Form.FindName("AlarmCoughWithTachypnea") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithTachypnea = (CheckBox)Form.FindName("AlarmCoughWithTachypnea");
                            if (chkAlarmCoughWithTachypnea.IsChecked == true && chkAlarmCoughWithTachypnea.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with tachypnea, ";
                            }
                        }
                        //AlarmCoughWithHighFever
                        if (Form.FindName("AlarmCoughWithHighFever") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithHighFever = (CheckBox)Form.FindName("AlarmCoughWithHighFever");
                            if (chkAlarmCoughWithHighFever.IsChecked == true && chkAlarmCoughWithHighFever.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with high fever, ";
                            }
                        }
                        //AlarmCoughWithStridorRetropharyngealAbcess
                        if (Form.FindName("AlarmCoughWithStridorRetropharyngealAbcess") is FrameworkElement)
                        {
                            CheckBox chkAlarmCoughWithStridorRetropharyngealAbcess = (CheckBox)Form.FindName("AlarmCoughWithStridorRetropharyngealAbcess");
                            if (chkAlarmCoughWithStridorRetropharyngealAbcess.IsChecked == true && chkAlarmCoughWithStridorRetropharyngealAbcess.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Cough with stridor (Retropharyngeal abcess), ";
                            }
                        }
                        //AlarmPersistentCoughCardiovascularDisease
                        if (Form.FindName("AlarmPersistentCoughCardiovascularDisease") is FrameworkElement)
                        {
                            CheckBox chkAlarmPersistentCoughCardiovascularDisease = (CheckBox)Form.FindName("AlarmPersistentCoughCardiovascularDisease");
                            if (chkAlarmPersistentCoughCardiovascularDisease.IsChecked == true && chkAlarmPersistentCoughCardiovascularDisease.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Persistent cough in patients with co-existing cardiovascular disease, ";
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance3 = "Referral not made flag";
                    }
                    #endregion

                    #region Calculation for Variance4

                    // 4.	Medication protocol non adherence flag

                    tempflag = false;
                    string tempStr1 = "";
                    string tempStr2 = "";
                    string tempStr3 = "";
                    string tempStr4 = "";
                    string tempStr5 = "";
                    string tempStr6 = "";
                    string tempStr7 = "";
                    #region 1
                    if (Form.FindName("PDCoughWithPostNasalDrips") is FrameworkElement)
                    {
                        CheckBox chkPDCoughWithPostNasalDrips = (CheckBox)Form.FindName("PDCoughWithPostNasalDrips");
                        if (chkPDCoughWithPostNasalDrips.IsChecked == true)
                        {

                            bool temp1 = false;
                            bool temp2 = false;
                            bool temp3 = false;
                            bool temp4 = false;
                            bool temp5 = false;
                            //ManagementNormalSaline                                                                                   
                            if (Form.FindName("ManagementNormalSaline") is FrameworkElement)
                            {
                                ListBox lstManagementNormalSaline = (ListBox)Form.FindName("ManagementNormalSaline");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementNormalSaline.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr1 += "Nasal Decongestants, ";
                            }
                            //ManagementNasalDrops                                                                                   
                            if (Form.FindName("ManagementNasalDrops") is FrameworkElement)
                            {
                                ListBox lstManagementNasalDrops = (ListBox)Form.FindName("ManagementNasalDrops");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementNasalDrops.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr1 += "Nasal Decongestants, ";
                            }

                            //ManagementOthers
                            if (Form.FindName("ManagementOthers") is FrameworkElement)
                            {
                                ListBox lstbxManagementOthers = (ListBox)Form.FindName("ManagementOthers");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOthers.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr1 += "Others, ";
                            }

                            //ManagementBeclomethasoneNasalSpray
                            if (Form.FindName("ManagementBeclomethasoneNasalSpray") is FrameworkElement)
                            {
                                ListBox lstManagementBeclomethasoneNasalSpray = (ListBox)Form.FindName("ManagementBeclomethasoneNasalSpray");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementBeclomethasoneNasalSpray.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr1 += "Beclomethasone Nasal Spray, ";
                            }
                            //ManagementBudesonideNasalSpray
                            if (Form.FindName("ManagementBudesonideNasalSpray") is FrameworkElement)
                            {
                                ListBox lstManagementBudesonideNasalSpray = (ListBox)Form.FindName("ManagementBudesonideNasalSpray");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementBudesonideNasalSpray.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr1 += "Budesonide Nasal Spray, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr1 = "";
                            }
                        }
                    }
                    #endregion

                    #region 2
                    if (Form.FindName("PDCoughWithChestInfection") is FrameworkElement)
                    {
                        CheckBox chkPDCoughWithChestInfection = (CheckBox)Form.FindName("PDCoughWithChestInfection");
                        if (chkPDCoughWithChestInfection.IsChecked == true)
                        {
                            bool temp1 = false;
                            bool temp2 = false;
                            bool temp3 = false;
                            bool temp4 = false;
                            bool temp5 = false;
                            //ManagementMacrolides                                                                                   
                            if (Form.FindName("ManagementMacrolides") is FrameworkElement)
                            {
                                ListBox lstManagementMacrolides = (ListBox)Form.FindName("ManagementMacrolides");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementMacrolides.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr2 += "Macrolides, ";
                            }
                            //ManagementCephalosporins                                                                                   
                            if (Form.FindName("ManagementCephalosporins") is FrameworkElement)
                            {
                                ListBox lstManagementCephalosporins = (ListBox)Form.FindName("ManagementCephalosporins");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementCephalosporins.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr2 += "Cephalosporins, ";
                            }

                            //ManagementQuinolones                                                                                   
                            if (Form.FindName("ManagementQuinolones") is FrameworkElement)
                            {
                                ListBox lstManagementQuinolones = (ListBox)Form.FindName("ManagementQuinolones");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementQuinolones.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr2 += "Quinolones, ";
                            }

                            //ManagementTetracyclines
                            if (Form.FindName("ManagementTetracyclines") is FrameworkElement)
                            {
                                ListBox lstManagementManagementTetracyclines = (ListBox)Form.FindName("ManagementTetracyclines");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementManagementTetracyclines.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr2 += "Tetracyclines, ";
                            }
                            //ManagementPenicillin
                            if (Form.FindName("ManagementPenicillin") is FrameworkElement)
                            {
                                ListBox lstManagementPenicillin = (ListBox)Form.FindName("ManagementPenicillin");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementPenicillin.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr2 += "Budesonide Nasal Spray, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr2 = "";
                            }
                        }
                    }
                    #endregion

                    #region 3
                    if (Form.FindName("PDCoughWithBronchitisAsthmaCOPDpneumoconiosis") is FrameworkElement)
                    {
                        CheckBox chkPDCoughWithBronchitisAsthmaCOPDpneumoconiosis = (CheckBox)Form.FindName("PDCoughWithBronchitisAsthmaCOPDpneumoconiosis");
                        if (chkPDCoughWithBronchitisAsthmaCOPDpneumoconiosis.IsChecked == true)
                        {
                            bool temp1 = false;
                            bool temp2 = false;
                            bool temp3 = false;
                            bool temp4 = false;
                            bool temp5 = false;
                            bool temp6 = false;
                            bool temp7 = false;
                            //ManagementIpratropiumBromide                                                                                   
                            if (Form.FindName("ManagementIpratropiumBromide") is FrameworkElement)
                            {
                                ListBox lstManagementIpratropiumBromide = (ListBox)Form.FindName("ManagementIpratropiumBromide");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementIpratropiumBromide.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr3 += "Ipratropium Bromide, ";
                            }
                            //ManagementExpectorant                                                                                   
                            if (Form.FindName("ManagementExpectorant") is FrameworkElement)
                            {
                                ListBox lstManagementExpectorant = (ListBox)Form.FindName("ManagementExpectorant");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementExpectorant.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr3 += "Expectorant, ";
                            }

                            //ManagementExpectorantMucolytic                                                                                   
                            if (Form.FindName("ManagementExpectorantMucolytic") is FrameworkElement)
                            {
                                ListBox lstManagementExpectorantMucolytic = (ListBox)Form.FindName("ManagementExpectorantMucolytic");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementExpectorantMucolytic.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr3 += "Expectorant Mucolytic, ";
                            }

                            //ManagementSalbutamol
                            if (Form.FindName("ManagementSalbutamol") is FrameworkElement)
                            {
                                ListBox lstManagementSalbutamol = (ListBox)Form.FindName("ManagementSalbutamol");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementSalbutamol.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr3 += "Salbutamol, ";
                            }
                            //ManagementSalbutamolTheophylline
                            if (Form.FindName("ManagementSalbutamolTheophylline") is FrameworkElement)
                            {
                                ListBox lstManagementSalbutamolTheophylline = (ListBox)Form.FindName("ManagementSalbutamolTheophylline");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementSalbutamolTheophylline.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr3 += "Salbutamol Theophylline, ";
                            }

                            //ManagementOtherBronchodilators
                            if (Form.FindName("ManagementOtherBronchodilators") is FrameworkElement)
                            {
                                ListBox lstManagementOtherBronchodilators = (ListBox)Form.FindName("ManagementOtherBronchodilators");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherBronchodilators.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp6 = true;
                                        break;
                                    }
                                }
                                if (temp6 == false)
                                    tempStr3 += "Other Bronchodilators, ";
                            }
                            //ManagementBeclomethasone
                            if (Form.FindName("ManagementBeclomethasone") is FrameworkElement)
                            {
                                ListBox lstManagementBeclomethasone = (ListBox)Form.FindName("ManagementBeclomethasone");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementBeclomethasone.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp7 = true;
                                        break;
                                    }
                                }
                                if (temp7 == false)
                                    tempStr3 += "Beclomethasone, ";
                            }


                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false && temp6 == false && temp7 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr3 = "";
                            }
                        }
                    }
                    #endregion

                    #region 4
                    if (Form.FindName("PDCoughWithGERD") is FrameworkElement)
                    {
                        CheckBox chkPDCoughWithGERD = (CheckBox)Form.FindName("PDCoughWithGERD");
                        if (chkPDCoughWithGERD.IsChecked == true)
                        {
                            bool temp1 = false;
                            bool temp2 = false;
                            bool temp3 = false;
                            //ManagementH2Blockers                                                                                   
                            if (Form.FindName("ManagementH2Blockers") is FrameworkElement)
                            {
                                ListBox lstManagementH2Blockers = (ListBox)Form.FindName("ManagementH2Blockers");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementH2Blockers.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr4 += "H2 Blockers, ";
                            }
                            //ManagementOtherH2Blockers                                                                                   
                            if (Form.FindName("ManagementOtherH2Blockers") is FrameworkElement)
                            {
                                ListBox lstManagementOtherH2Blockers = (ListBox)Form.FindName("ManagementOtherH2Blockers");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherH2Blockers.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr4 += "Other H2 Blockers, ";
                            }

                            //ManagementAntacids                                                                                   
                            if (Form.FindName("ManagementAntacids") is FrameworkElement)
                            {
                                ListBox lstManagementAntacids = (ListBox)Form.FindName("ManagementAntacids");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAntacids.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr4 += "Antacids, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr4 = "";
                            }
                        }
                    }
                    #endregion

                    #region 5
                    if (Form.FindName("PDCoughWithRhinitis") is FrameworkElement)
                    {
                        CheckBox chkPDCoughWithRhinitis = (CheckBox)Form.FindName("PDCoughWithRhinitis");
                        if (chkPDCoughWithRhinitis.IsChecked == true)
                        {
                            bool temp1 = false;
                            bool temp2 = false;
                            bool temp3 = false;
                            bool temp4 = false;
                            bool temp5 = false;
                            bool temp6 = false;
                            //ManagementAntiallergicCough                                                                                   
                            if (Form.FindName("ManagementAntiallergicCough") is FrameworkElement)
                            {
                                ListBox lstManagementAntiallergicCough = (ListBox)Form.FindName("ManagementAntiallergicCough");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAntiallergicCough.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr5 += "Antiallergic Cough, ";
                            }
                            //ManagementCodeine                                                                                   
                            if (Form.FindName("ManagementCodeine") is FrameworkElement)
                            {
                                ListBox lstManagementCodeine = (ListBox)Form.FindName("ManagementCodeine");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementCodeine.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr5 += "Codeine, ";
                            }

                            //ManagementOtherAntiallergics
                            if (Form.FindName("ManagementOtherAntiallergics") is FrameworkElement)
                            {
                                ListBox lstbxManagementOtherAntiallergics = (ListBox)Form.FindName("ManagementOtherAntiallergics");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherAntiallergics.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr5 += "Other Antiallergics, ";
                            }

                            //ManagementNormalSaline                                                                                   
                            if (Form.FindName("ManagementNormalSaline") is FrameworkElement)
                            {
                                ListBox lstManagementNormalSaline = (ListBox)Form.FindName("ManagementNormalSaline");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementNormalSaline.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr5 += "Nasal Decongestants, ";
                            }
                            //ManagementNasalDrops                                                                                   
                            if (Form.FindName("ManagementNasalDrops") is FrameworkElement)
                            {
                                ListBox lstManagementNasalDrops = (ListBox)Form.FindName("ManagementNasalDrops");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementNasalDrops.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr5 += "Nasal Decongestants, ";
                            }

                            //ManagementOthers
                            if (Form.FindName("ManagementOthers") is FrameworkElement)
                            {
                                ListBox lstbxManagementOthers = (ListBox)Form.FindName("ManagementOthers");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOthers.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp6 = true;
                                        break;
                                    }
                                }
                                if (temp6 == false)
                                    tempStr5 += "Others, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false && temp6 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr5 = "";
                            }
                        }
                    }
                    #endregion

                    #region 6
                    if (Form.FindName("PDTropicalEosinophilia") is FrameworkElement)
                    {
                        CheckBox chkPDTropicalEosinophilia = (CheckBox)Form.FindName("PDTropicalEosinophilia");
                        if (chkPDTropicalEosinophilia.IsChecked == true)
                        {
                            bool temp1 = false;
                            //ManagementDiethylcarbamazineHetrazan                                                                                   
                            if (Form.FindName("ManagementDiethylcarbamazineHetrazan") is FrameworkElement)
                            {
                                ListBox lstManagementDiethylcarbamazineHetrazan = (ListBox)Form.FindName("ManagementDiethylcarbamazineHetrazan");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementDiethylcarbamazineHetrazan.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr6 += "Diethylcarbamazine (Hetrazan), ";
                            }

                            if (temp1 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr6 = "";
                            }
                        }
                    }
                    #endregion

                    #region 7
                    if (Form.FindName("PDTuberculosis") is FrameworkElement)
                    {
                        CheckBox chkPDTuberculosis = (CheckBox)Form.FindName("PDTuberculosis");
                        if (chkPDTuberculosis.IsChecked == true)
                        {
                            bool temp1 = false;
                            //ManagementAntiTBDrugs                                                                                   
                            if (Form.FindName("ManagementAntiTBDrugs") is FrameworkElement)
                            {
                                ListBox lstManagementAntiTBDrugs = (ListBox)Form.FindName("ManagementAntiTBDrugs");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAntiTBDrugs.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr7 += "ManagementAntiTBDrugs, ";
                            }

                            if (temp1 == false)
                            {
                                tempflag = true;
                            }
                            else
                            {
                                tempStr7 = "";
                            }
                        }
                    }
                    #endregion

                    if (tempflag == true)
                    {
                        variance.Variance4 = "Medication protocol non adherence flag";
                        variance.ListVariance4 = tempStr1 + tempStr2 + tempStr3 + tempStr4 + tempStr5 + tempStr6 + tempStr7;
                    }
                    #endregion

                    #region Calculation for Variance5
                    tempflag = false;
                    // 5.	Unwarranted drug prescription flag
                    //ManagementOtherAntiallergics
                    if (Form.FindName("ManagementOtherAntiallergics") is FrameworkElement)
                    {
                        ListBox lstbxManagementOtherAntiallergics = (ListBox)Form.FindName("ManagementOtherAntiallergics");

                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherAntiallergics.DataContext).Settings);
                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                        {
                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                            {
                                tempflag = true;
                                variance.ListVariance5 += ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug.ToString() + ",";
                            }
                        }
                    }
                    //ManagementOthers
                    if (Form.FindName("ManagementOthers") is FrameworkElement)
                    {
                        ListBox lstbxManagementOthers = (ListBox)Form.FindName("ManagementOthers");

                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOthers.DataContext).Settings);
                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                        {
                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                            {
                                tempflag = true;
                                variance.ListVariance5 += ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug.ToString() + ",";
                            }
                        }
                    }
                    //ManagementOtherDrugs
                    if (Form.FindName("ManagementOtherDrugs") is FrameworkElement)
                    {
                        ListBox lstbxManagementOtherDrugs = (ListBox)Form.FindName("ManagementOtherDrugs");

                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherDrugs.DataContext).Settings);
                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                        {
                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                            {
                                tempflag = true;
                                variance.ListVariance5 += ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug.ToString() + ",";
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance5 = "Unwarranted drug prescription flag";
                    }
                    #endregion

                    #region Calculation for Variance6

                    // 6.	Mandatory prompt ignored

                    #endregion
                }
                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 5)
                {
                    #region Calculation for Variance1 Version1
                    // 1. Standard investigations non compliance flag

                    bool tempflag = false;

                    if (Form.FindName("PDStageIhypertensionMildhypertension") is FrameworkElement && Form.FindName("PDStageIIhypertensionModeratehypertension") is FrameworkElement)
                    {
                        CheckBox chkPDStageIhypertensionMildhypertension = (CheckBox)Form.FindName("PDStageIhypertensionMildhypertension");
                        CheckBox chkPDStageIIhypertensionModeratehypertension = (CheckBox)Form.FindName("PDStageIIhypertensionModeratehypertension");
                        if (chkPDStageIhypertensionMildhypertension.IsChecked == true || chkPDStageIIhypertensionModeratehypertension.IsChecked == true)
                        {
                            //InvestLabServices-Complete Urine Analysis ( CUE ),Creatinine - Serum ,ELECTROLYTE PROFILE
                            if (Form.FindName("InvestLabServices") is FrameworkElement)
                            {
                                ListBox lstInvestLabServices = (ListBox)Form.FindName("InvestLabServices");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabServices.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Complete Urine Analysis ( CUE )" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Complete Urine Analysis ( CUE ),";
                                        }
                                        if (a.Description == "Creatinine - Serum " && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Creatinine - Serum ,";
                                        }
                                        if (a.Description == "ELECTROLYTE PROFILE" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "ELECTROLYTE PROFILE,";
                                        }
                                    }
                                }
                            }

                            //InvestECG-ECG (12 Lead Electrocardiography)
                            if (Form.FindName("InvestECG") is FrameworkElement)
                            {
                                ListBox lstInvestECG = (ListBox)Form.FindName("InvestECG");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestECG.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestECG.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "ECG (12 Lead Electrocardiography)" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "ECG (12 Lead Electrocardiography)";
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance1 = "Standard investigations non compliance flag";
                    }
                    #endregion

                    #region Calculation for Variance2 Version1
                    // 2. Additional investigations ordered flag

                    tempflag = false;

                    if (Form.FindName("PDPrehypertension") is FrameworkElement)
                    {
                        CheckBox chkPDPrehypertension = (CheckBox)Form.FindName("PDPrehypertension");
                        if (chkPDPrehypertension.IsChecked == true)
                        {
                            //InvestLabs
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestAmbulatoryBloodPressureMonitoring
                            if (Form.FindName("InvestAmbulatoryBloodPressureMonitoring") is FrameworkElement)
                            {
                                ListBox lstInvestAmbulatoryBloodPressureMonitoring = (ListBox)Form.FindName("InvestAmbulatoryBloodPressureMonitoring");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestAmbulatoryBloodPressureMonitoring.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestAmbulatoryBloodPressureMonitoring.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestRadiology
                            if (Form.FindName("InvestRadiology") is FrameworkElement)
                            {
                                ListBox lstInvestRadiology = (ListBox)Form.FindName("InvestRadiology");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestOtherTests
                            if (Form.FindName("InvestOtherTests") is TextBox && ((TextBox)Form.FindName("InvestOtherTests")).Text != null && ((TextBox)Form.FindName("InvestOtherTests")).Text != "")
                            {
                                tempflag = true;
                                variance.ListVariance2 += ((TextBox)Form.FindName("InvestOtherTests")).Text;
                            }
                        }

                        if (tempflag == true)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                        }
                    }
                    #endregion

                    #region Calculation for Variance3

                    tempflag = false;

                    if ((FrameworkElement)Form.FindName("RMToHospital") != null && ((ComboBox)Form.FindName("RMToHospital")).SelectedItem == null)
                    {
                        //PDStageIIIhypertensionSeverehypertension
                        if (Form.FindName("PDStageIIIhypertensionSeverehypertension") is FrameworkElement)
                        {
                            CheckBox chkPDStageIIIhypertensionSeverehypertension = (CheckBox)Form.FindName("PDStageIIIhypertensionSeverehypertension");
                            if (chkPDStageIIIhypertensionSeverehypertension.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Stage III hypertension, ";
                            }
                        }
                        //PresBlurredVision
                        if (Form.FindName("PresBlurredVision") is FrameworkElement)
                        {
                            CheckBox chkPresBlurredVision = (CheckBox)Form.FindName("PresBlurredVision");
                            if (chkPresBlurredVision.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Blurred vision, ";
                            }
                        }
                        //HistSuddenBlackouts
                        if (Form.FindName("HistSuddenBlackouts") is FrameworkElement)
                        {
                            CheckBox chkHistSuddenBlackouts = (CheckBox)Form.FindName("HistSuddenBlackouts");
                            if (chkHistSuddenBlackouts.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Sudden blackouts, ";
                            }
                        }
                        //HistWeaknessOfLimbs
                        if (Form.FindName("HistWeaknessOfLimbs") is FrameworkElement)
                        {
                            CheckBox chkHistWeaknessOfLimbs = (CheckBox)Form.FindName("HistWeaknessOfLimbs");
                            if (chkHistWeaknessOfLimbs.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "weakness of the limbs, ";
                            }
                        }
                        //HistSlurredSpeech
                        if (Form.FindName("HistSlurredSpeech") is FrameworkElement)
                        {
                            CheckBox chkHistSlurredSpeech = (CheckBox)Form.FindName("HistSlurredSpeech");
                            if (chkHistSlurredSpeech.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "slurred speech, ";
                            }
                        }
                        //HistTongueProtrudingToOneSide
                        if (Form.FindName("HistTongueProtrudingToOneSide") is FrameworkElement)
                        {
                            CheckBox chkHistTongueProtrudingToOneSide = (CheckBox)Form.FindName("HistTongueProtrudingToOneSide");
                            if (chkHistTongueProtrudingToOneSide.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "tongue protruding to one side, ";
                            }
                        }
                        //PresConfusion
                        if (Form.FindName("PresConfusion") is FrameworkElement)
                        {
                            CheckBox chkPresConfusion = (CheckBox)Form.FindName("PresConfusion");
                            if (chkPresConfusion.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Confusion, ";
                            }
                        }
                        //PresLossOfConsciousness
                        if (Form.FindName("PresLossOfConsciousness") is FrameworkElement)
                        {
                            CheckBox chkPresLossOfConsciousness = (CheckBox)Form.FindName("PresLossOfConsciousness");
                            if (chkPresLossOfConsciousness.IsChecked == true)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Loss of consciousness, ";
                            }
                        }
                        //ObserveSystolic
                        if (Form.FindName("ObserveSystolic") is FrameworkElement)
                        {
                            TextBox txtObserveSystolic = (TextBox)Form.FindName("ObserveSystolic");

                            if (txtObserveSystolic.Text != null && txtObserveSystolic.Text != "" && Convert.ToDouble(txtObserveSystolic.Text) >= 220.0)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "SBP > 220mmHg, ";
                            }
                        }
                        //ObserveDiastolic
                        if (Form.FindName("ObserveDiastolic") is FrameworkElement)
                        {
                            TextBox txtObserveDiastolic = (TextBox)Form.FindName("ObserveDiastolic");

                            if (txtObserveDiastolic.Text != null && txtObserveDiastolic.Text != "" && Convert.ToDouble(txtObserveDiastolic.Text) >= 130.0)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "DBP > 130mmHg, ";
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance3 = "Referral not made flag";
                    }
                    #endregion

                    #region Calculation for Variance4

                    // 4.	Medication protocol non adherence flag

                    tempflag = false;
                    string tempStr1 = "";
                    bool temp1 = false;
                    bool temp2 = false;
                    bool temp3 = false;
                    bool temp4 = false;
                    bool temp5 = false;
                    bool temp6 = false;
                    bool temp7 = false;
                    #region 1
                    if (Form.FindName("PDStageIhypertensionMildhypertension") is FrameworkElement && Form.FindName("PDStageIIhypertensionModeratehypertension") is FrameworkElement)
                    {
                        CheckBox chkPDStageIhypertensionMildhypertension = (CheckBox)Form.FindName("PDStageIhypertensionMildhypertension");
                        CheckBox chkPDStageIIhypertensionModeratehypertension = (CheckBox)Form.FindName("PDStageIIhypertensionModeratehypertension");
                        if (chkPDStageIhypertensionMildhypertension.IsChecked == true || chkPDStageIIhypertensionModeratehypertension.IsChecked == true)
                        {

                            //ManagementThiazideDiuretics                                                                                   
                            if (Form.FindName("ManagementThiazideDiuretics") is FrameworkElement)
                            {
                                ListBox lstManagementThiazideDiuretics = (ListBox)Form.FindName("ManagementThiazideDiuretics");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementThiazideDiuretics.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr1 += "Thiazide Diuretics, ";
                            }
                            //ManagementOtherDiuretics                                                                                   
                            if (Form.FindName("ManagementOtherDiuretics") is FrameworkElement)
                            {
                                ListBox lstManagementOtherDiuretics = (ListBox)Form.FindName("ManagementOtherDiuretics");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherDiuretics.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr1 += "Other Diuretics, ";
                            }
                            //ManagementAntiHypertensives
                            if (Form.FindName("ManagementAntiHypertensives") is FrameworkElement)
                            {
                                ListBox lstManagementAntiHypertensives = (ListBox)Form.FindName("ManagementAntiHypertensives");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAntiHypertensives.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr1 += "Anti Hypertensives, ";
                            }

                            //ManagementACEInhibitors
                            if (Form.FindName("ManagementACEInhibitors") is FrameworkElement)
                            {
                                ListBox lstManagementACEInhibitors = (ListBox)Form.FindName("ManagementACEInhibitors");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementACEInhibitors.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr1 += "ACE Inhibitors, ";
                            }

                            //ManagementAngiotensinIIReceptorBlockers
                            if (Form.FindName("ManagementAngiotensinIIReceptorBlockers") is FrameworkElement)
                            {
                                ListBox lstManagementAngiotensinIIReceptorBlockers = (ListBox)Form.FindName("ManagementAngiotensinIIReceptorBlockers");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAngiotensinIIReceptorBlockers.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr1 += "Angiotensin II Receptor Blockers, ";
                            }

                            //ManagementOtherCalciumChannelBlockers
                            if (Form.FindName("ManagementOtherCalciumChannelBlockers") is FrameworkElement)
                            {
                                ListBox lstManagementOtherCalciumChannelBlockers = (ListBox)Form.FindName("ManagementOtherCalciumChannelBlockers");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherCalciumChannelBlockers.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp6 = true;
                                        break;
                                    }
                                }
                                if (temp6 == false)
                                    tempStr1 += "Other Calcium Channel Blockers, ";
                            }

                            //ManagementOthers
                            if (Form.FindName("ManagementOthers") is FrameworkElement)
                            {
                                ListBox lstbxManagementOthers = (ListBox)Form.FindName("ManagementOthers");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOthers.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp7 = true;
                                        break;
                                    }
                                }
                                if (temp7 == false)
                                    tempStr1 += "Others, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false && temp6 == false && temp7 == false)
                            {
                                variance.Variance4 = "Medication protocol non adherence flag";
                                variance.ListVariance4 = tempStr1;
                            }
                            else
                            {
                                variance.ListVariance4 = "";
                            }
                        }
                    }
                    #endregion
                    #endregion

                    #region Calculation for Variance5

                    // 5.	Unwarranted drug prescription flag

                    tempflag = false;
                    tempStr1 = "";
                    temp1 = false;
                    temp2 = false;
                    temp3 = false;
                    temp4 = false;
                    temp5 = false;
                    temp6 = false;
                    temp7 = false;

                    if (Form.FindName("PDPrehypertension") is FrameworkElement)
                    {
                        CheckBox chkPDPrehypertension = (CheckBox)Form.FindName("PDPrehypertension");
                        if (chkPDPrehypertension.IsChecked == true)
                        {
                            //ManagementThiazideDiuretics                                                                                   
                            if (Form.FindName("ManagementThiazideDiuretics") is FrameworkElement)
                            {
                                ListBox lstManagementThiazideDiuretics = (ListBox)Form.FindName("ManagementThiazideDiuretics");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementThiazideDiuretics.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        tempStr1 += "Thiazide Diuretics, ";
                                        break;
                                    }
                                }
                            }
                            //ManagementOtherDiuretics                                                                                   
                            if (Form.FindName("ManagementOtherDiuretics") is FrameworkElement)
                            {
                                ListBox lstManagementOtherDiuretics = (ListBox)Form.FindName("ManagementOtherDiuretics");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherDiuretics.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        tempStr1 += "Other Diuretics, ";
                                        break;
                                    }
                                }
                            }
                            //ManagementAntiHypertensives
                            if (Form.FindName("ManagementAntiHypertensives") is FrameworkElement)
                            {
                                ListBox lstManagementAntiHypertensives = (ListBox)Form.FindName("ManagementAntiHypertensives");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAntiHypertensives.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        tempStr1 += "Anti Hypertensives, ";
                                        break;
                                    }
                                }
                            }

                            //ManagementACEInhibitors
                            if (Form.FindName("ManagementACEInhibitors") is FrameworkElement)
                            {
                                ListBox lstManagementACEInhibitors = (ListBox)Form.FindName("ManagementACEInhibitors");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementACEInhibitors.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        tempStr1 += "ACE Inhibitors, ";
                                        break;
                                    }
                                }
                            }

                            //ManagementAngiotensinIIReceptorBlockers
                            if (Form.FindName("ManagementAngiotensinIIReceptorBlockers") is FrameworkElement)
                            {
                                ListBox lstManagementAngiotensinIIReceptorBlockers = (ListBox)Form.FindName("ManagementAngiotensinIIReceptorBlockers");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAngiotensinIIReceptorBlockers.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp5 = true;
                                        tempStr1 += "Angiotensin II Receptor Blockers, ";
                                        break;
                                    }
                                }
                            }

                            //ManagementOtherCalciumChannelBlockers
                            if (Form.FindName("ManagementOtherCalciumChannelBlockers") is FrameworkElement)
                            {
                                ListBox lstManagementOtherCalciumChannelBlockers = (ListBox)Form.FindName("ManagementOtherCalciumChannelBlockers");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherCalciumChannelBlockers.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp6 = true;
                                        tempStr1 += "Other Calcium Channel Blockers, ";
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    //ManagementOthers
                    if (Form.FindName("ManagementOthers") is FrameworkElement)
                    {
                        ListBox lstbxManagementOthers = (ListBox)Form.FindName("ManagementOthers");

                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOthers.DataContext).Settings);
                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                        {
                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                            {
                                temp7 = true;
                                tempStr1 += "Others, ";
                                break;
                            }
                        }
                    }

                    if (temp1 == true || temp2 == true || temp3 == true || temp4 == true || temp5 == true || temp6 == true || temp7 == true)
                    {
                        variance.Variance5 = "Unwarranted drug prescription flag";
                        variance.ListVariance5 = tempStr1;
                    }
                    #endregion
                }
                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 6)
                {
                    #region Calculation for Variance1 Version1
                    // 1. Standard investigations non compliance flag

                    bool tempflag = false;

                    if (Form.FindName("HistBloodStoolYes") is FrameworkElement && Form.FindName("GEPallor") is FrameworkElement)
                    {
                        RadioButton rdHistBloodStoolYes = (RadioButton)Form.FindName("HistBloodStoolYes");
                        CheckBox rdGEPallor = (CheckBox)Form.FindName("GEPallor");
                        if (rdHistBloodStoolYes.IsChecked == true || rdGEPallor.IsChecked == true)
                        {
                            //InvestLabs-Complete Blood Count (CBC)
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Complete Blood Count (CBC)" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Complete Blood Count (CBC),";
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (Form.FindName("PDDuodenalUlcer") is FrameworkElement && Form.FindName("PDPepticUlcer") is FrameworkElement && Form.FindName("PDGastricUlcers") is FrameworkElement)
                    {
                        CheckBox chkPDDuodenalUlcer = (CheckBox)Form.FindName("PDDuodenalUlcer");
                        CheckBox chkPDPepticUlcer = (CheckBox)Form.FindName("PDPepticUlcer");
                        CheckBox chkPDGastricUlcers = (CheckBox)Form.FindName("PDGastricUlcers");
                        if (chkPDDuodenalUlcer.IsChecked == true || chkPDPepticUlcer.IsChecked == true || chkPDGastricUlcers.IsChecked == true)
                        {
                            //InvestRadiology-Upper GI Ultrasound,USG abdomen 
                            if (Form.FindName("InvestRadiology") is FrameworkElement)
                            {
                                ListBox lstInvestRadiology = (ListBox)Form.FindName("InvestRadiology");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Upper GI Ultrasound" && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "Upper GI Ultrasound,";
                                        }
                                        if (a.Description == "USG abdomen " && a.Status == false)
                                        {
                                            tempflag = true;
                                            variance.ListVariance1 += "USG abdomen,";
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance1 = "Standard investigations non compliance flag";
                    }
                    #endregion

                    #region Calculation for Variance2 Version1
                    // 2. Additional investigations ordered flag

                    tempflag = false;

                    if (Form.FindName("PDDrugInducedGastritis") is FrameworkElement)
                    {
                        CheckBox chkPDDrugInducedGastritis = (CheckBox)Form.FindName("PDDrugInducedGastritis");
                        if (chkPDDrugInducedGastritis.IsChecked == true)
                        {
                            //InvestLabs
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestRadiology
                            if (Form.FindName("InvestRadiology") is FrameworkElement)
                            {
                                ListBox lstInvestRadiology = (ListBox)Form.FindName("InvestRadiology");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestSerologytest
                            if (Form.FindName("InvestSerologytest") is FrameworkElement)
                            {
                                CheckBox chkInvestSerologytest = (CheckBox)Form.FindName("InvestSerologytest");
                                if (chkInvestSerologytest.IsChecked == true)
                                {
                                    tempflag = true;
                                    variance.ListVariance2 += "Serology test";
                                }
                            }
                            //InvestOtherinvestigations
                            if (Form.FindName("InvestOtherinvestigations") is TextBox && ((TextBox)Form.FindName("InvestOtherinvestigations")).Text != null && ((TextBox)Form.FindName("InvestOtherinvestigations")).Text != "")
                            {
                                tempflag = true;
                                variance.ListVariance2 += ((TextBox)Form.FindName("Other Investigations")).Text;
                            }
                        }

                        if (tempflag == true)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                        }
                    }
                    #endregion

                    #region Calculation for Variance3

                    tempflag = false;
                    if ((FrameworkElement)Form.FindName("RMToHospital") != null && ((ComboBox)Form.FindName("RMToHospital")).SelectedItem == null)
                    {
                        //AlarmAge55yearsWithNewOnsetSymptoms
                        if (Form.FindName("AlarmAge55yearsWithNewOnsetSymptoms") is FrameworkElement)
                        {
                            CheckBox chkAlarmAge55yearsWithNewOnsetSymptoms = (CheckBox)Form.FindName("AlarmAge55yearsWithNewOnsetSymptoms");
                            if (chkAlarmAge55yearsWithNewOnsetSymptoms.IsChecked == true && chkAlarmAge55yearsWithNewOnsetSymptoms.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Age > 55 years With New On set Symptoms, ";
                            }
                        }
                        //AlarmGastrointestinalBleedingVomitingStools
                        if (Form.FindName("AlarmGastrointestinalBleedingVomitingStools") is FrameworkElement)
                        {
                            CheckBox chkAlarmGastrointestinalBleedingVomitingStools = (CheckBox)Form.FindName("AlarmGastrointestinalBleedingVomitingStools");
                            if (chkAlarmGastrointestinalBleedingVomitingStools.IsChecked == true && chkAlarmGastrointestinalBleedingVomitingStools.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Gastrointestinal Bleeding Vomiting Stools, ";
                            }
                        }
                        //AlarmUnexplainedWeightLoss3kg
                        if (Form.FindName("AlarmUnexplainedWeightLoss3kg") is FrameworkElement)
                        {
                            CheckBox chkAlarmUnexplainedWeightLoss3kg = (CheckBox)Form.FindName("AlarmUnexplainedWeightLoss3kg");
                            if (chkAlarmUnexplainedWeightLoss3kg.IsChecked == true && chkAlarmUnexplainedWeightLoss3kg.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Unexplained Weight Loss > 3kg, ";
                            }
                        }
                        //AlarmProgressiveDysphagiaOrPersistentPainfulSwallowing
                        if (Form.FindName("AlarmProgressiveDysphagiaOrPersistentPainfulSwallowing") is FrameworkElement)
                        {
                            CheckBox chkAlarmProgressiveDysphagiaOrPersistentPainfulSwallowing = (CheckBox)Form.FindName("AlarmProgressiveDysphagiaOrPersistentPainfulSwallowing");
                            if (chkAlarmProgressiveDysphagiaOrPersistentPainfulSwallowing.IsChecked == true && chkAlarmProgressiveDysphagiaOrPersistentPainfulSwallowing.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Progressive Dysphagia Or Persistent Painful Swallowing, ";
                            }
                        }
                        //AlarmPersistentVomiting
                        if (Form.FindName("AlarmPersistentVomiting") is FrameworkElement)
                        {
                            CheckBox chkAlarmPersistentVomiting = (CheckBox)Form.FindName("AlarmPersistentVomiting");
                            if (chkAlarmPersistentVomiting.IsChecked == true && chkAlarmPersistentVomiting.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Persistent Vomiting, ";
                            }
                        }
                        //AlarmSignsOfAnemiaPallor
                        if (Form.FindName("AlarmSignsOfAnemiaPallor") is FrameworkElement)
                        {
                            CheckBox chkAlarmSignsOfAnemiaPallor = (CheckBox)Form.FindName("AlarmSignsOfAnemiaPallor");
                            if (chkAlarmSignsOfAnemiaPallor.IsChecked == true && chkAlarmSignsOfAnemiaPallor.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Signs Of Anemia (Pallor), ";
                            }
                        }
                        //AlarmPalpableMassLymphadenopathy
                        if (Form.FindName("AlarmPalpableMassLymphadenopathy") is FrameworkElement)
                        {
                            CheckBox chkAlarmPalpableMassLymphadenopathy = (CheckBox)Form.FindName("AlarmPalpableMassLymphadenopathy");
                            if (chkAlarmPalpableMassLymphadenopathy.IsChecked == true && chkAlarmPalpableMassLymphadenopathy.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Palpable Mass Lymphadenopathy, ";
                            }
                        }
                        //AlarmJaundice
                        if (Form.FindName("AlarmJaundice") is FrameworkElement)
                        {
                            CheckBox chkAlarmJaundice = (CheckBox)Form.FindName("AlarmJaundice");
                            if (chkAlarmJaundice.IsChecked == true && chkAlarmJaundice.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Jaundice, ";
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance3 = "Referral not made flag";
                    }
                    #endregion

                    #region Calculation for Variance4

                    // 4.	Medication protocol non adherence flag

                    tempflag = false;
                    string tempStr1 = "";
                    bool temp1 = false;
                    bool temp2 = false;
                    bool temp3 = false;
                    bool temp4 = false;
                    bool temp5 = false;
                    #region 1
                    if (Form.FindName("PDHelicobacterPyloriInfection") is FrameworkElement)
                    {
                        CheckBox chkPDHelicobacterPyloriInfection = (CheckBox)Form.FindName("PDHelicobacterPyloriInfection");
                        if (chkPDHelicobacterPyloriInfection.IsChecked == true)
                        {
                            //ManagementMetronidazoleClarithromycin                                                                                   
                            if (Form.FindName("ManagementMetronidazoleClarithromycin") is FrameworkElement)
                            {
                                ListBox lstManagementMetronidazoleClarithromycin = (ListBox)Form.FindName("ManagementMetronidazoleClarithromycin");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementMetronidazoleClarithromycin.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr1 += "Metronidazole Clarithromycin, ";
                            }
                            //ManagementAmoxicillinClarithromycin                                                                                   
                            if (Form.FindName("ManagementAmoxicillinClarithromycin") is FrameworkElement)
                            {
                                ListBox lstManagementAmoxicillinClarithromycin = (ListBox)Form.FindName("ManagementAmoxicillinClarithromycin");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementAmoxicillinClarithromycin.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr1 += "Amoxicillin Clarithromycin, ";
                            }
                            //ManagementClarithromycinAmoxicillinOmeprazolekit
                            if (Form.FindName("ManagementClarithromycinAmoxicillinOmeprazolekit") is FrameworkElement)
                            {
                                ListBox lstManagementClarithromycinAmoxicillinOmeprazolekit = (ListBox)Form.FindName("ManagementClarithromycinAmoxicillinOmeprazolekit");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementClarithromycinAmoxicillinOmeprazolekit.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr1 += "Clarithromycin Amoxicillin Omeprazole kit, ";
                            }

                            //ManagementOmeprazoleClarithromycinTinidazolekit
                            if (Form.FindName("ManagementOmeprazoleClarithromycinTinidazolekit") is FrameworkElement)
                            {
                                ListBox lstManagementOmeprazoleClarithromycinTinidazolekit = (ListBox)Form.FindName("ManagementOmeprazoleClarithromycinTinidazolekit");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOmeprazoleClarithromycinTinidazolekit.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr1 += "Omeprazole Clarithromycin Tinidazole kit, ";
                            }

                            //ManagementOtherAntibiotics
                            if (Form.FindName("ManagementOtherAntibiotics") is FrameworkElement)
                            {
                                ListBox lstbxManagementOtherAntibiotics = (ListBox)Form.FindName("ManagementOtherAntibiotics");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherAntibiotics.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr1 += "Other Antibiotics, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false)
                            {
                                variance.Variance4 = "Medication protocol non adherence flag";
                                variance.ListVariance4 = tempStr1;
                            }
                            else
                            {
                                variance.ListVariance4 = "";
                            }
                        }
                    }
                    #endregion
                    #endregion

                    #region Calculation for Variance5

                    // 5.	Unwarranted drug prescription flag

                    //ManagementOtherDrugs
                    if (Form.FindName("ManagementOtherDrugs") is FrameworkElement)
                    {
                        ListBox lstbxManagementOtherDrugs = (ListBox)Form.FindName("ManagementOtherDrugs");

                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherDrugs.DataContext).Settings);
                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                        {
                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                            {
                                variance.Variance5 = "Unwarranted drug prescription flag";
                                variance.ListVariance5 = "Other Drugs";
                                break;
                            }
                        }
                    }
                    #endregion
                }
                else if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 7)
                {
                    #region Calculation for Variance1 Version1
                    // 1. Standard investigations non compliance flag

                    bool tempflag = false;
                    bool temp1 = false;
                    bool temp2 = false;
                    string tempStr1 = "";

                    if (Form.FindName("PDPersistentDiarrhea") is FrameworkElement && Form.FindName("PDDysentry") is FrameworkElement)
                    {
                        CheckBox chkPDPersistentDiarrhea = (CheckBox)Form.FindName("PDPersistentDiarrhea");
                        CheckBox chkPDDysentry = (CheckBox)Form.FindName("PDDysentry");
                        if (chkPDPersistentDiarrhea.IsChecked == true || chkPDDysentry.IsChecked == true)
                        {
                            //InvestLabs-Stool Culture and sensitivity,Stool Examination
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Stool Culture and sensitivity" && a.Status == false)
                                        {
                                            temp1 = true;
                                            tempStr1 += "Stool Culture and sensitivity,";
                                        }
                                        if (a.Description == "Stool Examination" && a.Status == false)
                                        {
                                            temp2 = true;
                                            tempStr1 += "Stool Examination,";
                                        }
                                    }
                                    if (temp1 == true && temp2 == true)
                                    {
                                        tempflag = true;
                                    }
                                    else
                                    {
                                        tempStr1 = "";
                                    }
                                }
                            }
                        }
                    }

                    if (Form.FindName("HistBloodInStoolsYes") is FrameworkElement && Form.FindName("GEPallor") is FrameworkElement)
                    {
                        RadioButton chkHistBloodInStoolsYes = (RadioButton)Form.FindName("HistBloodInStoolsYes");
                        CheckBox chkGEPallor = (CheckBox)Form.FindName("GEPallor");
                        if (chkHistBloodInStoolsYes.IsChecked == true || chkGEPallor.IsChecked == true)
                        {
                            //InvestLabs-Complete Blood Count (CBC)
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Complete Blood Count (CBC)" && a.Status == false)
                                        {
                                            tempflag = true;
                                            tempStr1 += "Complete Blood Count (CBC),";
                                        }
                                    }
                                }
                            }
                        }
                    }

                    temp1 = false;
                    temp2 = false;
                    string tempStr2 = "";
                    if (Form.FindName("PresBloodStool") is FrameworkElement)
                    {
                        CheckBox chkPresBloodStool = (CheckBox)Form.FindName("PresBloodStool");
                        if (chkPresBloodStool.IsChecked == true)
                        {
                            //InvestLabs-Stool for Occult Blood,Stool Examination
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Description == "Stool for Occult Blood" && a.Status == false)
                                        {
                                            temp1 = true;
                                            tempStr2 += "Stool for Occult Blood,";
                                        }
                                        if (a.Description == "Stool Examination" && a.Status == false)
                                        {
                                            temp2 = true;
                                            tempStr2 += "Stool Examination,";
                                        }
                                    }
                                    if (temp1 == true && temp2 == true)
                                    {
                                        tempflag = true;
                                    }
                                    else
                                    {
                                        tempStr2 = "";
                                    }
                                }
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance1 = "Standard investigations non compliance flag";
                        variance.ListVariance1 = tempStr1 + tempStr2;
                    }
                    #endregion

                    #region Calculation for Variance2 Version1
                    // 2. Additional investigations ordered flag

                    tempflag = false;

                    if (Form.FindName("PDDysentry") is FrameworkElement && Form.FindName("PDAcuteWateryDiarrhea") is FrameworkElement)
                    {
                        CheckBox chkPDDysentry = (CheckBox)Form.FindName("PDDysentry");
                        CheckBox chkPDAcuteWateryDiarrhea = (CheckBox)Form.FindName("PDAcuteWateryDiarrhea");
                        if (chkPDDysentry.IsChecked == true || chkPDAcuteWateryDiarrhea.IsChecked == true)
                        {
                            //InvestLabs
                            if (Form.FindName("InvestLabs") is FrameworkElement)
                            {
                                ListBox lstInvestLabs = (ListBox)Form.FindName("InvestLabs");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestLabs.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestOvaParasiteTest
                            if (Form.FindName("InvestOvaParasiteTest") is FrameworkElement)
                            {
                                ListBox lstInvestOvaParasiteTest = (ListBox)Form.FindName("InvestOvaParasiteTest");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestOvaParasiteTest.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestOvaParasiteTest.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestClinitestOrBenedictsTest
                            if (Form.FindName("InvestClinitestOrBenedictsTest") is FrameworkElement)
                            {
                                ListBox lstInvestClinitestOrBenedictsTest = (ListBox)Form.FindName("InvestClinitestOrBenedictsTest");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestClinitestOrBenedictsTest.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestClinitestOrBenedictsTest.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestStoolExamForPhenolphthaleinAndMagnesiumSulphate
                            if (Form.FindName("InvestStoolExamForPhenolphthaleinAndMagnesiumSulphate") is FrameworkElement)
                            {
                                ListBox lstInvestStoolExamForPhenolphthaleinAndMagnesiumSulphate = (ListBox)Form.FindName("InvestStoolExamForPhenolphthaleinAndMagnesiumSulphate");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestStoolExamForPhenolphthaleinAndMagnesiumSulphate.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestStoolExamForPhenolphthaleinAndMagnesiumSulphate.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestRadiology
                            if (Form.FindName("InvestRadiology") is FrameworkElement)
                            {
                                ListBox lstInvestRadiology = (ListBox)Form.FindName("InvestRadiology");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestRadiology.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestSmallBowelBiopsy
                            if (Form.FindName("InvestSmallBowelBiopsy") is FrameworkElement)
                            {
                                ListBox lstInvestSmallBowelBiopsy = (ListBox)Form.FindName("InvestSmallBowelBiopsy");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestSmallBowelBiopsy.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestSmallBowelBiopsy.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestSigmoidoscopyOrColonoscopyWithBiopsies
                            if (Form.FindName("InvestSigmoidoscopyOrColonoscopyWithBiopsies") is FrameworkElement)
                            {
                                ListBox lstInvestSigmoidoscopyOrColonoscopyWithBiopsies = (ListBox)Form.FindName("InvestSigmoidoscopyOrColonoscopyWithBiopsies");
                                if (((InvestigationFieldSetting)((FieldDetail)lstInvestSigmoidoscopyOrColonoscopyWithBiopsies.Tag).Settings).ItemSource != null)
                                {
                                    foreach (var a in ((InvestigationFieldSetting)((FieldDetail)lstInvestSigmoidoscopyOrColonoscopyWithBiopsies.Tag).Settings).ItemSource)
                                    {
                                        if (a.Status == true)
                                        {
                                            tempflag = true;
                                            variance.ListVariance2 += a.Description.ToString() + ",";
                                        }
                                    }
                                }
                            }
                            //InvestOtherTests
                            if (Form.FindName("InvestOtherTests") is TextBox && ((TextBox)Form.FindName("InvestOtherTests")).Text != null && ((TextBox)Form.FindName("InvestOtherTests")).Text != "")
                            {
                                tempflag = true;
                                variance.ListVariance2 += ((TextBox)Form.FindName("Other Tests")).Text;
                            }
                        }

                        if (tempflag == true)
                        {
                            variance.Variance2 = "Additional investigations ordered flag";
                        }
                    }
                    #endregion

                    #region Calculation for Variance3

                    tempflag = false;
                    if ((FrameworkElement)Form.FindName("RMToHospital") != null && ((ComboBox)Form.FindName("RMToHospital")).SelectedItem == null)
                    {
                        //AlarmDiarrheaFever
                        if (Form.FindName("AlarmDiarrheaFever") is FrameworkElement)
                        {
                            CheckBox chkAlarmDiarrheaFever = (CheckBox)Form.FindName("AlarmDiarrheaFever");
                            if (chkAlarmDiarrheaFever.IsChecked == true && chkAlarmDiarrheaFever.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Diarrhea accompanied with fever above 102.2 F, ";
                            }
                        }
                        //AlarmAbdominalDistension
                        if (Form.FindName("AlarmAbdominalDistension") is FrameworkElement)
                        {
                            CheckBox chkAlarmAbdominalDistension = (CheckBox)Form.FindName("AlarmAbdominalDistension");
                            if (chkAlarmAbdominalDistension.IsChecked == true && chkAlarmAbdominalDistension.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Abdominal distension, ";
                            }
                        }
                        //AlarmProlongedSymptomsOfDiarrhea14Days
                        if (Form.FindName("AlarmProlongedSymptomsOfDiarrhea14Days") is FrameworkElement)
                        {
                            CheckBox chkAlarmProlongedSymptomsOfDiarrhea14Days = (CheckBox)Form.FindName("AlarmProlongedSymptomsOfDiarrhea14Days");
                            if (chkAlarmProlongedSymptomsOfDiarrhea14Days.IsChecked == true && chkAlarmProlongedSymptomsOfDiarrhea14Days.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Prolonged symptoms of diarrhea(>14 days), ";
                            }
                        }
                        //AlarmPersistentVomiting
                        if (Form.FindName("AlarmPersistentVomiting") is FrameworkElement)
                        {
                            CheckBox chkAlarmPersistentVomiting = (CheckBox)Form.FindName("AlarmPersistentVomiting");
                            if (chkAlarmPersistentVomiting.IsChecked == true && chkAlarmPersistentVomiting.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Persistent vomiting, ";
                            }
                        }
                        //AlarmPassingOfBlackTarryStool
                        if (Form.FindName("AlarmPassingOfBlackTarryStool") is FrameworkElement)
                        {
                            CheckBox chkAlarmPassingOfBlackTarryStool = (CheckBox)Form.FindName("AlarmPassingOfBlackTarryStool");
                            if (chkAlarmPassingOfBlackTarryStool.IsChecked == true && chkAlarmPassingOfBlackTarryStool.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Passing of black tarry stool, ";
                            }
                        }
                        //AlarmSevereDehydration
                        if (Form.FindName("AlarmSevereDehydration") is FrameworkElement)
                        {
                            CheckBox chkAlarmSevereDehydration = (CheckBox)Form.FindName("AlarmSevereDehydration");
                            if (chkAlarmSevereDehydration.IsChecked == true && chkAlarmSevereDehydration.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Severe dehydration, ";
                            }
                        }
                        //AlarmSeverePainInTheAbdomenOrRectum
                        if (Form.FindName("AlarmSeverePainInTheAbdomenOrRectum") is FrameworkElement)
                        {
                            CheckBox chkAlarmSeverePainInTheAbdomenOrRectum = (CheckBox)Form.FindName("AlarmSeverePainInTheAbdomenOrRectum");
                            if (chkAlarmSeverePainInTheAbdomenOrRectum.IsChecked == true && chkAlarmSeverePainInTheAbdomenOrRectum.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Severe pain in the abdomen or rectum, ";
                            }
                        }
                        //AlarmDiarrheaWithSevereAbdominalPain
                        if (Form.FindName("AlarmDiarrheaWithSevereAbdominalPain") is FrameworkElement)
                        {
                            CheckBox chkAlarmDiarrheaWithSevereAbdominalPain = (CheckBox)Form.FindName("AlarmDiarrheaWithSevereAbdominalPain");
                            if (chkAlarmDiarrheaWithSevereAbdominalPain.IsChecked == true && chkAlarmDiarrheaWithSevereAbdominalPain.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Diarrhea with severe abdominal pain, ";
                            }
                        }
                        //AlarmDrowsinessOrListlessness
                        if (Form.FindName("AlarmDrowsinessOrListlessness") is FrameworkElement)
                        {
                            CheckBox chkAlarmDrowsinessOrListlessness = (CheckBox)Form.FindName("AlarmDrowsinessOrListlessness");
                            if (chkAlarmDrowsinessOrListlessness.IsChecked == true && chkAlarmDrowsinessOrListlessness.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Drowsiness or listlessness, ";
                            }
                        }
                        //AlarmConvulsionsOrLossOfConsciousness
                        if (Form.FindName("AlarmConvulsionsOrLossOfConsciousness") is FrameworkElement)
                        {
                            CheckBox chkAlarmConvulsionsOrLossOfConsciousness = (CheckBox)Form.FindName("AlarmConvulsionsOrLossOfConsciousness");
                            if (chkAlarmConvulsionsOrLossOfConsciousness.IsChecked == true && chkAlarmConvulsionsOrLossOfConsciousness.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Convulsions or loss of consciousness, ";
                            }
                        }
                        //AlarmInabilityToAdministerOralRehydrationTherapy
                        if (Form.FindName("AlarmInabilityToAdministerOralRehydrationTherapy") is FrameworkElement)
                        {
                            CheckBox chkAlarmInabilityToAdministerOralRehydrationTherapy = (CheckBox)Form.FindName("AlarmInabilityToAdministerOralRehydrationTherapy");
                            if (chkAlarmInabilityToAdministerOralRehydrationTherapy.IsChecked == true && chkAlarmInabilityToAdministerOralRehydrationTherapy.Visibility == Visibility.Visible)
                            {
                                tempflag = true;
                                variance.ListVariance3 += "Inability to administer oral rehydration therapy";
                            }
                        }
                    }

                    if (tempflag == true)
                    {
                        variance.Variance3 = "Referral not made flag";
                    }
                    #endregion

                    #region Calculation for Variance4

                    // 4.	Medication protocol non adherence flag

                    tempflag = false;
                    tempStr1 = "";
                    temp1 = false;
                    temp2 = false;
                    bool temp3 = false;
                    bool temp4 = false;
                    bool temp5 = false;
                    #region 1
                    if (Form.FindName("PDDysentry") is FrameworkElement)
                    {
                        CheckBox chkPDDysentry = (CheckBox)Form.FindName("PDDysentry");
                        if (chkPDDysentry.IsChecked == true)
                        {
                            //ManagementLactobacillus                                                                                   
                            if (Form.FindName("ManagementLactobacillus") is FrameworkElement)
                            {
                                ListBox lstManagementLactobacillus = (ListBox)Form.FindName("ManagementLactobacillus");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementLactobacillus.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        break;
                                    }
                                }
                                if (temp1 == false)
                                    tempStr1 += "Lactobacillus, ";
                            }
                            //ManagementOtherAntidiarrheals                                                                                   
                            if (Form.FindName("ManagementOtherAntidiarrheals") is FrameworkElement)
                            {
                                ListBox lstManagementOtherAntidiarrheals = (ListBox)Form.FindName("ManagementOtherAntidiarrheals");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementOtherAntidiarrheals.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        break;
                                    }
                                }
                                if (temp2 == false)
                                    tempStr1 += "Other Antidiarrheals, ";
                            }
                            //ManagementQuinolones
                            if (Form.FindName("ManagementQuinolones") is FrameworkElement)
                            {
                                ListBox lstManagementQuinolones = (ListBox)Form.FindName("ManagementQuinolones");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementQuinolones.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp3 = true;
                                        break;
                                    }
                                }
                                if (temp3 == false)
                                    tempStr1 += "Quinolones, ";
                            }

                            //ManagementTetracyclines
                            if (Form.FindName("ManagementTetracyclines") is FrameworkElement)
                            {
                                ListBox lstManagementTetracyclines = (ListBox)Form.FindName("ManagementTetracyclines");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementTetracyclines.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp4 = true;
                                        break;
                                    }
                                }
                                if (temp4 == false)
                                    tempStr1 += "Tetracyclines, ";
                            }

                            //ManagementOtherAntibiotics
                            if (Form.FindName("ManagementOtherAntibiotics") is FrameworkElement)
                            {
                                ListBox lstbxManagementOtherAntibiotics = (ListBox)Form.FindName("ManagementOtherAntibiotics");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherAntibiotics.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp5 = true;
                                        break;
                                    }
                                }
                                if (temp5 == false)
                                    tempStr1 += "Other Antibiotics, ";
                            }

                            if (temp1 == false && temp2 == false && temp3 == false && temp4 == false && temp5 == false)
                            {
                                variance.Variance4 = "Medication protocol non adherence flag";
                                variance.ListVariance4 = tempStr1;
                            }
                            else
                            {
                                variance.ListVariance4 = "";
                            }
                        }
                    }
                    #endregion
                    #endregion

                    #region Calculation for Variance5

                    // 5.	Unwarranted drug prescription flag

                    tempflag = false;
                    tempStr1 = "";
                    temp1 = false;
                    temp2 = false;
                    temp3 = false;
                    temp4 = false;


                    if (Form.FindName("PDAcuteWateryDiarrhea") is FrameworkElement)
                    {
                        CheckBox chkPDAcuteWateryDiarrhea = (CheckBox)Form.FindName("PDAcuteWateryDiarrhea");
                        if (chkPDAcuteWateryDiarrhea.IsChecked == true)
                        {
                            //ManagementQuinolones                                                                                   
                            if (Form.FindName("ManagementQuinolones") is FrameworkElement)
                            {
                                ListBox lstManagementQuinolones = (ListBox)Form.FindName("ManagementQuinolones");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementQuinolones.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp1 = true;
                                        tempStr1 += "Quinolones, ";
                                        break;
                                    }
                                }
                            }
                            //ManagementTetracyclines                                                                                   
                            if (Form.FindName("ManagementTetracyclines") is FrameworkElement)
                            {
                                ListBox lstManagementTetracyclines = (ListBox)Form.FindName("ManagementTetracyclines");

                                MedicationFieldSetting medSetting = ((MedicationFieldSetting)((FieldDetail)lstManagementTetracyclines.DataContext).Settings);
                                for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                {
                                    if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                    {
                                        temp2 = true;
                                        tempStr1 += "Tetracyclines, ";
                                        break;
                                    }
                                }
                            }
                            //ManagementOtherAntibiotics
                            if (Form.FindName("ManagementOtherAntibiotics") is FrameworkElement)
                            {
                                ListBox lstbxManagementOtherAntibiotics = (ListBox)Form.FindName("ManagementOtherAntibiotics");

                                OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherAntibiotics.DataContext).Settings);
                                for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                {
                                    if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                                    {
                                        temp3 = true;
                                        tempStr1 += "Others Antibiotics, ";
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    //ManagementOtherDrugs
                    if (Form.FindName("ManagementOtherDrugs") is FrameworkElement)
                    {
                        ListBox lstbxManagementOtherDrugs = (ListBox)Form.FindName("ManagementOtherDrugs");

                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)((FieldDetail)lstbxManagementOtherDrugs.DataContext).Settings);
                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                        {
                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null && ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != "")
                            {
                                temp4 = true;
                                tempStr1 += "Other Drugs";
                                break;
                            }
                        }
                    }

                    if (temp1 == true || temp2 == true || temp3 == true || temp4 == true)
                    {
                        variance.Variance5 = "Unwarranted drug prescription flag";
                        variance.ListVariance5 = tempStr1;
                    }
                    #endregion
                }
            }
        }

        private string IsMandatorySet()
        {
            string listofMandatoryFields = "";

            int i = 1;

            #region Calculation of Mandatory Fields which are not filled

            if ((clsEMRTemplateVO)cmbComplaint.SelectedItem != null)
            {
                #region old
                //if (((clsEMRTemplateVO)cmbComplaint.SelectedItem).TemplateID == 2)
                //{
                //    if ((TextBox)Form.FindName("Temprature") != null && (((TextBox)Form.FindName("Temprature")).Text == null || ((TextBox)Form.FindName("Temprature")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Temprature\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("Pulse") != null && (((TextBox)Form.FindName("Pulse")).Text == null || ((TextBox)Form.FindName("Pulse")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Pulse\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("Respiratory") != null && (((TextBox)Form.FindName("Respiratory")).Text == null || ((TextBox)Form.FindName("Respiratory")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Respiratory\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("Diastolic") != null && (((TextBox)Form.FindName("Diastolic")).Text == null || ((TextBox)Form.FindName("Diastolic")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Diastolic BP\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("Systolic") != null && (((TextBox)Form.FindName("Systolic")).Text == null || ((TextBox)Form.FindName("Systolic")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Systolic BP\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("Weight") != null && (((TextBox)Form.FindName("Weight")).Text == null || ((TextBox)Form.FindName("Weight")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Weight\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("Height") != null && (((TextBox)Form.FindName("Height")).Text == null || ((TextBox)Form.FindName("Height")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". Height\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ComplaintReported") != null && (((TextBox)Form.FindName("ComplaintReported")).Text == null || ((TextBox)Form.FindName("ComplaintReported")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ComplaintReported\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("StoolDays") != null && (((TextBox)Form.FindName("StoolDays")).Text == null || ((TextBox)Form.FindName("StoolDays")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". StoolDays\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("StoolHours") != null && (((TextBox)Form.FindName("StoolHours")).Text == null || ((TextBox)Form.FindName("StoolHours")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". StoolHours\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("StoolFrequency") != null && (((TextBox)Form.FindName("StoolFrequency")).Text == null || ((TextBox)Form.FindName("StoolFrequency")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". StoolFrequency\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("VomitingFrequency") != null && (((TextBox)Form.FindName("VomitingFrequency")).Text == null || ((TextBox)Form.FindName("VomitingFrequency")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". VomitingFrequency\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("VomitingDuration") != null && (((TextBox)Form.FindName("VomitingDuration")).Text == null || ((TextBox)Form.FindName("VomitingDuration")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". VomitingDuration\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ColorConsistency") != null && (((TextBox)Form.FindName("ColorConsistency")).Text == null || ((TextBox)Form.FindName("ColorConsistency")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ColorConsistency\r";
                //        i++;
                //    }

                //    if ((ComboBox)Form.FindName("UrineOutput") != null && ((ComboBox)Form.FindName("UrineOutput")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". UrineOutput\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("GeneralCondition") != null && ((ComboBox)Form.FindName("GeneralCondition")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". GeneralCondition\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("Eye") != null && ((ComboBox)Form.FindName("Eye")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". Eye\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("SkinColour") != null && ((ComboBox)Form.FindName("SkinColour")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". SkinColour\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("Thirst") != null && ((ComboBox)Form.FindName("Thirst")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". Thirst\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("SkinTurgor") != null && ((ComboBox)Form.FindName("SkinTurgor")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". SkinTurgor\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("PhysicalExaminationHydrationStatus") != null && ((ComboBox)Form.FindName("PhysicalExaminationHydrationStatus")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". PhysicalExaminationHydrationStatus\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("ProvisionalDiagnosis") != null && ((ComboBox)Form.FindName("ProvisionalDiagnosis")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". ProvisionalDiagnosis\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("ZincSupplementManagement") != null && ((ComboBox)Form.FindName("ZincSupplementManagement")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". ZincSupplementManagement\r";
                //        i++;
                //    }
                //    if ((ComboBox)Form.FindName("NutritionalAdvise") != null && ((ComboBox)Form.FindName("NutritionalAdvise")).SelectedItem == null)
                //    {
                //        listofMandatoryFields += i + ". NutritionalAdvise\r";
                //        i++;
                //    }


                //    if ((CheckBox)Form.FindName("EMObservationProtocol") != null && (bool)((CheckBox)Form.FindName("EMObservationProtocol")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMObservationProtocol\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMORSAdvice") != null && (bool)((CheckBox)Form.FindName("EMORSAdvice")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMORSAdvice\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMNutritionAdvice") != null && (bool)((CheckBox)Form.FindName("EMNutritionAdvice")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMNutritionAdvice\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMVisitClinic") != null && (bool)((CheckBox)Form.FindName("EMVisitClinic")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMVisitClinic\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMVisitHospital") != null && (bool)((CheckBox)Form.FindName("EMVisitHospital")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMVisitHospital\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMTestsConducted") != null && (bool)((CheckBox)Form.FindName("EMTestsConducted")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMTestsConducted\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMMedicationExplained") != null && (bool)((CheckBox)Form.FindName("EMMedicationExplained")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMMedicationExplained\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMFollowUpVisitDiscussed") != null && (bool)((CheckBox)Form.FindName("EMFollowUpVisitDiscussed")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMFollowUpVisitDiscussed\r";
                //        i++;
                //    }
                //    if ((CheckBox)Form.FindName("EMFollowUpScheduled") != null && (bool)((CheckBox)Form.FindName("EMFollowUpScheduled")).IsChecked == false)
                //    {
                //        listofMandatoryFields += i + ". EMFollowUpScheduled\r";
                //        i++;
                //    }

                //    if ((TextBox)Form.FindName("FollowUpProvisionalDiagnosis") != null && (((TextBox)Form.FindName("FollowUpProvisionalDiagnosis")).Text == null || ((TextBox)Form.FindName("FollowUpProvisionalDiagnosis")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". FollowUpProvisionalDiagnosis\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ROTemprature") != null && (((TextBox)Form.FindName("ROTemprature")).Text == null || ((TextBox)Form.FindName("ROTemprature")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ROTemprature\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ROPulse") != null && (((TextBox)Form.FindName("ROPulse")).Text == null || ((TextBox)Form.FindName("ROPulse")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ROPulse\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("RORespiratory") != null && (((TextBox)Form.FindName("RORespiratory")).Text == null || ((TextBox)Form.FindName("RORespiratory")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". RORespiratory\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ROSystolic") != null && (((TextBox)Form.FindName("ROSystolic")).Text == null || ((TextBox)Form.FindName("ROSystolic")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ROSystolic\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("RODiastolic") != null && (((TextBox)Form.FindName("RODiastolic")).Text == null || ((TextBox)Form.FindName("RODiastolic")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". RODiastolic\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ROWeight") != null && (((TextBox)Form.FindName("ROWeight")).Text == null || ((TextBox)Form.FindName("ROWeight")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ROWeight\r";
                //        i++;
                //    }
                //    if ((TextBox)Form.FindName("ROHeight") != null && (((TextBox)Form.FindName("ROHeight")).Text == null || ((TextBox)Form.FindName("ROHeight")).Text == ""))
                //    {
                //        listofMandatoryFields += i + ". ROHeight\r";
                //        i++;
                //    }
                //}
                #endregion
                if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null)
                {
                    foreach (var section in SelectedFormStructure.SectionList)
                    {
                        foreach (var item in section.FieldList)
                        {
                            if (item.IsRequired)
                            {
                                switch (item.DataType.Id)
                                {
                                    case 1:
                                        if (((TextFieldSetting)item.Settings).Value == null || ((TextFieldSetting)item.Settings).Value == "")
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 2:
                                        if (((BooleanFieldSetting)item.Settings).Value == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 3:
                                        if (((DateFieldSetting)item.Settings).Date == null)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 4:
                                        if (((ListFieldSetting)item.Settings).ChoiceMode == SelectionMode.Single)
                                        {
                                            if (((ListFieldSetting)item.Settings).SelectedItem == null)
                                            {
                                                listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                            }
                                        }
                                        else if (((ListFieldSetting)item.Settings).ChoiceMode == SelectionMode.Multiples)
                                        {
                                            if (((ListFieldSetting)item.Settings).SelectedItems != null)
                                            {
                                                if (((ListFieldSetting)item.Settings).SelectedItems.Count == 0)
                                                    listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                            }
                                        }
                                        break;
                                    case 5:
                                        if (((DecimalFieldSetting)item.Settings).Value == null || ((DecimalFieldSetting)item.Settings).Value == Convert.ToDecimal(0))
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 8:
                                        if (((ListFieldSetting)item.Settings).ChoiceMode == SelectionMode.Single)
                                        {
                                            if (((LookUpFieldSetting)item.Settings).SelectedItem == null)
                                            {
                                                listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                            }
                                        }
                                        break;
                                    case 9:
                                        bool tempformedication = false;
                                        MedicationFieldSetting medSetting = ((MedicationFieldSetting)item.Settings);
                                        for (int k = 0; k < medSetting.ItemsSource.Count; k++)
                                        {
                                            if (((Medication)medSetting.ItemsSource[k]).Drug != null)
                                            {
                                                tempformedication = true;
                                                break;
                                            }
                                        }
                                        if (tempformedication == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 11:
                                        bool tempForOtherInvest = false;
                                        OtherInvestigationFieldSetting InvestSetting = (OtherInvestigationFieldSetting)item.Settings;
                                        for (int k = 0; k < InvestSetting.ItemsSource.Count; k++)
                                        {
                                            if (((OtherInvestigation)InvestSetting.ItemsSource[k]).Investigation != null && ((OtherInvestigation)InvestSetting.ItemsSource[k]).Investigation != "--Select--")
                                            {
                                                tempForOtherInvest = true;
                                                break;
                                            }
                                        }
                                        if (tempForOtherInvest == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 12:
                                        bool tempForListCheckBox = false;
                                        ListOfCheckBoxesFieldSetting listSetting1 = (ListOfCheckBoxesFieldSetting)item.Settings;
                                        for (int k = 0; k < listSetting1.ItemsSource.Count; k++)
                                        {
                                            if (listSetting1.SelectedItems[k])
                                            {
                                                tempForListCheckBox = true;
                                                break;
                                            }
                                        }
                                        if (tempForListCheckBox == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 13:
                                        bool tempForAutomatedListBox = false;
                                        AutomatedListFieldSetting AutolistSetting = ((AutomatedListFieldSetting)item.Settings);
                                        switch (AutolistSetting.ControlType)
                                        {
                                            case AutoListControlType.ComboBox:
                                                if (AutolistSetting.SelectedItem != null)
                                                {
                                                    tempForAutomatedListBox = true;
                                                }
                                                break;
                                            case AutoListControlType.ListBox:
                                                switch (AutolistSetting.ChoiceMode)
                                                {
                                                    case SelectionMode.Single:
                                                        if (AutolistSetting.SelectedItem != null)
                                                        {
                                                            tempForAutomatedListBox = true;
                                                        }
                                                        break;
                                                    case SelectionMode.Multiples:
                                                        if (AutolistSetting.SelectedItems != null && AutolistSetting.SelectedItems.Count > 0)
                                                        {
                                                            tempForAutomatedListBox = true;
                                                        }
                                                        break;
                                                }
                                                break;
                                            case AutoListControlType.CheckListBox:
                                                for (int k = 0; k < AutolistSetting.ItemSource.Count; k++)
                                                {
                                                    if (((MasterListItem)AutolistSetting.ItemSource[k]).Status)
                                                    {
                                                        tempForAutomatedListBox = true;
                                                        break;
                                                    }
                                                }
                                                break;
                                        }
                                        if (tempForAutomatedListBox == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 14:
                                        bool tempForOtherMedication = false;
                                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)item.Settings);
                                        for (int k = 0; k < OthermedSetting.ItemsSource.Count; k++)
                                        {
                                            if (((OtherMedication)OthermedSetting.ItemsSource[k]).Drug != null)
                                            {
                                                tempForOtherMedication = true;
                                                break;
                                            }
                                        }
                                        if (tempForOtherMedication == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                    case 15:
                                        bool tempForInvest = false;
                                        InvestigationFieldSetting InvestlistSetting = ((InvestigationFieldSetting)item.Settings);
                                        switch (InvestlistSetting.ControlType)
                                        {
                                            case AutoListControlType.ComboBox:
                                                if (InvestlistSetting.SelectedItem != null)
                                                {
                                                    tempForInvest = true;
                                                }
                                                break;
                                            case AutoListControlType.ListBox:
                                                switch (InvestlistSetting.ChoiceMode)
                                                {
                                                    case SelectionMode.Single:
                                                        if (InvestlistSetting.SelectedItem != null)
                                                        {
                                                            tempForInvest = true;
                                                        }
                                                        break;
                                                    case SelectionMode.Multiples:
                                                        if (InvestlistSetting.SelectedItems != null && InvestlistSetting.SelectedItems.Count > 0)
                                                        {
                                                            tempForInvest = true;
                                                        }
                                                        break;
                                                }
                                                break;
                                            case AutoListControlType.CheckListBox:
                                                for (int k = 0; k < InvestlistSetting.ItemSource.Count; k++)
                                                {
                                                    if (((MasterListItem)InvestlistSetting.ItemSource[k]).Status)
                                                    {
                                                        tempForInvest = true;
                                                    }
                                                }
                                                break;
                                        }
                                        if (tempForInvest == false)
                                        {
                                            listofMandatoryFields += i++ + ". " + item.Title + ", ";
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            return listofMandatoryFields;
        }

        private void GetQualityControl()
        {

        }

        private void FormTab_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (flagForTabs == true)
            {
                if (((TabItem)FormTab.SelectedItem).Name != "tabHistory")
                {
                    HistoryBorderForm.Visibility = Visibility.Collapsed;
                    BorderForm.Visibility = Visibility.Visible;
                }
                else
                {
                    HistoryBorderForm.Visibility = Visibility.Visible;
                    BorderForm.Visibility = Visibility.Collapsed;
                }
                Indicatior = new WaitIndicator();
                Indicatior.Show();

                FrequencyFlag = false;
                ForFlag = false;

                IsFirstTime = true;
                GenratePreview();
                MapRelations();
                IsFirstTime = false;

                Indicatior.Close();
            }
            flagForTabs = true;
        }

        private PatientCaseReferralSetting GetCaseReferral()
        {
            PatientCaseReferralSetting PCReferral = new PatientCaseReferralSetting();
            try
            {
                PCReferral.Name = this.SelectedPatient.Name;
                PCReferral.Age = this.SelectedPatient.Age.ToString();
                PCReferral.Gender = this.SelectedPatient.Gender;
                PCReferral.Add = this.SelectedPatient.Address;
                PCReferral.Occupation = this.SelectedPatient.Occupation;
                PCReferral.Phone = this.SelectedPatient.Phone;
                PCReferral.Date = DateTime.Now.ToString();
                PCReferral.ClinicRefNo = this.SelectedPatient.ClinicRegNo;

                //PCReferral.ReferredByDoctor = "Dr. Asthana";
                PCReferral.ReferredByDoctor = "";
                if (Form.FindName("RMTo") != null)
                    PCReferral.ReferredToDoctor = (DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMTo")).SelectedItem).Title : "";
                //PCReferral.ClinicNo1 = "1";
                PCReferral.ClinicNo1 = "";
                if (Form.FindName("RMAt") != null)
                    PCReferral.ClinicNo2 = (DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMAt")).SelectedItem).Title : "";
                //PCReferral.MobileNo1 = "8956138567";
                PCReferral.MobileNo1 = "";
                //PCReferral.MobileNo2 = "9867543215";
                PCReferral.MobileNo2 = "";
                PCReferral.ProDiag = "";
                if (Form.FindName("RMProvisionalDiagnosis") != null)
                    PCReferral.ProDiag = ((TextBox)Form.FindName("RMProvisionalDiagnosis")).Text;
                if (cmbComplaint.SelectedItem != null)
                    PCReferral.ChiefComplaint = ((clsEMRTemplateVO)cmbComplaint.SelectedItem).Title;
                //PCReferral.ProDiag = "Pediatric-Diarrhea";

                if (Form.FindName("RMFor") != null && ((DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem) != null && Form.FindName("RMSpecificRequest") != null && (TextBox)Form.FindName("RMSpecificRequest") != null)
                {
                    PCReferral.Summary = "\t\tReason of Referring : " + (DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem != null ? ((DynamicListItem)((ComboBox)Form.FindName("RMFor")).SelectedItem).Title : "" + "\r\t\tSpecific Request : " + ((TextBox)Form.FindName("RMSpecificRequest")).Text;
                }
            }
            catch (Exception ex)
            {

            }
            return PCReferral;
        }

        private void GetHistoryMedication()
        {
            PrescriptionList = null;
            PrescriptionList = new List<clsPatientPrescriptionDetailVO>();

            if (SelectedFormStructure != null && SelectedFormStructure.SectionList != null)
            {
                FieldDetail target = null;
                foreach (var section in SelectedFormStructure.SectionList)
                {
                    foreach (var field in section.FieldList)
                    {
                        target = field;
                        target.Parent = section;
                        if (target != null)
                        {
                                switch (target.DataType.Id)
                                {
                                              case 9:
                                        MedicationFieldSetting medSetting = ((MedicationFieldSetting)target.Settings);
                                        for (int i = 0; i < medSetting.ItemsSource.Count; i++)
                                        {
                                            if (((Medication)medSetting.ItemsSource[i]).Drug != null)
                                            {
                                                PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                                                {
                                                    DrugID = (((Medication)medSetting.ItemsSource[i]).Drug.ID),
                                                    DrugName = (((Medication)medSetting.ItemsSource[i]).Drug.Description),
                                                    Dose = (((Medication)medSetting.ItemsSource[i]).Dose),
                                                    Route = ((Medication)medSetting.ItemsSource[i]).Route == null ? "" : ((Medication)medSetting.ItemsSource[i]).Route.Description,
                                                    Frequency = ((Medication)medSetting.ItemsSource[i]).Frequency.ToString(),
                                                    Days = (((Medication)medSetting.ItemsSource[i]).Day),
                                                    Quantity = (((Medication)medSetting.ItemsSource[i]).Quantity),
                                                    IsOther = true,
                                                   

                                                });
                                            }
                                        }
                                        break;

                                    case 14:
                                        OtherMedicationFieldSetting OthermedSetting = ((OtherMedicationFieldSetting)target.Settings);
                                        for (int i = 0; i < OthermedSetting.ItemsSource.Count; i++)
                                        {
                                            if (((OtherMedication)OthermedSetting.ItemsSource[i]).Drug != null)
                                            {
                                                PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                                                {
                                                    DrugID = 0,
                                                    DrugName = ((OtherMedication)OthermedSetting.ItemsSource[i]).Drug.ToString(),
                                                    Dose = (((OtherMedication)OthermedSetting.ItemsSource[i]).Dose),
                                                    Route = ((OtherMedication)OthermedSetting.ItemsSource[i]).Route == null ? "" : ((OtherMedication)OthermedSetting.ItemsSource[i]).Route.Description,
                                                    Frequency = ((OtherMedication)OthermedSetting.ItemsSource[i]).Frequency.ToString(),
                                                    Days = (((OtherMedication)OthermedSetting.ItemsSource[i]).Day),
                                                    Quantity = (((OtherMedication)OthermedSetting.ItemsSource[i]).Quantity),
                                                    IsOther = true,
                                                    
                                                    Reason = (((OtherMedication)OthermedSetting.ItemsSource[i]).Reason),
                                                });
                                            }
                                        }
                                        break;




                                }
                            
                        }

                    }
                }
            }
        }
        private List<clsPatientPrescriptionDetailVO> GetPrescription()
        {
            List<clsPatientPrescriptionDetailVO> PrescriptionList = new List<clsPatientPrescriptionDetailVO>();

            int k = 0;
            //Added at razi
            ListBox lst = (ListBox)Form.FindName("MedicationFieldSetting");
            if (lst != null)
            {
                while (k < lst.Items.Count)
                {

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                    {
                        PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                        {
                            DrugID = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.ID),
                            Dose = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose),
                            Route = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route == null ? "" : ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description,
                            Frequency = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString(),
                            Days = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day),
                            Quantity = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity),

                        });
                    }
                    k++;
                }
            }
        
            k = 0;
            lst = (ListBox)Form.FindName("ManagementAntiemetics");
            if (lst != null)
            {
                while (k < lst.Items.Count)
                {

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                    {
                        PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                        {
                            DrugID = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.ID),
                            Dose = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose),
                            Route = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route == null ? "" : ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description,
                            Frequency = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString(),
                            Days = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day),
                            Quantity = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity),

                        });
                    }
                    k++;
                }
            }

            lst = null;
            lst = (ListBox)Form.FindName("ManagementAntibiotics");
            if (lst != null)
            {

                k = 0;
                while (k < lst.Items.Count)
                {

                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                    {
                        PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                        {
                            DrugID = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.ID),
                            Dose = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose),
                            Route = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route == null ? "" : ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description,
                            Frequency = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString(),
                            Days = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day),
                            Quantity = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity),

                        });
                    }
                    k++;
                }
            }

            lst = null;
            lst = (ListBox)Form.FindName("ManagementAntipyretic");
            if (lst != null)
            {
                k = 0;
                while (k < lst.Items.Count)
                {
                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                    {
                        PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                        {
                            DrugID = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.ID),
                            Dose = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose),
                            Route = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route == null ? "" : ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description,
                            Frequency = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString(),
                            Days = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day),
                            Quantity = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity),

                        });
                    }
                    k++;
                }
            }

            lst = null;
            lst = (ListBox)Form.FindName("ManagementAntispasmodic");
            if (lst != null)
            {
                k = 0;
                while (k < lst.Items.Count)
                {
                    if (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug != null)
                    {
                        PrescriptionList.Add(new clsPatientPrescriptionDetailVO()
                        {
                            DrugID = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Drug.ID),
                            Dose = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Dose),
                            Route = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route == null ? "" : ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Route.Description,
                            Frequency = ((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Frequency.ToString(),
                            Days = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Day),
                            Quantity = (((Medication)((MedicatioRepeterControlItem)lst.Items[k]).DataContext).Quantity),

                        });
                    }
                    k++;
                }
            }

            return PrescriptionList;
        }

        private void LinkProtocol_Click(object sender, RoutedEventArgs e)
        {
            if (this.SelectedFormStructure != null && ((FormDetail)this.SelectedFormStructure).ProtocolUrl != null && ((FormDetail)this.SelectedFormStructure).ProtocolUrl != "")
            {
                try
                {
                    HtmlPage.Window.Invoke("alertText", new string[] { ((FormDetail)this.SelectedFormStructure).ProtocolUrl });
                }
                catch (Exception ex)
                {
                    MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Error occured while open link", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                    mgbox.Show();
                }
            }
            else
            {
                MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Protocol File is not Defined", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                mgbox.Show();
            }
        }

        private void LinkFlowChart_Click(object sender, RoutedEventArgs e)
        {
            if (this.SelectedFormStructure != null && ((FormDetail)this.SelectedFormStructure).FlowChartUrl != null && ((FormDetail)this.SelectedFormStructure).FlowChartUrl != "")
            {
                try
                {
                    HtmlPage.Window.Invoke("alertText", new string[] { ((FormDetail)this.SelectedFormStructure).FlowChartUrl });
                }
                catch (Exception ex)
                {
                    MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Error occured while open link", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                    mgbox.Show();
                }
            }
            else
            {
                MessageBoxChildWindow mgbox = new MessageBoxChildWindow("Palash", "Flow Chart File is not Defined", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                mgbox.Show();
            }
        }

        void GetPatientVisitForPreviewFile()
        {
            try
            {
                clsGetVisitBizActionVO BizActionVisit = new clsGetVisitBizActionVO();
                BizActionVisit.Details = new clsVisitVO();
                BizActionVisit.GetLatestVisit = true;
                BizActionVisit.Details.PatientId = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                BizActionVisit.Details.PatientUnitId = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                BizActionVisit.Details.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                {
                    BizActionVisit.ForHO = true;
                    BizActionVisit.Details.UnitId = 0L;
                }

                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                PalashServiceClient clientVisit = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                clientVisit.ProcessCompleted += (sVisit, argVisit) =>
                {
                    if (argVisit.Error == null)
                    {
                        if (argVisit.Result != null)
                        {
                  
                            if (((clsGetVisitBizActionVO)argVisit.Result).Details != null && ((clsGetVisitBizActionVO)argVisit.Result).Details.ID > 0)
                            {
                                BizActionVisit = (clsGetVisitBizActionVO)argVisit.Result;
                                CurrentVisit = ((clsGetVisitBizActionVO)argVisit.Result).Details;
                            }
                           
                        }
                    }
                };
                clientVisit.ProcessAsync(BizActionVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
                clientVisit.CloseAsync();
            }
            catch (Exception ex)
            {
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while getting visit information.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                msgbx.Show();
            }
        }

        //.............................................
        void GetPatientCurrentVisit()
        {
            try
            {
                clsGetCurrentVisitBizActionVO BizActionVisit = new clsGetCurrentVisitBizActionVO();
                BizActionVisit.Details = new clsVisitVO();
                BizActionVisit.GetLatestVisit = true;
                BizActionVisit.Details.PatientId = ((IApplicationConfiguration)App.Current).SelectedPatient.PatientID;
                BizActionVisit.Details.PatientUnitId = ((IApplicationConfiguration)App.Current).SelectedPatient.UnitId;
                BizActionVisit.Details.UnitId = ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId;
                if (((IApplicationConfiguration)App.Current).ApplicationConfigurations.UnitID == ((IApplicationConfiguration)App.Current).CurrentUser.UserLoginInfo.UnitId && ((IApplicationConfiguration)App.Current).ApplicationConfigurations.IsHO == true)
                {
                    BizActionVisit.ForHO = true;
                    BizActionVisit.Details.UnitId = 0L;
                }

                Uri address1 = new Uri(Application.Current.Host.Source, "../PalashTestService.svc"); // this url will work both in dev and after deploy                
                PalashServiceClient clientVisit = new PalashServiceClient("BasicHttpBinding_IPalashService", address1.AbsoluteUri);
                clientVisit.ProcessCompleted += (sVisit, argVisit) =>
                {
                    if (argVisit.Error == null)
                    {
                        if (argVisit.Result != null)
                        {

                            if (((clsGetCurrentVisitBizActionVO)argVisit.Result).Details != null && ((clsGetCurrentVisitBizActionVO)argVisit.Result).Details.ID > 0)
                            {
                                BizActionVisit = (clsGetCurrentVisitBizActionVO)argVisit.Result;
                                CurrentVisit = ((clsGetCurrentVisitBizActionVO)argVisit.Result).Details;
                                if (IsIVFTemp != true)
                                {
                                    LoadTemplate(GlobalTemplateID);
                                }
                                else
                                {
                                    IsIVFTemp = false;
                                }
                            } else
                        {
                            Indicatior.Close();
                            MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Visit is not found. \n Please create a visit first.", MessageBoxButtons.Ok, MessageBoxIcon.Information);
                            msgbx.Show();
                        }
                           
                        }
                       
                    }
                };
                clientVisit.ProcessAsync(BizActionVisit, ((IApplicationConfiguration)App.Current).CurrentUser);
                clientVisit.CloseAsync();
            }
            catch (Exception ex)
            {
                MessageBoxChildWindow msgbx = new MessageBoxChildWindow("Palash", "Error occured while getting visit information.", MessageBoxButtons.Ok, MessageBoxIcon.Error);
                msgbx.Show();
            }
        }
        //.............................................
    }

    public class Patient
    {
        public Int64 PatientId { get; set; }
        public string Name { get; set; }
        public int? Age { get; set; }
        //public bool? Gender { get; set; }
        public string Gender { get; set; }
        public string Address { get; set; }
        public string Occupation { get; set; }
        public string Phone { get; set; }
        public string ClinicRegNo { get; set; }
        public long patientUnitID { get; set; }

    }
}
